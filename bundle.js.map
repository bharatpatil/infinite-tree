{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 7045c80b604e4a38e4eb","webpack:///./index.js","webpack:///../src/index.js","webpack:///../src/infinite-tree.js","webpack:///../~/webpack/~/node-libs-browser/~/events/events.js","webpack:///../~/clusterize.js/clusterize.js","webpack:///../~/flattree/lib/index.js","webpack:///../~/flattree/lib/flatten.js","webpack:///../~/flattree/lib/extend.js","webpack:///../~/flattree/lib/node.js","webpack:///../src/lookup-table.js","webpack:///../src/renderer.js","webpack:///../src/helper.js","webpack:///./renderer.js","webpack:///../src/index.styl?cdde","webpack:///../src/index.styl","webpack:///../~/css-loader/lib/css-base.js","webpack:///../~/style-loader/addStyles.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_src","_src2","_renderer","_renderer2","_helper","data","source","i","push","JSON","parse","replace","updatePreview","node","el","document","querySelector","innerHTML","stringify","label","children","length","parent","state","tree","autoOpen","droppable","rowRenderer","selectable","shouldSelectNode","getSelectedNode","on","progress","style","width","console","log","e","dataTransfer","getData","quoteattr","loadData","selectNode","getChildNodes","draggableElement","addEventListener","preventDefault","stopPropagation","dragDrop","effectAllowed","target","srcElement","setData","window","_infiniteTree","_infiniteTree2","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_typeof","Symbol","iterator","_events","_events2","_clusterize","_clusterize2","_flattree","_lookupTable","_lookupTable2","ensureNodeInstance","Node","Error","extend","_len","arguments","sources","Array","_key","undefined","output","index","key","hasOwnProperty","InfiniteTree","_events$EventEmitter","options","this","_this","defaultRowRenderer","openNodes","rootNode","selectedNode","clusterize","nodeTable","nodes","rows","scrollElement","contentElement","dragoverElement","contentListener","click","itemTarget","handleToggler","currentTarget","parentElement","className","indexOf","getAttribute","getNodeById","toggleNode","dragenter","removeClass","hasAttribute","canDrop","match","addClass","dragend","dragover","dropEffect","drop","emit","error","_this2","createElement","classNames","appendChild","tag","scrollElem","contentElem","no_data_class","callbacks","clusterWillChange","clusterChanged","scrollingProgress","destroy","removeEventListener","clear","firstChild","removeChild","containerElement","addChildNodeAt","newNode","parentNode","_this3","Number","splice","deleteCount","total","flatten","getChildAt","map","parentOffset","apply","concat","flattenNode","forEach","set","update","appendChildNode","closeNode","nodeIndex","selectedIndex","rangeFrom","rangeTo","open","filter","hasChildren","flattenChildNodes","list","getFirstChild","getNextSibling","getParent","get","getOpenNodes","slice","getRootNode","insertNodeAfter","referenceNode","insertNodeBefore","_this4","openAllNodes","openNode","_this5","removeChildNodes","_this6","parentNodeIndex","childNodes","unset","removeNode","_this7","getPreviousSibling","scrollToNode","querySelectorAll","rowHeight","offsetHeight","scrollTop","_options","selected","_selectedNode","_selectedIndex","toString","traverse","s","_loop","keys","join","updateNode","_node","EventEmitter","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","n","isNaN","type","er","handler","len","args","listeners","addListener","listener","newListener","warned","trace","once","g","removeListener","fired","position","removeAllListeners","ret","listenerCount","evlistener","emitter","name","definition","evt","element","fnc","attachEvent","off","detachEvent","isArray","arr","getStyle","prop","elem","getComputedStyle","currentStyle","ie","v","all","documentMode","is_mac","navigator","platform","toLowerCase","Clusterize","defaults","item_height","block_height","rows_in_block","rows_in_cluster","cluster_height","blocks_in_cluster","content_tag","show_no_data_row","no_data_text","keep_parity","scroll_top","option","elems","getElementById","content_elem","setAttribute","fetchMarkup","cache","bottom","scroll_elem","exploreEnvironment","insertToDOM","last_cluster","scroll_debounce","pointer_events_set","scrollEv","pointerEvents","clearTimeout","setTimeout","getClusterNum","getScrollProgress","resize_debounce","resizeEv","refresh","clean","html","generateEmptyRow","getRowsHeight","new_rows","getRowsAmount","add","where","_new_rows","append","prepend","rows_nodes","shift","outerHTML","opts","tagName","prev_item_height","Math","floor","parseInt","td","empty_row","no_data_content","createTextNode","generate","cluster_num","rows_len","top_offset","bottom_offset","rows_above","items_start","max","items_end","this_cluster_rows","renderExtraTag","class_name","height","clusterize_prefix","this_cluster_content_changed","checkChanges","only_bottom_offset_changed","layout","lastChild","last","div","child_nodes","ii","changed","_flatten","_flatten2","_node2","_extend","_extend2","stack","pool","throwOnError","firstNode","depth","path","prefixMask","subtotal","_p$state","_p$state$total","isLastChild","_stack$pop","pop","current","prefix","mask","parentDidOpen","_p","_p2","getChildren","getLastChild","hasNextSibling","LookupTable","has","treeOptions","_state$selected","childrenLength","more","togglerContent","toggler","buildHTML","class","title","treeNode","aria-id","aria-expanded","aria-depth","aria-path","aria-selected","aria-children","aria-total","tree-selected","returnValue","cancelBubble","dispatchEvent","eventType","createEvent","initEvent","hasClass","classes","split","toggleClass","ok","preserveCR","attrs","h","attr","props","icon","glyphicon-folder-open","glyphicon-folder-close","glyphicon-file","count","treeNodeAttributes","content","locals","result","item","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","removeStyleElement","idx","createStyleElement","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","styleSheet","cssText","replaceText","cssNode","unescape","encodeURIComponent","blob","oldSrc","memoize","fn","memo","isOldIE","test","userAgent","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean"],"mappings":"CAAS,SAAUA,SCInB,QAAAC,qBAAAC,UAGA,GAAAC,iBAAAD,UACA,MAAAC,kBAAAD,UAAAE,OAGA,IAAAC,QAAAF,iBAAAD,WACAE,WACAE,GAAAJ,SACAK,QAAA,EAUA,OANAP,SAAAE,UAAAM,KAAAH,OAAAD,QAAAC,cAAAD,QAAAH,qBAGAI,OAAAE,QAAA,EAGAF,OAAAD,QAvBA,GAAAD,oBAqCA,OATAF,qBAAAQ,EAAAT,QAGAC,oBAAAS,EAAAP,iBAGAF,oBAAAU,EAAA,GAGAV,oBAAA,KDMM,SAASI,OAAQD,QAASH,qBAE/B,YAcA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,UAAWF,KE5D1F,GAAAG,MAAAf,oBAAA,GFkDKgB,MAAQL,uBAAuBI,MEjDpCE,UAAAjB,oBAAA,IFqDKkB,WAAaP,uBAAuBM,UEpDzCjB,qBAAA,GAMA,KAAK,GALLmB,SAAAnB,oBAAA,IAEMoB,QACAC,OAAS,8wBAENC,EAAI,EAAO,IAAJA,IAAYA,EACxBF,KAAKG,KAAKC,KAAKC,MAAMJ,OAAOK,QAAQ,0BAA2B,aAAeJ,EAAI,MAGtF,IAAMK,eAAgB,SAACC,MACnB,GAAMC,IAAKC,SAASC,cAAc,WAC9BH,MACAC,GAAGG,UAAYR,KAAKS,WAChB5B,GAAIuB,KAAKvB,GACT6B,MAAON,KAAKM,MACZC,SAAUP,KAAKO,SAAWP,KAAKO,SAASC,OAAS,EACjDC,OAAQT,KAAKS,OAAST,KAAKS,OAAOhC,GAAK,KACvCiC,MAAOV,KAAKU,OACb,KAAM,GAAGZ,QAAQ,MAAO,QAAQA,QAAQ,MAAO,UAElDG,GAAGG,UAAY,IAIjBO,KAAO,GAAAvB,OAAA,YACTwB,UAAU,EACVC,WAAW,EACXZ,GAAIC,SAASC,cAAc,SAC3BW,YAAAxB,WAAA,WACAyB,YAAY,EACZC,iBAAkB,SAAChB,MACf,SAAKA,MAASA,OAASW,KAAKM,qBAOpCN,MAAKO,GAAG,iBAAkB,SAACC,UACvBjB,SAASC,cAAc,uBAAuBiB,MAAMC,MAAQF,SAAW,MAE3ER,KAAKO,GAAG,SAAU,WACd,GAAMlB,MAAOW,KAAKM,iBAClBlB,eAAcC,QAElBW,KAAKO,GAAG,WAAY,SAAClB,MACjBsB,QAAQC,IAAI,WAAYvB,QAE5BW,KAAKO,GAAG,YAAa,SAAClB,MAClBsB,QAAQC,IAAI,YAAavB,QAE7BW,KAAKO,GAAG,WAAY,SAAClB,KAAMwB,GACvB,GAAM/B,QAAS+B,EAAEC,aAAaC,QAAQ,OACtCJ,SAAQC,IAAI,sBAAwB3B,KAAKS,UAAUZ,QAAU,mBAAqBG,KAAKS,UAAUL,KAAKM,QACtGJ,SAASC,cAAc,mBAAmBC,UAAY,kBAAmB,EAAAb,QAAAoC,WAAU3B,KAAKM,OAAS,SAErGK,KAAKO,GAAG,aAAc,SAAClB,MACnBD,cAAcC,QAGlBW,KAAKiB,SAASpC,MAGdmB,KAAKkB,WAAWlB,KAAKmB,gBAAgB,GAGrC,IAAMC,kBAAmB7B,SAASC,cAAc,uBAGhD,EAAAZ,QAAAyC,kBAAiBD,iBAAkB,cAAe,SAACP,GAI/C,OAHA,EAAAjC,QAAA0C,gBAAeT,IACf,EAAAjC,QAAA2C,iBAAgBV,GAChBO,iBAAiBI,YACV,KAGX,EAAA5C,QAAAyC,kBAAiBD,iBAAkB,YAAa,SAACP,GAC7CA,EAAEC,aAAaW,cAAgB,MAC/B,IAAMC,QAASb,EAAEa,QAAUb,EAAEc,UAC7Bd,GAAEC,aAAac,QAAQ,OAAQF,OAAO5D,IACtCyB,SAASC,cAAc,mBAAmBC,UAAY,MAG1D,EAAAb,QAAAyC,kBAAiBD,iBAAkB,UAAW,SAASP,MAGvDgB,OAAO7B,KAAOA,MF6DR,SAASnC,OAAQD,QAASH,qBAE/B,YAMA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,UAAWF,KG9J1F,GAAAyD,eAAArE,oBAAA,GH4JKsE,eAAiB3D,uBAAuB0D,cG1J7CjE,QAAOD,QAAPmE,eAAA,YHkKM,SAASlE,OAAQD,QAASH,qBAE/B,YAwBA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,UAAWF,KAEzF,QAAS2D,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMrE,MAAQ,IAAKqE,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOtE,MAAyB,gBAATA,OAAqC,kBAATA,MAA8BqE,KAAPrE,KAElO,QAASuE,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YA5Bje7E,QAAQU,YAAa,CAErB,IAAI8E,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUjF,KAAO,aAAcA,MAAS,SAAUA,KAAO,MAAOA,MAAyB,kBAAXgF,SAAyBhF,IAAIwE,cAAgBQ,OAAS,eAAkBhF,MI1K3OkF,QAAA9F,oBAAA,GJ8KK+F,SAAWpF,uBAAuBmF,SI7KvCE,YAAAhG,oBAAA,GJiLKiG,aAAetF,uBAAuBqF,aIhL3CE,UAAAlG,oBAAA,GACAmG,aAAAnG,oBAAA,GJqLKoG,cAAgBzF,uBAAuBwF,cIpL5ClF,UAAAjB,oBAAA,IACAmB,QAAAnB,oBAAA,IAUMqG,mBAAqB,SAACzE,MACxB,KAAMA,eAAAsE,WAAAI,MACF,KAAM,IAAIC,OAAM,kCAEpB,QAAO,GAGLC,OAAS,SAACvC,QJwLX,IAAK,GAAIwC,MAAOC,UAAUtE,OIxLJuE,QAAAC,MAAAH,KAAA,EAAAA,KAAA,KAAAI,KAAA,EAAAJ,KAAAI,YJyLlBF,QAAQE,KAAO,GAAKH,UAAUG,KIxLnC,IAAeC,SAAX7C,QAAmC,OAAXA,OACxB,KAAM,IAAIS,WAAU,6CAIxB,KAAK,GADCqC,QAAS7B,OAAOjB,QACb+C,MAAQ,EAAGA,MAAQL,QAAQvE,OAAQ4E,QAAS,CACjD,GAAM3F,QAASsF,QAAQK,MACvB,IAAeF,SAAXzF,QAAmC,OAAXA,OACxB,IAAK,GAAI4F,OAAO5F,QACRA,OAAO6F,eAAeD,OACtBF,OAAOE,KAAO5F,OAAO4F,MAKrC,MAAOF,SAGLI,aAAA,SAAAC,sBAiIF,QAjIED,gBJiMG,GIhEOE,SAAAX,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,MAAUA,UAAA,EJkEjBnC,iBAAgB+C,KInMnBH,aJuMG,IAAII,OAAQ5C,2BAA2B2C,KIrExCF,qBAAA7G,KAAA+G,MAKA,OJkECC,OIxMLF,SACI7E,UAAU,EACVC,WAAW,EACXZ,GAAI,KACJa,YAAAzB,UAAAuG,mBACA7E,YAAY,EACZC,iBAAkB,MJ0MjB2E,MIxMLjF,OACImF,aACAC,SAAU,KACVC,aAAc,MJ0MbJ,MIxMLK,WAAa,KJyMRL,MIxMLM,UAAY,GAAAzB,eAAA,WJyMPmB,MIxMLO,SJyMKP,MIxMLQ,QJyMKR,MIxMLS,cAAgB,KJyMXT,MIxMLU,eAAiB,KJyMZV,MIxMLW,gBAAkB,KJyMbX,MIvMLY,iBACIC,MAAS,SAAChF,GACN,GAAIiF,YAAa,KACbC,eAAgB,CAUpB,MARA,EAAAnH,QAAA2C,iBAAgBV,GAEZA,EAAEa,QAAUb,EAAEmF,cACdF,WAAajF,EAAGa,SAAWb,EAAEmF,cAAiBnF,EAAEa,OAAS,KAClDb,EAAEc,aACTmE,WAAajF,EAAEc,YAGZmE,YAAcA,WAAWG,gBAAkBjB,MAAKU,gBAC/CI,WAAWI,UAAUC,QAAQ,iBAAmB,IAChDJ,eAAgB,GAEpBD,WAAaA,WAAWG,aAG5B,IAAKH,WAAL,CAIA,GAAMhI,IAAKgI,WAAWM,aAAa,WAC7B/G,KAAO2F,MAAKqB,YAAYvI,GAE9B,IAAKuB,KA1BO,MA+BR0G,mBACAf,OAAKsB,WAAWjH,UAIpB2F,OAAK9D,WAAW7B,QAIpBkH,UAAa,SAAC1F,GACV,GAAIiF,YAAa,IAQjB,KANIjF,EAAEa,QAAUb,EAAEmF,cACdF,WAAajF,EAAGa,SAAWb,EAAEmF,cAAiBnF,EAAEa,OAAS,KAClDb,EAAEc,aACTmE,WAAajF,EAAEc,YAGZmE,YAAcA,WAAWG,gBAAkBjB,MAAKU,gBACnDI,WAAaA,WAAWG,aAG5B,IAAKH,YAIDd,MAAKW,kBAAoBG,WAAY,CAIrC,IAHA,EAAAlH,QAAA4H,aAAYxB,MAAKW,gBAAiB,aADGX,MAEhCW,gBAAkB,MAEjBG,WAAWW,aAAa,aAC1B,MAGJ,IAAMC,UAAYZ,WAAWM,aAAa,aAAaO,MAAM,SACzDD,YACA,EAAA9H,QAAAgI,UAASd,WAAY,aACrBd,MAAKW,gBAAkBG,cAMnCe,QAAW,SAAChG,GACJmE,MAAKW,mBACL,EAAA/G,QAAA4H,aAAYxB,MAAKW,gBAAiB,aADZX,MAEjBW,gBAAkB,OAK/BmB,SAAY,SAACjG,GAGT,OAFA,EAAAjC,QAAA0C,gBAAeT,GACfA,EAAEC,aAAaiG,WAAa,QACrB,GAIXC,KAAQ,SAACnG,GAIL,IAFA,EAAAjC,QAAA0C,gBAAeT,GAEXmE,MAAKW,gBAAiB,CACtB,GAAM7H,IAAKkH,MAAKW,gBAAgBS,aAAa,WACvC/G,KAAO2F,MAAKqB,YAAYvI,KAE9B,EAAAc,QAAA4H,aAAYxB,MAAKW,gBAAiB,aAClCX,MAAKW,gBAAkB,KAEvBX,MAAKiC,KAAK,WAAY5H,KAAMwB,MAUpCmE,MAAKF,QAAUb,UAAWe,MAAKF,QAASA,SAEnCE,MAAKF,QAAQxF,IAKlB0F,MAAKpC,SAGDkC,QAAQjG,MACRmG,MAAK/D,SAAS6D,QAAQjG,MJqMlBmG,QI7MJrE,QAAQuG,MAAM,2DAA4DpC,SAC1E1C,2BAAA4C,QJygCP,MAt9BAzC,WAAUqC,aAAcC,sBI5LvBD,aAAAlC,UAmJFE,OAAA,WJsMK,GAAIuE,QAASpC,IIrMd,KAAKA,KAAKD,QAAQxF,GACd,KAAM,IAAI0E,OAAM,uCAGpB,IAAMyB,eAAgBlG,SAAS6H,cAAc,MAC7C3B,eAAcS,WAAY,EAAAtH,QAAAyI,YACtB,gBACA,uBAEJ,IAAM3B,gBAAiBnG,SAAS6H,cAAc,MAC9C1B,gBAAeQ,WAAY,EAAAtH,QAAAyI,YACvB,gBACA,yBAGJ5B,cAAc6B,YAAY5B,gBAC1BX,KAAKD,QAAQxF,GAAGgI,YAAY7B,eAE5BV,KAAKM,WAAa,GAAA3B,cAAA,YACd6D,IAAK,MACL/B,QACAgC,WAAY/B,cACZgC,YAAa/B,eACbgC,cAAe,wBACfC,WAEIC,kBAAmB,aAGnBC,eAAgB,aAGhBC,kBAAmB,SAACtH,UAChB2G,OAAKF,KAAK,iBAAkBzG,cAKxCuE,KAAKU,cAAgBA,cACrBV,KAAKW,eAAiBA,gBAEtB,EAAA9G,QAAAyC,kBAAiB0D,KAAKW,eAAgB,QAASX,KAAKa,gBAAgBC,OAChEd,KAAKD,QAAQ5E,aACb,EAAAtB,QAAAyC,kBAAiB9B,SAAU,UAAWwF,KAAKa,gBAAgBiB,UAC3D,EAAAjI,QAAAyC,kBAAiB0D,KAAKW,eAAgB,YAAaX,KAAKa,gBAAgBW,YACxE,EAAA3H,QAAAyC,kBAAiB0D,KAAKW,eAAgB,WAAYX,KAAKa,gBAAgBkB,WACvE,EAAAlI,QAAAyC,kBAAiB0D,KAAKW,eAAgB,OAAQX,KAAKa,gBAAgBoB,QAlMzEpC,aAAAlC,UAqMFqF,QAAA,WAAU,KACN,EAAAnJ,QAAAoJ,qBAAoBjD,KAAKW,eAAgB,QAASX,KAAKa,iBACnDb,KAAKD,QAAQ5E,aACb,EAAAtB,QAAAoJ,qBAAoBzI,SAAU,UAAWwF,KAAKa,gBAAgBiB,UAC9D,EAAAjI,QAAAoJ,qBAAoBjD,KAAKW,eAAgB,YAAaX,KAAKa,gBAAgBW,YAC3E,EAAA3H,QAAAoJ,qBAAoBjD,KAAKW,eAAgB,WAAYX,KAAKa,gBAAgBkB,WAC1E,EAAAlI,QAAAoJ,qBAAoBjD,KAAKW,eAAgB,OAAQX,KAAKa,gBAAgBoB,OAG1EjC,KAAKkD,QAEDlD,KAAKM,aACLN,KAAKM,WAAW0C,SAAQ,GADPhD,KAEZM,WAAa,MAIfN,KAAKW,eAAewC,YACvBnD,KAAKW,eAAeyC,YAAYpD,KAAKW,eAAewC,WAExD,MAAOnD,KAAKU,cAAcyC,YACtBnD,KAAKU,cAAc0C,YAAYpD,KAAKU,cAAcyC,WAEtD,IAAInD,KAAKD,QAAQxF,GAEb,IADA,GAAM8I,kBAAmBrD,KAAKD,QAAQxF,GAC/B8I,iBAAiBF,YACpBE,iBAAiBD,YAAYC,iBAAiBF,WAGtDnD,MAAKW,eAAiB,KACtBX,KAAKU,cAAgB,MAnOvBb,aAAAlC,UA8OF2F,eAAA,SAAeC,QAAS7D,MAAO8D,YJmM1B,GAAIC,QAASzD,II7Ld,IAJAwD,WAAaA,YAAcxD,KAAKhF,MAAMoF,SAEtCrB,mBAAmByE,aAEdD,QACD,OAAO,CAEX7D,OAAQgE,OAAOhE,QAAU,EACb,EAARA,QACAA,MAAQ,GAX2B6D,QAe/BxI,OAASyI,WACjBA,WAAW3I,SAAS8I,OAAOjE,MAAO,EAAG6D,QAErC,IAAMK,aAAcJ,WAAWxI,MAAM6I,KAlBEnE,OAqB/B8D,WAAW3I,SAASuG,QAAQmC,QAEpC,IAAM/C,QAAQ,EAAA5B,UAAAkF,SAAQN,WAAW3I,UAAYsF,UAAWH,KAAKhF,MAAMmF,WAvB5BoD,SA0B7BC,WAAWO,WAAWrE,MAEhC,IAAMe,MAAOD,MAAMwD,IAAI,SAAA1J,MJqMlB,MIrM0BmJ,QAAK1D,QAAQ3E,YAAYd,KAAMmJ,OAAK1D,WAC7DkE,aAAejE,KAAKQ,MAAMY,QAAQoC,WAmBxC,OAhDuCxD,MAgClCQ,MAAMmD,OAAOO,MAAMlE,KAAKQ,OAAQyD,aAAe,EAAGL,aAAaO,OAAO3D,QAC3ER,KAAKS,KAAKkD,OAAOO,MAAMlE,KAAKS,MAAOwD,aAAe,EAAGL,aAAaO,OAAO1D,OAjClCT,KAoClCoE,YAAYb,SAASc,QAAQ,SAAC/J,MACfkF,SAAZlF,KAAKvB,IACL0K,OAAKlD,UAAU+D,IAAIhK,KAAKvB,GAAIuB,QAtCG0F,KA2ClCS,KAAKwD,cAAgBjE,KAAKD,QAAQ3E,YAAYoI,WAAYxD,KAAKD,SA3C7BC,KA8ClCuE,UAEE,GA9RT1E,aAAAlC,UAuSF6G,gBAAA,SAAgBjB,QAASC,YAErBA,WAAaA,YAAcxD,KAAKhF,MAAMoF,SAEtCrB,mBAAmByE,WAEnB,IAAM9D,OAAQ8D,WAAW3I,SAASC,MAClC,OAAOkF,MAAKsD,eAAeC,QAAS7D,MAAO8D,aA9S7C3D,aAAAlC,UAiTFuF,MAAA,WACIlD,KAAKM,WAAW4C,QAChBlD,KAAKO,UAAU2C,QACflD,KAAKQ,SACLR,KAAKS,QACLT,KAAKhF,MAAMmF,aACXH,KAAKhF,MAAMoF,SAAW,KACtBJ,KAAKhF,MAAMqF,aAAe,MAxT5BR,aAAAlC,UA6TF8G,UAAA,SAAUnK,MACNyE,mBAAmBzE,KADP,IAINoK,WAAY1E,KAAKQ,MAAMY,QAAQ9G,KACrC,IAAgB,EAAZoK,UACA,KAAM,IAAIzF,OAAM,qBANR,IAURe,KAAKhF,MAAMmF,UAAUiB,QAAQ9G,MAAQ,EACrC,OAAO,CAXC,IAeR0F,KAAKhF,MAAMqF,cAAiBL,KAAKhF,MAAMqF,eAAiB/F,KAAO,CAM/D,GAAMqK,eAAgB3E,KAAKQ,MAAMY,QAAQpB,KAAKhF,MAAMqF,cAC9CuE,UAAYF,UAAY,EACxBG,QAAUH,UAAYpK,KAAKU,MAAM6I,KAErBc,gBAAdC,WAAkDC,SAAjBF,eACjC3E,KAAK7D,WAAW7B,MAIxBA,KAAKU,MAAM8J,MAAO,CA9BN,IA+BN3E,WAAYH,KAAKhF,MAAMmF,UAAU4E,OAAO,SAACzK,MJ6M1C,MI7MoDA,MAAK0K,eAAiB1K,KAAKU,MAAM8J,MAC1F9E,MAAKhF,MAAMmF,UAAYA,SAhCX,KAqCP,GAHCyD,aAActJ,KAAKU,MAAM6I,MAGtBzK,EAAIkB,KAAY,OAANlB,EAAYA,EAAIA,EAAE2B,OACjC3B,EAAE4B,MAAM6I,MAAQzK,EAAE4B,MAAM6I,MAAQD,WAgBpC,OAtDY5D,MA0CPQ,MAAMmD,OAAOe,UAAY,EAAGd,aACjC5D,KAAKS,KAAKkD,OAAOe,UAAY,EAAGd,aA3CpB5D,KA8CPS,KAAKiE,WAAa1E,KAAKD,QAAQ3E,YAAYd,KAAM0F,KAAKD,SA9C/CC,KAiDPkC,KAAK,YAAa5H,MAjDX0F,KAoDPuE,UAEE,GAnXT1E,aAAAlC,UAyXFsH,kBAAA,SAAkBzB,YAEdA,WAAaA,YAAcxD,KAAKhF,MAAMoF,SAEtCrB,mBAAmByE,WAMnB,KAJA,GAAM0B,SAGF5K,KAAOkJ,WAAW2B,gBACf7K,MAEH,GADA4K,KAAKjL,KAAKK,MACNA,KAAK0K,cACL1K,KAAOA,KAAK6K,oBACT,CAEH,KAAkC,OAA3B7K,KAAM8K,kBAA+B9K,KAAKS,SAAWyI,YAExDlJ,KAAOA,KAAK+K,WAJb/K,MAQIA,KAAK8K,iBAIpB,MAAOF,OAnZTrF,aAAAlC,UAyZFyG,YAAA,SAAY9J,MACR,OAAQA,MAAM6J,OAAOnE,KAAKiF,kBAAkB3K,QA1Z9CuF,aAAAlC,UA+ZFvB,cAAA,SAAcoH,YAMV,MAJAA,YAAaA,YAAcxD,KAAKhF,MAAMoF,SAEtCrB,mBAAmByE,YAEZA,WAAW3I,UArapBgF,aAAAlC,UA0aF2D,YAAA,SAAYvI,IACR,GAAIuB,MAAO0F,KAAKO,UAAU+E,IAAIvM,GAC9B,KAAKuB,KAAM,CAGP,GADAA,KAAO0F,KAAKQ,MAAMuE,OAAO,SAACzK,MJuNrB,MIvN+BA,MAAKvB,KAAOA,KAAK,IAChDuB,KACD,MAAO,KAEX0F,MAAKO,UAAU+D,IAAIhK,KAAKvB,GAAIuB,MAEhC,MAAOA,OApbTuF,aAAAlC,UAwbF4H,aAAA,WAEI,MAAOvF,MAAKhF,MAAMmF,UAAUqF,SA1b9B3F,aAAAlC,UA8bF8H,YAAA,WACI,MAAOzF,MAAKhF,MAAMoF,UA/bpBP,aAAAlC,UAmcFpC,gBAAA,WACI,MAAOyE,MAAKhF,MAAMqF,cApcpBR,aAAAlC,UA0cF+H,gBAAA,SAAgBnC,QAASoC,eACrB5G,mBAAmB4G,cACnB,IAAMnC,YAAamC,cAAcN,YAC3B3F,MAAQ8D,WAAW3I,SAASuG,QAAQuE,eAAiB,CAC3D,OAAO3F,MAAKsD,eAAeC,QAAS7D,MAAO8D,aA9c7C3D,aAAAlC,UAodFiI,iBAAA,SAAiBrC,QAASoC,eACtB5G,mBAAmB4G,cACnB,IAAMnC,YAAamC,cAAcN,YAC3B3F,MAAQ8D,WAAW3I,SAASuG,QAAQuE,cAC1C,OAAO3F,MAAKsD,eAAeC,QAAS7D,MAAO8D,aAxd7C3D,aAAAlC,UA4dFzB,SAAA,WJqOK,GAAI2J,QAAS7F,KIrOTlG,KAAAsF,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,MAAOA,UAAA,EACZY,MAAKQ,OAAQ,EAAA5B,UAAAkF,SAAQhK,MAAQgM,aAAc9F,KAAKD,QAAQ7E,WADxC8E,KAIXO,UAAU2C,QAEflD,KAAKhF,MAAMmF,UAAYH,KAAKQ,MAAMuE,OAAO,SAACzK,MJyOrC,MIzO+CA,MAAK0K,eAAiB1K,KAAKU,MAAM8J,OACrF9E,KAAKhF,MAAMoF,SAAW,WAElB,IJyOC,GI3OmB9F,MAAA8E,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,GAAO,KAAAA,UAAA,GAEpB9E,MAAwB,OAAhBA,KAAKS,QAChBT,KAAOA,KAAKS,MAEhB,OAAOT,OACR0F,KAAKQ,MAAM,IACdR,KAAKhF,MAAMqF,aAAe,KAdVL,KAiBXiF,kBAAkBjF,KAAKhF,MAAMoF,UAAUiE,QAAQ,SAAC/J,MACjCkF,SAAZlF,KAAKvB,IACL8M,OAAKtF,UAAU+D,IAAIhK,KAAKvB,GAAIuB,QAnBpB0F,KAwBXS,KAAOT,KAAKQ,MAAMwD,IAAI,SAAA1J,MJ6OtB,MI7O8BuL,QAAK9F,QAAQ3E,YAAYd,KAAMuL,OAAK9F,WAxBvDC,KA2BXuE,UAvfP1E,aAAAlC,UA4fFoI,SAAA,SAASzL,MJiPJ,GAAI0L,QAAShG,IIhPdjB,oBAAmBzE,KADR,IAILoK,WAAY1E,KAAKQ,MAAMY,QAAQ9G,KACrC,IAAgB,EAAZoK,UACA,KAAM,IAAIzF,OAAM,qBANT,IAUPe,KAAKhF,MAAMmF,UAAUiB,QAAQ9G,OAAS,EACtC,OAAO,CAGXA,MAAKU,MAAM8J,MAAO,CAdP,IAeL3E,YAAa7F,MAAM6J,OAAOnE,KAAKhF,MAAMmF,UAfhCH,MAgBNhF,MAAMmF,UAAYA,SAEvB,IAAMK,QAAQ,EAAA5B,UAAAkF,SAAQxJ,KAAKO,UAAYsF,UAAWH,KAAKhF,MAAMmF,YACvDM,KAAOD,MAAMwD,IAAI,SAAA1J,MJmPlB,MInP0B0L,QAAKjG,QAAQ3E,YAAYd,KAAM0L,OAAKjG,UAwBnE,OA3CWC,MAsBNQ,MAAMmD,OAAOO,MAAMlE,KAAKQ,OAAQkE,UAAY,EAAG,GAAGP,OAAO3D,QAC9DR,KAAKS,KAAKkD,OAAOO,MAAMlE,KAAKS,MAAOiE,UAAY,EAAG,GAAGP,OAAO1D,OAvBjDT,KA0BNS,KAAKiE,WAAa1E,KAAKD,QAAQ3E,YAAYd,KAAM0F,KAAKD,SAGvDS,MAAO1F,OAAS,IAAQkF,KAAKO,UAAU+E,IAAI9E,MAAM,KACjDA,MAAM6D,QAAQ,SAAC/J,MACKkF,SAAZlF,KAAKvB,IACLiN,OAAKzF,UAAU+D,IAAIhK,KAAKvB,GAAIuB,QAhC7B0F,KAsCNkC,KAAK,WAAY5H,MAtCX0F,KAyCNuE,UAEE,GAviBT1E,aAAAlC,UA4iBFsI,iBAAA,SAAiBzC,YJuPZ,GAAI0C,QAASlG,IIpPd,IAFAjB,mBAAmByE,YAEgB,IAA/BA,WAAW3I,SAASC,OACpB,OAAO,CAGX,IAAMqL,iBAAkBnG,KAAKQ,MAAMY,QAAQoC,WAPlB,IAUrB2C,iBAAoB,GAAMnG,KAAKhF,MAAMqF,aAAc,CAMnD,GAAMsE,eAAgB3E,KAAKQ,MAAMY,QAAQpB,KAAKhF,MAAMqF,cAC9CuE,UAAYuB,gBAAkB,EAC9BtB,QAAUsB,gBAAkB3C,WAAWxI,MAAM6I,KAEjCc,gBAAdC,WAAkDC,SAAjBF,eACjC3E,KAAK7D,WAAWqH,YArBCA,WA0Bd3I,YACX2I,WAAWxI,MAAM8J,KAAOtB,WAAWxI,MAAM8J,MAAStB,WAAW3I,SAASC,OAAS,CA3BtD,KAiCpB,GAHC8I,aAAcJ,WAAWxI,MAAM6I,MAG5BzK,EAAIoK,WAAkB,OAANpK,EAAYA,EAAIA,EAAE2B,OACvC3B,EAAE4B,MAAM6I,MAAQzK,EAAE4B,MAAM6I,MAAQD,WA2BpC,OAxBIuC,kBAAmB,IAEnBnG,KAAKQ,MAAMmD,OAAOwC,gBAAkB,EAAGvC,aACvC5D,KAAKS,KAAKkD,OAAOwC,gBAAkB,EAAGvC,aAHhB5D,KAMjBS,KAAK0F,iBAAmBnG,KAAKD,QAAQ3E,YAAYoI,WAAYxD,KAAKD,WJ4PtE,WIxPD,GAAMqG,YAAaF,OAAKjB,kBAAkBzB,WAE1C0C,QAAKlL,MAAMmF,UAAY+F,OAAKlL,MAAMmF,UAAU4E,OAAO,SAACzK,MAChD,MAAO8L,YAAWhF,QAAQ9G,MAAQ,IAGtC8L,WAAW/B,QAAQ,SAAC/J,MAChB4L,OAAK3F,UAAU8F,MAAM/L,KAAKvB,SAtDTiH,KA2DpBuE,UAEE,GAzmBT1E,aAAAlC,UA8mBF2I,WAAA,SAAWhM,MJ8PN,GAAIiM,QAASvG,II7PdjB,oBAAmBzE,KAEnB,IAAMkJ,YAAalJ,KAAKS,MACxB,KAAKyI,WACD,OAAO,CALE,IASPkB,WAAY1E,KAAKQ,MAAMY,QAAQ9G,MAC/B6L,gBAAkBnG,KAAKQ,MAAMY,QAAQoC,WAV9B,IAaTkB,WAAc,GAAM1E,KAAKhF,MAAMqF,aAAc,CAM7C,GAAMsE,eAAgB3E,KAAKQ,MAAMY,QAAQpB,KAAKhF,MAAMqF,cAC9CuE,UAAYF,UACZG,QAAUH,UAAYpK,KAAKU,MAAM6I,MAAQ,CAE/C,IAAkBc,eAAdC,WAAkDC,SAAjBF,cAA2B,CAK5D,GAAMtE,cAAe/F,KAAK8K,kBAAoB9K,KAAKkM,sBAAwBlM,KAAK+K,WAChFrF,MAAK7D,WAAWkE,eA7BXmD,WAkCF3I,SAAS8I,OAAOH,WAAW3I,SAASuG,QAAQ9G,MAAO,GAC9DkJ,WAAWxI,MAAM8J,KAAOtB,WAAWxI,MAAM8J,MAAStB,WAAW3I,SAASC,OAAS,CAnClE,KAyCR,GAHC8I,aAActJ,KAAKU,MAAM6I,MAAQ,EAG9BzK,EAAIoK,WAAkB,OAANpK,EAAYA,EAAIA,EAAE2B,OACvC3B,EAAE4B,MAAM6I,MAAQzK,EAAE4B,MAAM6I,MAAQD,WA6BpC,OA1BIc,YAAa,IAEb1E,KAAKQ,MAAMmD,OAAOe,UAAWd,aAC7B5D,KAAKS,KAAKkD,OAAOe,UAAWd,cAI5BuC,iBAAmB,IACnBnG,KAAKS,KAAK0F,iBAAmBnG,KAAKD,QAAQ3E,YAAYoI,WAAYxD,KAAKD,WJmQtE,WI/PD,GAAMS,OAAQ+F,OAAKnC,YAAY9J,KAE/BiM,QAAKvL,MAAMmF,UAAYoG,OAAKvL,MAAMmF,UAAU4E,OAAO,SAACzK,MAChD,MAAOkG,OAAMY,QAAQ9G,MAAQ,IAGjCkG,MAAM6D,QAAQ,SAAC/J,MACXiM,OAAKhG,UAAU8F,MAAM/L,KAAKvB,SAhErBiH,KAqERuE,UAEE,GArrBT1E,aAAAlC,UA0rBF8I,aAAA,SAAanM,MACTyE,mBAAmBzE,KADJ,IAIToK,WAAY1E,KAAKQ,MAAMY,QAAQ9G,KACrC,IAAgB,EAAZoK,UACA,MAAO,EAEX,KAAK1E,KAAKW,eACN,MAAO,EATI,IAYTwC,YAAanD,KAAKW,eAAe+F,iBAAiB,cAAc,GAChEC,UAAYxD,YAAeA,WAAWyD,cAAiB,CAC7D,OAAO5G,MAAK6G,UAAUnC,UAAYiC,YAxsBpC9G,aAAAlC,UA6sBFkJ,UAAA,SAAU9I,OACN,MAAKiC,MAAKU,eAGIlB,SAAVzB,QACAiC,KAAKU,cAAcmG,UAAYnD,OAAO3F,QAEnCiC,KAAKU,cAAcmG,WALf,GA/sBbhH,aAAAlC,UAytBFxB,WAAA,WJyQK,GIzQM7B,MAAA8E,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,GAAO,KAAAA,UAAA,GJ0QT0H,SIzQoC9G,KAAKD,QAAtC1E,WAAAyL,SAAAzL,WAAYC,iBAAAwL,SAAAxL,gBAEpB,KAAKD,WACD,OAAO,CAEX,IAAiC,kBAArBC,oBAAqCA,iBAAiBhB,MAC9D,OAAO,CAGX,IAAa,OAATA,KAAe,CAEf,GAAI0F,KAAKhF,MAAMqF,aAAc,CACzB,GAAMA,cAAeL,KAAKhF,MAAMqF,aAC1BsE,cAAgB3E,KAAKQ,MAAMY,QAAQf,aAYzC,OAVAA,cAAarF,MAAM+L,UAAW,EAC9B/G,KAAKS,KAAKkE,eAAiB3E,KAAKD,QAAQ3E,YAAYiF,aAAcL,KAAKD,SACvEC,KAAKhF,MAAMqF,aAAe,KANDL,KASpBkC,KAAK,aAAc,MATClC,KAYpBuE,UAEE,EAGX,OAAO,EAGXxF,mBAAmBzE,KAhCC,IAmCdoK,WAAY1E,KAAKQ,MAAMY,QAAQ9G,KACrC,IAAgB,EAAZoK,UACA,KAAM,IAAIzF,OAAM,qBArCA,IAyChBe,KAAKhF,MAAMqF,eAAiB/F,OAC5BA,KAAKU,MAAM+L,UAAW,EADY/G,KAI7BS,KAAKiE,WAAa1E,KAAKD,QAAQ3E,YAAYd,KAAM0F,KAAKD,UAI3DC,KAAKhF,MAAMqF,aAAc,CACzB,GAAM2G,eAAehH,KAAKhF,MAAMqF,aAC1B4G,eAAgBjH,KAAKQ,MAAMY,QAAQ4F,cACzCA,eAAahM,MAAM+L,UAAW,EAC9B/G,KAAKS,KAAKwG,gBAAiBjH,KAAKD,QAAQ3E,YAAY4L,cAAchH,KAAKD,SAkB3E,MAfIC,MAAKhF,MAAMqF,eAAiB/F,MAC5B0F,KAAKhF,MAAMqF,aAAe/F,KADQ0F,KAI7BkC,KAAK,aAAc5H,QAExB0F,KAAKhF,MAAMqF,aAAe,KADvBL,KAIEkC,KAAK,aAAc,OAjERlC,KAqEfuE,UAEE,GAhyBT1E,aAAAlC,UAoyBF4D,WAAA,SAAWjH,MACH0F,KAAKhF,MAAMmF,UAAUiB,QAAQ9G,OAAS,EAEtC0F,KAAKyE,UAAUnK,MAGf0F,KAAK+F,SAASzL,OA1yBpBuF,aAAAlC,UAgzBFuJ,SAAA,WJiRK,GIjRI5M,MAAA8E,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,GAAO,KAAAA,UAAA,GACN+H,SAAW,QAAXA,UAAY7M,MACd,GAAI8M,GAAI,GACR,IAAI9M,MAAQA,KAAKO,SACb,IAAK,GJkRAwM,OAAQ,SIlRJrN,GACL,GAAIkL,QACJkC,IAAQ,IACRxJ,OAAO0J,KAAKhN,MAAM+J,QAAQ,SAAC1E,KACvB,GAAI5B,OAAQzD,KAAKqF,IACjB,IAAY,WAARA,IAGJ,MAAY,aAARA,QACAuF,MAAKjL,KAAK,IAAM0F,IAAM,KAAOwH,SAAS7M,KAAKO,SAASb,UAGnC,gBAAV+D,QAAuC,YAAV,mBAAAA,OAAA,YAAAM,QAAAN,QACpCmH,KAAKjL,KAAK,IAAM0F,IAAM,KAAOzF,KAAKS,UAAUoD,QAE5CmH,KAAKjL,KAAK,IAAM0F,IAAM,KAAO5B,UAGrCqJ,GAAQlC,KAAKqC,KAAK,KAClBH,EAAIA,EAAI,KAAOpN,IAAOM,KAAKO,SAASC,OAAS,EAAK,GAAK,MAnBlDd,EAAI,EAAGA,EAAIM,KAAKO,SAASC,SAAUd,EJ4SvCqN,MI5SIrN,EAuBb,OADAoN,IAAQ,IAQZ,OAJK9M,QACDA,KAAO0F,KAAKhF,MAAMoF,UAGf+G,SAAS7M,OAl1BlBuF,aAAAlC,UAq1BF4G,OAAA,WAEIvE,KAAKM,WAAWiE,OAAOvE,KAAKS,MAFvBT,KAKAkC,KAAK,WA11BZrC,aAAAlC,UA+1BF6J,WAAA,SAAWlN,KAAMR,MACbiF,mBAAmBzE,KADA,IAAAmN,OAIiBnN,KAA5BO,SAAA4M,MAAA5M,SAAUE,OAAA0M,MAAA1M,OAAQC,MAAAyM,MAAAzM,KAC1BV,MAAO4E,OAAO5E,KAAMR,MAAQe,kBAAUE,cAAQC,aAL3B,IAQb0J,WAAY1E,KAAKQ,MAAMY,QAAQ9G,KACjCoK,YAAa,IAEb1E,KAAKS,KAAKiE,WAAa1E,KAAKD,QAAQ3E,YAAYd,KAAM0F,KAAKD,SAF3CC,KAKXuE,WA72BX1E,cAAqBpB,SAAA,WAAOiJ,aJqpCjC7O,SAAQ,WInSMgH,cJuST,SAAS/G,OAAQD,SK7qCvB,QAAA6O,gBACA1H,KAAAxB,QAAAwB,KAAAxB,YACAwB,KAAA2H,cAAA3H,KAAA2H,eAAAnI,OAoQA,QAAAoI,YAAAC,KACA,wBAAAA,KAGA,QAAAC,UAAAD,KACA,sBAAAA,KAGA,QAAAE,UAAAF,KACA,sBAAAA,MAAA,OAAAA,IAGA,QAAAG,aAAAH,KACA,gBAAAA,IA/QA/O,OAAAD,QAAA6O,aAGAA,uCAEAA,aAAA/J,UAAAa,QAAAgB,OACAkI,aAAA/J,UAAAgK,cAAAnI,OAIAkI,aAAAO,oBAAA,GAIAP,aAAA/J,UAAAuK,gBAAA,SAAAC,GACA,IAAAL,SAAAK,IAAA,EAAAA,GAAAC,MAAAD,GACA,KAAA/K,WAAA,8BAEA,OADA4C,MAAA2H,cAAAQ,EACAnI,MAGA0H,aAAA/J,UAAAuE,KAAA,SAAAmG,MACA,GAAAC,IAAAC,QAAAC,IAAAC,KAAAzO,EAAA0O,SAMA,IAJA1I,KAAAxB,UACAwB,KAAAxB,YAGA,UAAA6J,QACArI,KAAAxB,QAAA2D,OACA4F,SAAA/H,KAAAxB,QAAA2D,SAAAnC,KAAAxB,QAAA2D,MAAArH,QAAA,CAEA,GADAwN,GAAAlJ,UAAA,GACAkJ,aAAArJ,OACA,KAAAqJ,GAEA,MAAAlL,WAAA,wCAMA,GAFAmL,QAAAvI,KAAAxB,QAAA6J,MAEAL,YAAAO,SACA,QAEA,IAAAX,WAAAW,SACA,OAAAnJ,UAAAtE,QAEA,OACAyN,QAAAtP,KAAA+G,KACA,MACA,QACAuI,QAAAtP,KAAA+G,KAAAZ,UAAA,GACA,MACA,QACAmJ,QAAAtP,KAAA+G,KAAAZ,UAAA,GAAAA,UAAA,GACA,MAEA,SACAqJ,KAAAnJ,MAAA3B,UAAA6H,MAAAvM,KAAAmG,UAAA,GACAmJ,QAAArE,MAAAlE,KAAAyI,UAEG,IAAAV,SAAAQ,SAIH,IAHAE,KAAAnJ,MAAA3B,UAAA6H,MAAAvM,KAAAmG,UAAA,GACAsJ,UAAAH,QAAA/C,QACAgD,IAAAE,UAAA5N,OACAd,EAAA,EAAewO,IAAAxO,EAASA,IACxB0O,UAAA1O,GAAAkK,MAAAlE,KAAAyI,KAGA,WAGAf,aAAA/J,UAAAgL,YAAA,SAAAN,KAAAO,UACA,GAAA1P,EAEA,KAAA0O,WAAAgB,UACA,KAAAxL,WAAA,8BA2CA,OAzCA4C,MAAAxB,UACAwB,KAAAxB,YAIAwB,KAAAxB,QAAAqK,aACA7I,KAAAkC,KAAA,cAAAmG,KACAT,WAAAgB,mBACAA,4BAEA5I,KAAAxB,QAAA6J,MAGAN,SAAA/H,KAAAxB,QAAA6J,OAEArI,KAAAxB,QAAA6J,MAAApO,KAAA2O,UAGA5I,KAAAxB,QAAA6J,OAAArI,KAAAxB,QAAA6J,MAAAO,UANA5I,KAAAxB,QAAA6J,MAAAO,SASAb,SAAA/H,KAAAxB,QAAA6J,SAAArI,KAAAxB,QAAA6J,MAAAS,SAIA5P,EAHA8O,YAAAhI,KAAA2H,eAGAD,aAAAO,oBAFAjI,KAAA2H,cAKAzO,KAAA,GAAA8G,KAAAxB,QAAA6J,MAAAvN,OAAA5B,IACA8G,KAAAxB,QAAA6J,MAAAS,QAAA,EACAlN,QAAAuG,MAAA,mIAGAnC,KAAAxB,QAAA6J,MAAAvN,QACA,kBAAAc,SAAAmN,OAEAnN,QAAAmN,UAKA/I,MAGA0H,aAAA/J,UAAAnC,GAAAkM,aAAA/J,UAAAgL,YAEAjB,aAAA/J,UAAAqL,KAAA,SAAAX,KAAAO,UAMA,QAAAK,KACAjJ,KAAAkJ,eAAAb,KAAAY,GAEAE,QACAA,OAAA,EACAP,SAAA1E,MAAAlE,KAAAZ,YAVA,IAAAwI,WAAAgB,UACA,KAAAxL,WAAA,8BAEA,IAAA+L,QAAA,CAcA,OAHAF,GAAAL,kBACA5I,KAAAxE,GAAA6M,KAAAY,GAEAjJ,MAIA0H,aAAA/J,UAAAuL,eAAA,SAAAb,KAAAO,UACA,GAAA1D,MAAAkE,SAAAtO,OAAAd,CAEA,KAAA4N,WAAAgB,UACA,KAAAxL,WAAA,8BAEA,KAAA4C,KAAAxB,UAAAwB,KAAAxB,QAAA6J,MACA,MAAArI,KAMA,IAJAkF,KAAAlF,KAAAxB,QAAA6J,MACAvN,OAAAoK,KAAApK,OACAsO,SAAA,GAEAlE,OAAA0D,UACAhB,WAAA1C,KAAA0D,WAAA1D,KAAA0D,0BACA5I,MAAAxB,QAAA6J,MACArI,KAAAxB,QAAA0K,gBACAlJ,KAAAkC,KAAA,iBAAAmG,KAAAO,cAEG,IAAAb,SAAA7C,MAAA,CACH,IAAAlL,EAAAc,OAAoBd,KAAA,GACpB,GAAAkL,KAAAlL,KAAA4O,UACA1D,KAAAlL,GAAA4O,UAAA1D,KAAAlL,GAAA4O,oBAAA,CACAQ,SAAApP,CACA,OAIA,KAAAoP,SACA,MAAApJ,KAEA,KAAAkF,KAAApK,QACAoK,KAAApK,OAAA,QACAkF,MAAAxB,QAAA6J,OAEAnD,KAAAvB,OAAAyF,SAAA,GAGApJ,KAAAxB,QAAA0K,gBACAlJ,KAAAkC,KAAA,iBAAAmG,KAAAO,UAGA,MAAA5I,OAGA0H,aAAA/J,UAAA0L,mBAAA,SAAAhB,MACA,GAAA1I,KAAA+I,SAEA,KAAA1I,KAAAxB,QACA,MAAAwB,KAGA,KAAAA,KAAAxB,QAAA0K,eAKA,MAJA,KAAA9J,UAAAtE,OACAkF,KAAAxB,WACAwB,KAAAxB,QAAA6J,aACArI,MAAAxB,QAAA6J,MACArI,IAIA,QAAAZ,UAAAtE,OAAA,CACA,IAAA6E,MAAAK,MAAAxB,QACA,mBAAAmB,KACAK,KAAAqJ,mBAAA1J,IAIA,OAFAK,MAAAqJ,mBAAA,kBACArJ,KAAAxB,WACAwB,KAKA,GAFA0I,UAAA1I,KAAAxB,QAAA6J,MAEAT,WAAAc,WACA1I,KAAAkJ,eAAAb,KAAAK,eACG,IAAAA,UAEH,KAAAA,UAAA5N,QACAkF,KAAAkJ,eAAAb,KAAAK,oBAAA5N,OAAA,GAIA,cAFAkF,MAAAxB,QAAA6J,MAEArI,MAGA0H,aAAA/J,UAAA+K,UAAA,SAAAL,MACA,GAAAiB,IAOA,OAHAA,KAHAtJ,KAAAxB,SAAAwB,KAAAxB,QAAA6J,MAEAT,WAAA5H,KAAAxB,QAAA6J,QACArI,KAAAxB,QAAA6J,OAEArI,KAAAxB,QAAA6J,MAAA7C,YAIAkC,aAAA/J,UAAA4L,cAAA,SAAAlB,MACA,GAAArI,KAAAxB,QAAA,CACA,GAAAgL,YAAAxJ,KAAAxB,QAAA6J,KAEA,IAAAT,WAAA4B,YACA,QACA,IAAAA,WACA,MAAAA,YAAA1O,OAEA,UAGA4M,aAAA6B,cAAA,SAAAE,QAAApB,MACA,MAAAoB,SAAAF,cAAAlB,QL0tCM,SAASvP,OAAQD,QAASH,sBM9+C/B,SAAAgR,KAAAC,YACD7Q,OAAAD,QAAA8Q,cAGC,wBACD,YA+SA,SAAAnO,IAAAoO,IAAAC,QAAAC,KACA,MAAAD,SAAAvN,iBAAAuN,QAAAvN,iBAAAsN,IAAAE,KAAA,GAAAD,QAAAE,YAAA,KAAAH,IAAAE,KAEA,QAAAE,KAAAJ,IAAAC,QAAAC,KACA,MAAAD,SAAA5G,oBAAA4G,QAAA5G,oBAAA2G,IAAAE,KAAA,GAAAD,QAAAI,YAAA,KAAAL,IAAAE,KAEA,QAAAI,SAAAC,KACA,yBAAAvM,OAAAD,UAAAuJ,SAAAjO,KAAAkR,KAEA,QAAAC,UAAAC,KAAAC,MACA,MAAAxN,QAAAyN,iBAAAzN,OAAAyN,iBAAAD,MAAAD,MAAAC,KAAAE,aAAAH,MArTA,GAAAI,IAAA,WACA,OAAAC,GAAA,EACAnQ,GAAAC,SAAA6H,cAAA,KACAsI,IAAApQ,GAAAoQ,QACApQ,GAAAG,UAAA,oBAAAgQ,EAAA,oBACAC,IAAA,KAEA,MAAAD,GAAA,EAAAA,EAAAlQ,SAAAoQ,gBAEAC,OAAAC,UAAAC,SAAAC,cAAA5J,QAAA,SACA6J,WAAA,SAAAnR,MACA,KAAAkG,eAAAiL,aACA,UAAAA,YAAAnR,KACA,IAAAwD,MAAA0C,KAEAkL,UACAC,YAAA,EACAC,aAAA,EACAC,cAAA,GACAC,gBAAA,EACAC,eAAA,EACAC,kBAAA,EACAhJ,IAAA,KACAiJ,YAAA,KACAC,kBAAA,EACA/I,cAAA,qBACAgJ,aAAA,UACAC,aAAA,EACAhJ,aACAiJ,WAAA,EAIAvO,MAAAyC,UAEA,QAAA+L,QADA/L,SAAA,uHACA/F,EAAA,EAA0B8R,OAAA/L,QAAA/F,GAAqBA,IAC/CsD,KAAAyC,QAAA+L,QAAA,mBAAAhS,MAAAgS,SAAA,MAAAhS,KAAAgS,QACAhS,KAAAgS,QACAZ,SAAAY,OAIA,QAAAxB,MADAyB,OAAA,oBACA/R,EAAA,EAAwBsQ,KAAAyB,MAAA/R,GAAiBA,IAIzC,GAHAsD,KAAAgN,KAAA,SAAAxQ,KAAAwQ,KAAA,MACA9P,SAAAwR,eAAAlS,KAAAwQ,KAAA,OACAxQ,KAAAwQ,KAAA,SACAhN,KAAAgN,KAAA,SACA,SAAArL,OAAA,yBAAAqL,KAAA,WAIAhN,MAAA2O,aAAAvK,aAAA,aACApE,KAAA2O,aAAAC,aAAA,aAGA,IAAAzL,MAAAyJ,QAAApQ,KAAA2G,MACA3G,KAAA2G,KACAnD,KAAA6O,cACAC,OAAetS,KAAA,GAAAuS,OAAA,GACfR,WAAAvO,KAAAgP,YAAAzF,SAGAvJ,MAAAiP,mBAAA9L,MAGAnD,KAAAkP,YAAA/L,KAAA2L,OAGA9O,KAAAgP,YAAAzF,UAAAgF,UAGA,IAAAY,eAAA,EACAC,gBAAA,EACAC,oBAAA,EACAC,SAAA,WAEA/B,SACA8B,qBAAArP,KAAA2O,aAAAvQ,MAAAmR,cAAA,QACAF,oBAAA,EACAG,aAAAJ,iBACAA,gBAAAK,WAAA,WACAzP,KAAA2O,aAAAvQ,MAAAmR,cAAA,OACAF,oBAAA,GACW,KAEXF,4BAAAnP,KAAA0P,kBACA1P,KAAAkP,YAAA/L,KAAA2L,OACA9O,KAAAyC,QAAA6C,UAAAG,mBACAzF,KAAAyC,QAAA6C,UAAAG,kBAAAzF,KAAA2P,sBAEAC,gBAAA,EACAC,SAAA,WACAL,aAAAI,iBACAA,gBAAAH,WAAAzP,KAAA8P,QAAA,KAEA5R,IAAA,SAAA8B,KAAAgP,YAAAM,UACApR,GAAA,SAAAsB,OAAAqQ,UAGA7P,KAAA0F,QAAA,SAAAqK,OACArD,IAAA,SAAA1M,KAAAgP,YAAAM,UACA5C,IAAA,SAAAlN,OAAAqQ,UACA7P,KAAAgQ,MAAAD,MAAA/P,KAAAiQ,mBAAA9M,MAAA8G,KAAA,MAEAjK,KAAA8P,QAAA,WACA9P,KAAAkQ,cAAA/M,OAAAnD,KAAAiH,OAAA9D,OAEAnD,KAAAiH,OAAA,SAAAkJ,UACAhN,KAAAyJ,QAAAuD,UACAA,WAEA,IAAA5B,YAAAvO,KAAAgP,YAAAzF,SAEApG,MAAA3F,OAAAwC,KAAAyC,QAAAoL,YAAAU,aACAvO,KAAAgP,YAAAzF,UAAA,EACA4F,aAAA,GAEAnP,KAAAkP,YAAA/L,KAAA2L,OACA9O,KAAAgP,YAAAzF,UAAAgF,YAEAvO,KAAA4F,MAAA,WACA5F,KAAAiH,YAEAjH,KAAAoQ,cAAA,WACA,MAAAjN,MAAA3F,QAEAwC,KAAA2P,kBAAA,WACA,MAAAjN,MAAAD,QAAA8L,YAAApL,KAAA3F,OAAAkF,KAAAD,QAAAoL,aAAA,OAGA,IAAAwC,KAAA,SAAAC,MAAAC,WACA,GAAAJ,UAAAvD,QAAA2D,WACAA,YAEAJ,UAAA3S,SACA2F,KAAA,UAAAmN,MACAnN,KAAA0D,OAAAsJ,UACAA,SAAAtJ,OAAA1D,MACAnD,KAAAkP,YAAA/L,KAAA2L,QAEA9O,MAAAwQ,OAAA,SAAArN,MACAkN,IAAA,SAAAlN,OAEAnD,KAAAyQ,QAAA,SAAAtN,MACAkN,IAAA,UAAAlN,OAwKA,OApKAwK,YAAAtN,WACAG,YAAAmN,WAEAkB,YAAA,WAEA,IADA,GAAA1L,SAAAuN,WAAAhO,KAAA5D,cAAA4D,KAAAiM,cACA+B,WAAAlT,QACA2F,KAAAxG,KAAA+T,WAAAC,QAAAC,UAEA,OAAAzN,OAGA8L,mBAAA,SAAA9L,MACA,GAAA0N,MAAAnO,KAAAD,OACAoO,MAAA1C,YAAAzL,KAAAiM,aAAAmC,QAAApD,cACAvK,KAAA3F,SACA2P,IAAA,GAAAA,KAAA0D,KAAA3L,MAAA2L,KAAA3L,IAAA/B,KAAA,GAAAmB,MAAA,mBAAAoJ,eACAhL,KAAAiM,aAAApR,SAAAC,QAAA,GAAAkF,KAAAsN,KAAA7M,KAAA,GAAAA,KAAA,GAAAA,KAAA,IACA0N,KAAA3L,MAAA2L,KAAA3L,IAAAxC,KAAAiM,aAAApR,SAAA,GAAAuT,QAAApD,eACAhL,KAAAwN,cAAA/M,QAEA+M,cAAA,SAAA/M,MACA,GAAA0N,MAAAnO,KAAAD,QACAsO,iBAAAF,KAAAhD,WAEA,IADAgD,KAAA5C,eAAA,EACA9K,KAAA3F,OAAA,CACA,GAAA0F,OAAAR,KAAAiM,aAAApR,QAQA,OAPAsT,MAAAhD,YAAA3K,MAAA8N,KAAAC,MAAA/N,MAAA1F,OAAA,IAAA8L,aAEA,MAAAuH,KAAA3L,KAAA,YAAA4H,SAAA,iBAAApK,KAAAiM,gBACAkC,KAAAhD,aAAAqD,SAAApE,SAAA,gBAAApK,KAAAiM,gBAAA,GACAkC,KAAA/C,aAAA+C,KAAAhD,YAAAgD,KAAA9C,cACA8C,KAAA7C,gBAAA6C,KAAA3C,kBAAA2C,KAAA9C,cACA8C,KAAA5C,eAAA4C,KAAA3C,kBAAA2C,KAAA/C,aACAiD,kBAAAF,KAAAhD,cAGA6B,cAAA,WAEA,MADAhN,MAAAD,QAAA8L,WAAA7L,KAAAsM,YAAAzF,UACAyH,KAAAC,MAAAvO,KAAAD,QAAA8L,YAAA7L,KAAAD,QAAAwL,eAAAvL,KAAAD,QAAAqL,gBAAA,GAGAmC,iBAAA,WACA,GAAAY,MAAAnO,KAAAD,OACA,KAAAoO,KAAA3L,MAAA2L,KAAAzC,iBAAA,QACA,IACA+C,IADAC,UAAAlU,SAAA6H,cAAA8L,KAAA3L,KACAmM,gBAAAnU,SAAAoU,eAAAT,KAAAxC,aAOA,OANA+C,WAAAvN,UAAAgN,KAAAxL,cACA,MAAAwL,KAAA3L,MACAiM,GAAAjU,SAAA6H,cAAA,MACAoM,GAAAlM,YAAAoM,kBAEAD,UAAAnM,YAAAkM,IAAAE,kBACAD,UAAAR;EAGAW,SAAA,SAAApO,KAAAqO,aACA,GAAAX,MAAAnO,KAAAD,QACAgP,SAAAtO,KAAA3F,MACA,IAAAiU,SAAAZ,KAAA9C,cACA,OACA2D,WAAA,EACAC,cAAA,EACAC,WAAA,EACAzO,KAAAsO,SAAAtO,KAAAT,KAAAuN,mBAGAY,MAAA5C,gBACAvL,KAAAuM,mBAAA9L,KAEA,IAAA0O,aAAAb,KAAAc,KAAAjB,KAAA7C,gBAAA6C,KAAA9C,eAAAyD,YAAA,GACAO,UAAAF,YAAAhB,KAAA7C,gBACA0D,WAAAV,KAAAc,IAAAD,YAAAhB,KAAAhD,YAAA,GACA8D,cAAAX,KAAAc,KAAAL,SAAAM,WAAAlB,KAAAhD,YAAA,GACAmE,qBACAJ,WAAAC,WACA,GAAAH,YACAE,YAEA,QAAAlV,GAAAmV,YAA+BE,UAAArV,EAAeA,IAC9CyG,KAAAzG,IAAAsV,kBAAArV,KAAAwG,KAAAzG,GAEA,QACAgV,sBACAC,4BACAC,sBACAzO,KAAA6O,oBAGAC,eAAA,SAAAC,WAAAC,QACA,GAAAjN,KAAAhI,SAAA6H,cAAArC,KAAAD,QAAAyC,KACAkN,kBAAA,aAGA,OAFAlN,KAAArB,WAAAuO,kBAAA,YAAAA,kBAAAF,YAAAjI,KAAA,KACAkI,SAAAjN,IAAA9G,MAAA+T,cAAA,MACAjN,IAAA0L,WAGA1B,YAAA,SAAA/L,KAAA2L,OACA,GAAAtS,MAAAkG,KAAA6O,SAAApO,KAAAT,KAAAgN,iBACAsC,kBAAAxV,KAAA2G,KAAA8G,KAAA,IACAoI,6BAAA3P,KAAA4P,aAAA,OAAAN,kBAAAlD,OACAyD,2BAAA7P,KAAA4P,aAAA,SAAA9V,KAAAmV,cAAA7C,OACAxJ,UAAA5C,KAAAD,QAAA6C,UACAkN,SAEAH,+BACA7V,KAAAkV,aACAhP,KAAAD,QAAA6L,aAAAkE,OAAA7V,KAAA+F,KAAAuP,eAAA,gBACAO,OAAA7V,KAAA+F,KAAAuP,eAAA,YAAAzV,KAAAkV,cAEAc,OAAA7V,KAAAqV,mBACAxV,KAAAmV,eAAAa,OAAA7V,KAAA+F,KAAAuP,eAAA,eAAAzV,KAAAmV,gBACArM,UAAAC,mBAAAD,UAAAC,oBACA7C,KAAAsN,KAAAwC,OAAAvI,KAAA,KACA,MAAAvH,KAAAD,QAAA0L,aAAAzL,KAAAiM,aAAAC,aAAA,QAAApS,KAAAoV,YACAtM,UAAAE,gBAAAF,UAAAE,kBACO+M,6BACP7P,KAAAiM,aAAA8D,UAAArU,MAAA+T,OAAA3V,KAAAmV,cAAA,OAIA3B,KAAA,SAAAxT,MACA,GAAAmS,cAAAjM,KAAAiM,YACA,IAAAxB,IAAA,GAAAA,IAAA,MAAAzK,KAAAD,QAAAyC,IAAA,CACA,GAAAwN,MAAAC,IAAAzV,SAAA6H,cAAA,MAEA,KADA4N,IAAAvV,UAAA,iBAAAZ,KAAA,mBACAkW,KAAA/D,aAAA8D,WACA9D,aAAA7I,YAAA4M,KAGA,KADA,GAAAhC,YAAAhO,KAAA5D,cAAA6T,IAAA9M,uBACA6K,WAAAlT,QACAmR,aAAA1J,YAAAyL,WAAAC,aAGAhC,cAAAvR,UAAAZ,MAGAsC,cAAA,SAAAoG,KAEA,OADA0N,aAAA1N,IAAA3H,SAAA2F,SACAxG,EAAA,EAAAmW,GAAAD,YAAApV,OAAgDqV,GAAAnW,EAAQA,IACxDwG,MAAAvG,KAAAiW,YAAAlW,GAEA,OAAAwG,QAEAoP,aAAA,SAAAvH,KAAAtK,MAAAqO,OACA,GAAAgE,SAAArS,OAAAqO,MAAA/D,KAEA,OADA+D,OAAA/D,MAAAtK,MACAqS,UAkBAnF,cNy/CM,SAASnS,OAAQD,QAASH,qBO9zDhC,YAaA,SAAAW,wBAAAC,KAAsC,MAAAA,UAAAC,WAAAD,KAAuCE,UAAAF,KAX7ET,QAAAU,YAAA,EACAV,QAAAmG,KAAAnG,QAAAiL,QAAAtE,MAEA,IAAA6Q,UAAA3X,oBAAA,GAEA4X,UAAAjX,uBAAAgX,UAEA5I,MAAA/O,oBAAA,GAEA6X,OAAAlX,uBAAAoO,MAKA5O,SAAAiL,QAAAwM,UAAA,WACAzX,QAAAmG,KAAAuR,OAAA,YPo0DM,SAASzX,OAAQD,QAASH,qBQr1DhC,YAYA,SAAAW,wBAAAC,KAAsC,MAAAA,UAAAC,WAAAD,KAAuCE,UAAAF,KAV7ET,QAAAU,YAAA,CAEA,IAAAiX,SAAA9X,oBAAA,GAEA+X,SAAApX,uBAAAmX,SAEA/I,MAAA/O,oBAAA,GAEA6X,OAAAlX,uBAAAoO,OASA3D,QAAA,QAAAA,WACA,GAAAtD,OAAApB,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,MAAAA,UAAA,GACAW,QAAAX,UAAAtE,QAAA,GAAA0E,SAAAJ,UAAA,MAA0EA,UAAA,EAE1EoB,UAAA2D,OAAA3D,MAEA,IAAAsD,YACA4M,SACAC,MACAZ,aAGAhQ,SAAA+F,eAAA/F,QAAA+F,aACA/F,QAAAI,UAAAJ,QAAAI,cACAJ,QAAA6Q,eAAA7Q,QAAA6Q,YAIA,IAAAC,WAAArQ,MAAA1F,OAAA,EAAA0F,MAAA,QACAgD,WAAAqN,oBAAA9V,OAAA,MACAyI,iCAAA+M,QAAA,aACA/M,WAAA,GAAA+M,QAAA,WAAA/M,YAEA,IAAApD,UAAAoD,YAAA,GAAA+M,QAAA,YACA3V,MAAA,GACAG,OAAA,KACAF,SAAA2F,MACAxF,OACA8V,MAAA,GACAhM,MAAA,EACAiM,KAAA,GACAC,WAAA,GACAnN,MAAA,IAIA,IAAAzD,WAAAoD,WAKA,IAJA,GAAAyN,UAAA7Q,SAAApF,MAAA6I,OAAA,EAGAzK,EAAAgH,SACAhH,GAAA,CACA,GAAA8X,UAAA9X,EAAA4B,MACA+V,KAAAG,SAAAH,KACAI,eAAAD,SAAArN,MACAA,MAAArE,SAAA2R,eAAA,EAAAA,cAUA,IANA/X,EAAAgY,eAAAL,OACAJ,KAAAZ,UAAAgB,OAAA,GAIA3X,EAAA4B,MAAA6I,YAAAoN,SACA7X,EAAA4B,MAAA6I,MAAA,GACA,GAAA9D,QAAA6Q,aACA,SAAA3R,OAAA,0CAAA/E,KAAAS,UAAAvB,EAAAL,IAAA,WAAAmB,KAAAS,UAAAvB,EAAA4B,OAEAY,kBAAAC,IAAA,+FAAA3B,KAAAS,UAAAvB,EAAAL,IAAAmB,KAAAS,UAAAvB,EAAAwB,OAAAxB,EAAA2B,OAAA3B,EAAAyB,SAAAX,KAAAS,UAAAvB,EAAA4B,QAIA5B,IAAA2B,OAOA,IAHA2V,MAAAzW,MAAAmG,kBAAApF,MAAA8V,MAAA,IAGAJ,MAAA5V,OAAA,GAsGA,IArGA,GAAAuW,YAAAX,MAAAY,MAEAC,QAAAF,WAAA,GACAP,MAAAO,WAAA,GACA3R,MAAA2R,WAAA,GAEAhK,MAAA,WACA,GAAA/M,MAAAiX,QAAA1W,SAAA6E,MACApF,gBAAAiW,QAAA,aACAjW,KAAA,GAAAiW,QAAA,WAAAjW,OAEAA,KAAAS,OAAAwW,QACAjX,KAAAO,SAAAP,KAAAO,aAGAP,KAAAS,OAAAF,SAAA6E,OAAApF,IAEA,IAAAyW,MAAAQ,QAAAvW,MAAA+V,KAAA,IAAArR,MACAoF,KAAAxK,KAAA0K,eAAA,WACA,GAAAc,cAAA/F,QAAA+F,aACA3F,UAAAJ,QAAAI,SAEA,OAAA2F,eACA,EAGA3F,UAAAiB,QAAA9G,OAAA,GACA,EAGA6F,UAAAiB,QAAA9G,KAAAvB,KAAA,KAKAiY,WAAA,SAAAQ,QAEA,IADA,GAAAC,MAAA,GACAD,OAAA1W,OAAA,GACA0W,cAAApX,QAAA,aAEAqX,MADAD,QAAAb,KAAAZ,UAAAyB,QACA,IAAAC,KAEA,IAAAA,IAGA,OAAAA,OACaV,KAEbzW,MAAA8W,gBACAT,KAAAZ,UAAAgB,OAAA,GAIAzW,KAAAU,OAAA,EAAAyV,SAAA,eAAoDnW,KAAAU,OACpD8V,YAAA,EACAhM,UACAiM,UACAC,sBACAnN,MAAA,GAQA,KADA,GAJA6N,gBAAA,EAIAC,GAAArX,KACA,OAAAqX,GAAA5W,QAAA,CACA,GAAA4W,GAAA5W,OAAAC,MAAA8J,QAAA,GACA4M,eAAA,CACA,OAEAC,MAAA5W,OAIA,GAAA2W,cAAA,CAEA5N,QAAA7J,KAAAK,KAIA,KADA,GAAAsX,KAAAtX,KACA,OAAAsX,IAAA7W,QACA6W,IAAA7W,OAAAC,MAAA6I,QACA+N,QAAA7W,SAIA2E,MAEApF,KAAA0K,gBAIA0L,MAAAzW,MAAAsX,QAAAT,MAAApR,QAEAA,MAAA,EACAoR,OAAA,EACAS,QAAAjX,OAIAoF,MAAA6R,QAAA1W,SAAAC,QACAuM,OAIA,OAAAvD,SAGAjL,SAAA,WAAAiL,SR21DM,SAAShL,OAAQD,SSliEvB,YAEAA,SAAAU,YAAA,CACA,IAAA2F,QAAA,SAAAvC,QACA,OAAAwC,MAAAC,UAAAtE,OAAAuE,QAAAC,MAAAH,KAAA,EAAAA,KAAA,KAAAI,KAAA,EAAyFJ,KAAAI,KAAaA,OACtGF,QAAAE,KAAA,GAAAH,UAAAG,KAGA,IAAAC,SAAA7C,QAAA,OAAAA,OACA,SAAAS,WAAA,6CAIA,QADAqC,QAAA7B,OAAAjB,QACA+C,MAAA,EAAuBA,MAAAL,QAAAvE,OAAwB4E,QAAA,CAC/C,GAAA3F,QAAAsF,QAAAK,MACA,IAAAF,SAAAzF,QAAA,OAAAA,OACA,OAAA4F,OAAA5F,QACAA,OAAA6F,eAAAD,OACAF,OAAAE,KAAA5F,OAAA4F,MAKA,MAAAF,QAGA5G,SAAA,WAAAqG,QTwiEM,SAASpG,OAAQD,QAASH,qBUlkEhC,YAQA,SAAAW,wBAAAC,KAAsC,MAAAA,UAAAC,WAAAD,KAAuCE,UAAAF,KAE7E,QAAA2D,iBAAAC,SAAAC,aAAiD,KAAAD,mBAAAC,cAA0C,SAAAC,WAAA,qCAR3FvE,QAAAU,YAAA,CAEA,IAAAiX,SAAA9X,oBAAA,GAEA+X,SAAApX,uBAAAmX,SAMAxR,KAAA,WACA,QAAAA,MAAA1E,MACA2C,gBAAA+C,KAAAhB,MAEAgB,KAAAjH,GAAA,KACAiH,KAAApF,MAAA,GACAoF,KAAAjF,OAAA,KACAiF,KAAAnF,YACAmF,KAAAhF,UAEA,EAAAyV,SAAA,YAAAzQ,KAAA1F,MAEA0F,KAAAnF,SAAAmF,KAAAnF,aA8FA,MAvFAmE,MAAArB,UAAAoG,WAAA,SAAArE,OACA,GAAApF,MAAA,IAIA,OAHA0F,MAAAnF,SAAAC,OAAA,GAAA4E,OAAA,GAAAA,MAAAM,KAAAnF,SAAAC,SACAR,KAAA0F,KAAAnF,SAAA6E,QAEApF,MAMA0E,KAAArB,UAAAkU,YAAA,WACA,MAAA7R,MAAAnF,UAMAmE,KAAArB,UAAAwH,cAAA,WACA,GAAA7K,MAAA,IAIA,OAHA0F,MAAAnF,SAAAC,OAAA,IACAR,KAAA0F,KAAAnF,SAAA,IAEAP,MAMA0E,KAAArB,UAAAmU,aAAA,WACA,GAAAxX,MAAA,IAIA,OAHA0F,MAAAnF,SAAAC,OAAA,IACAR,KAAA0F,KAAAnF,SAAAmF,KAAAnF,SAAAC,OAAA,IAEAR,MAMA0E,KAAArB,UAAAyH,eAAA,WACA,GAAA9K,MAAA,IACA,IAAA0F,KAAAjF,OAAA,CACA,GAAA2E,OAAAM,KAAAjF,OAAAF,SAAAuG,QAAApB,KACAN,QAAA,GAAAA,MAAAM,KAAAjF,OAAAF,SAAAC,OAAA,IACAR,KAAA0F,KAAAjF,OAAAF,SAAA6E,MAAA,IAGA,MAAApF,OAMA0E,KAAArB,UAAA0H,UAAA,WACA,MAAArF,MAAAjF,QAMAiE,KAAArB,UAAA6I,mBAAA,WACA,GAAAlM,MAAA,IACA,IAAA0F,KAAAjF,OAAA,CACA,GAAA2E,OAAAM,KAAAjF,OAAAF,SAAAuG,QAAApB,KACAN,OAAA,GAAAA,MAAAM,KAAAjF,OAAAF,SAAAC,SACAR,KAAA0F,KAAAjF,OAAAF,SAAA6E,MAAA,IAGA,MAAApF,OAMA0E,KAAArB,UAAAqH,YAAA,WACA,MAAAhF,MAAAnF,SAAAC,OAAA,GAMAkE,KAAArB,UAAAyT,YAAA,WACA,GAAAW,gBAAA/R,KAAAoF,gBACA,QAAA2M,gBAGA/S,OAGAnG,SAAA,WAAAmG,MVwkEM,SAASlG,OAAQD,SAEtB,YAIA,SAASoE,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAFhHvE,QAAQU,YAAa,CAIrB,IWzsEKyY,aAAA,WX0sED,QAASA,eACL/U,gBAAgB+C,KAAMgS,aAEtBhS,KW5sELlG,QXsuEC,MWvuECkY,aAAArU,UAGFuF,MAAA,WACIlD,KAAKlG,SAJPkY,YAAArU,UAMF2H,IAAA,SAAI3F,KACA,MAAOK,MAAKlG,KAAK6F,MAPnBqS,YAAArU,UASFsU,IAAA,SAAItS,KACA,MAA0BH,UAAnBQ,KAAKlG,KAAK6F,MAVnBqS,YAAArU,UAYF2G,IAAA,SAAI3E,IAAK5B,OAEL,MADAiC,MAAKlG,KAAK6F,KAAO5B,MACVA,OAdTiU,YAAArU,UAgBF0I,MAAA,SAAM1G,KACqBH,SAAnBQ,KAAKlG,KAAK6F,YACHK,MAAKlG,KAAK6F,MAlBvBqS,cX0uELnZ,SAAQ,WWntEMmZ,aXutET,SAASlZ,OAAQD,QAASH,qBAE/B,YAEAG,SAAQU,YAAa,EACrBV,QAAQqH,mBAAqBV,MYnvE9B,IAAA3F,SAAAnB,oBAAA,IAEMwH,mBAAqB,SAAC5F,KAAM4X,aZsvE7B,GYrvEOnZ,IAA+BuB,KAA/BvB,GAAI6B,MAA2BN,KAA3BM,MAAOC,SAAoBP,KAApBO,SAAUG,MAAUV,KAAVU,MACrB8V,MAA+C9V,MAA/C8V,MAAOhM,KAAwC9J,MAAxC8J,KAAMiM,KAAkC/V,MAAlC+V,KAAMlN,MAA4B7I,MAA5B6I,MZ4vEtBsO,gBY5vEkDnX,MAArB+L,kBAAAvH,SAAA2S,iBAAW,EAAAA,gBACvCC,eAAiBxU,OAAO0J,KAAKzM,UAAUC,OACvCuX,KAAO/X,KAAK0K,cAEdsN,eAAiB,EACjBD,OAAQvN,OACRwN,eAAiB,KAEjBD,OAASvN,OACTwN,eAAiB,IAErB,IAAMC,UAAU,EAAA1Y,QAAA2Y,WAAU,IAAKF,gBAC3BG,QAAS,WACL,MAAIJ,OAAQvN,MACD,EAAAjL,QAAAyI,YAAW,gBAElB+P,OAASvN,MACF,EAAAjL,QAAAyI,YAAW,eAAgB,eAE/B,QAGToQ,OAAQ,EAAA7Y,QAAA2Y,WAAU,QAAQ,EAAA3Y,QAAAoC,WAAUrB,QACtC6X,SAAS,EAAA5Y,QAAAyI,YAAW,gBAElBqQ,UAAW,EAAA9Y,QAAA2Y,WAAU,MAAOD,QAAUG,OACxCD,QAAS,YACT/W,MAAS,gBAA0B,GAARoV,MAAa,MAG5C,QAAO,EAAAjX,QAAA2Y,WAAU,MAAOG,UACpBC,UAAW7Z,GACX8Z,gBAAiBR,MAAQvN,KACzBgO,aAAchC,MACdiC,YAAahC,KACbiC,gBAAiBjM,SACjBkM,gBAAiBb,eACjBc,aAAcrP,MACd4O,SAAS,EAAA5Y,QAAAyI,YACL,aACE6Q,gBAAiBpM,WAEvB5L,WAAa,IZ+vEpBtC,SY1vEGqH,uCZ8vEE,SAASpH,OAAQD,SAEtB,YAEAA,SAAQU,YAAa,CAErB,IAAI8E,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUjF,KAAO,aAAcA,MAAS,SAAUA,KAAO,MAAOA,MAAyB,kBAAXgF,SAAyBhF,IAAIwE,cAAgBQ,OAAS,eAAkBhF,MavzErOiD,eAAiB,SAACT,GACY,mBAArBA,GAAES,eACTT,EAAES,iBAEFT,EAAEsX,aAAc,GAIlB5W,gBAAkB,SAACV,GACY,mBAAtBA,GAAEU,gBACTV,EAAEU,kBAEFV,EAAEuX,cAAe,GAKnBC,cAAgB,SAAC/Y,GAAIgZ,WACvB,GAAM3J,KAAMpP,SAASgZ,YAAY,QACjC5J,KAAI6J,UAAUF,WAAW,GAAM,GAFMhZ,GAGlC+Y,cAAc1J,MAIftN,iBAAmB,SAACK,OAAQ0L,KAAMO,UAChCjM,OAAOL,iBACPK,OAAOL,iBAAiB+L,KAAMO,UAAU,GACjCjM,OAAOoN,aAEdpN,OAAOoN,YAAY,KAAO1B,KAAMO,WAKlC3F,oBAAsB,SAACtG,OAAQ0L,KAAMO,UACnCjM,OAAOsG,oBACPtG,OAAOsG,oBAAoBoF,KAAMO,UAAU,GACpCjM,OAAOsN,aAEdtN,OAAOsN,YAAY,KAAO5B,KAAMO,WAIlC8K,SAAW,SAACnZ,GAAI4G,WAClB,IAAK5G,GACD,OAAO,CAEX,IAAMoZ,SAAUpZ,GAAG4G,UAAUyS,MAAM,IACnC,OAAQD,SAAQvS,QAAQD,YAAc,GAGpCU,SAAW,SAACtH,GAAI4G,WAClB,IAAK5G,GACD,MAAO,EAEX,KAAKmZ,SAASnZ,GAAI4G,WAAY,CAC1B,GAAIwS,SAAUpZ,GAAG4G,UAAUyS,MAAM,IACjCrZ,IAAG4G,UAAYwS,QAAQxP,OAAOhD,WAAWoG,KAAK,KAElD,MAAOhN,IAAG4G,WAGRM,YAAc,SAAClH,GAAI4G,WACrB,IAAK5G,GACD,MAAO,EAEX,IAAImZ,SAASnZ,GAAI4G,WAAY,CACzB,GAAIwS,SAAUpZ,GAAG4G,UAAUyS,MAAM,IACjCrZ,IAAG4G,UAAYwS,QAAQ5O,OAAO,SAAA5L,Gb8zEzB,Ma9zE+BA,KAAMgI,YAAYoG,KAAK,KAE/D,MAAOhN,IAAG4G,WAGR0S,YAAc,SAACtZ,GAAI4G,WAChB5G,KAGDmZ,SAASnZ,GAAI4G,WACbM,YAAYlH,GAAI4G,WAEhBU,SAAStH,GAAI4G,aAIfmB,WAAa,QAAAA,cbg0Ed,IAAK,GAAInD,MAAOC,UAAUtE,Oah0ER2N,KAAAnJ,MAAAH,MAAAI,KAAA,EAAAJ,KAAAI,Ybi0EdkJ,KAAKlJ,MAAQH,UAAUG,Kah0E5B,IAAI+C,cAeJ,OAdAmG,MAAKpE,QAAQ,SAACwD,KACNvI,MAAM4K,QAAQrC,KACdvF,WAAaA,WAAW6B,OAAO0D,KACT,YAAR,mBAAAA,KAAA,YAAAxJ,QAAAwJ,MACdjK,OAAO0J,KAAKO,KAAKxD,QAAQ,SAAClD,WACtB,GAAM2S,IAAKjM,IAAI1G,UACT2S,KACFxR,WAAWrI,KAAKkH,aAIxBmB,WAAWrI,KAAK4N,OAGjBvF,WAAWiF,KAAK,MAGrBtL,UAAY,SAACmL,EAAG2M,YAElB,MADAA,YAAaA,WAAa,QAAU,MAC5B,GAAK3M,GACRhN,QAAQ,KAAM,SACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAMdA,QAAQ,QAAS2Z,YACjB3Z,QAAQ,UAAW2Z,aAwBtBvB,UAAY,QAAZA,WAAahQ,IAAK8K,KAAM0G,OAC1B,OAAQxR,KACR,IAAK,SACD,GAAqB,YAAV,mBAAA8K,MAAA,YAAAjP,QAAAiP,OAAoB,CAC3B,GAAIvN,SAAUuN,QACdA,MAAO,EACP,KAAK,GAAIvP,SAASgC,SACTA,QAAQH,eAAe7B,SAG5BuP,MAAQkF,UAAU,SAAUzS,QAAQhC,QAAU,IAAMA,MAAOA,SAGnE,KAZJ,SAeyB,YAAV,mBAAAuP,MAAA,YAAAjP,QAAAiP,SACP0G,MAAQ1G,KACRA,KAAO9N,QAKf,GAAIyU,GAAI,IAAMzR,GACd,KAAK,GAAI0R,QAAQF,OACRA,MAAMpU,eAAesU,OAGC,mBAAhBF,OAAME,QACbD,GAAK,IAAMC,KAAO,KAAOjY,UAAU+X,MAAME,OAAS,IAK1D,OAFAD,IAAuB,mBAAV3G,MAAyB,IAAMA,KAAO,KAAO9K,IAAM,IAAM,Kbs0EzE3J,Sah0EG0D,8Bbi0EH1D,Qah0EG2D,gCbi0EH3D,Qah0EGya,4Bbi0EHza,Qah0EGyD,kCbi0EHzD,Qah0EGoK,wCbi0EHpK,Qah0EG6a,kBbi0EH7a,Qah0EGgJ,kBbi0EHhJ,Qah0EG4I,wBbi0EH5I,Qah0EGgb,wBbi0EHhb,Qah0EGyJ,sBbi0EHzJ,Qah0EGoD,oBbi0EHpD,Qah0EG2Z,qBbo0EE,SAAS1Z,OAAQD,QAASH,qBAE/B,YAEAG,SAAQU,YAAa,CctgFtB,IAAAM,SAAAnB,oBAAA,IAEM0C,YAAc,SAACd,KAAM4X,adygFtB,GcxgFOnZ,IAAsCuB,KAAtCvB,GAAI6B,MAAkCN,KAAlCM,MAAOC,SAA2BP,KAA3BO,SAAUG,MAAiBV,KAAjBU,MAAOmZ,MAAU7Z,KAAV6Z,MAC9BhZ,UAAY+W,YAAa/W,WAAegZ,MAAMhZ,UAC5C2V,MAA+C9V,MAA/C8V,MAAOhM,KAAwC9J,MAAxC8J,KAAMiM,KAAkC/V,MAAlC+V,KAAMlN,MAA4B7I,MAA5B6I,MdihFtBsO,gBcjhFkDnX,MAArB+L,kBAAAvH,SAAA2S,iBAAW,EAAAA,gBACvCC,eAAiBxU,OAAO0J,KAAKzM,UAAUC,OACvCuX,KAAO/X,KAAK0K,cAEduN,QAAU,EACd,IAAIF,KAAM,CACN,GAAIC,gBAAiB,EACjBxN,QACAwN,gBAAiB,EAAAzY,QAAA2Y,WAAU,IAAK,IAC5BC,SAAS,EAAA5Y,QAAAyI,YAAW,YAAa,gCAGpCwC,OACDwN,gBAAiB,EAAAzY,QAAA2Y,WAAU,IAAK,IAC5BC,SAAS,EAAA5Y,QAAAyI,YAAW,YAAa,+BAGzCiQ,SAAU,EAAA1Y,QAAA2Y,WAAU,IAAKF,gBACrBG,QAAS,WACL,MAAIJ,OAAQvN,MACD,EAAAjL,QAAAyI,YAAW,gBAElB+P,OAASvN,MACF,EAAAjL,QAAAyI,YAAW,eAAgB,eAE/B,QAKnB,GAAM8R,OAAO,EAAAva,QAAA2Y,WAAU,IAAK,IACxBC,SAAS,EAAA5Y,QAAAyI,YACL,mBACA,aACE+R,wBAAyBhC,MAAQvN,OACjCwP,yBAA0BjC,OAASvN,OACnCyP,kBAAmBlC,SAGvBK,OAAQ,EAAA7Y,QAAA2Y,WAAU,QAAQ,EAAA3Y,QAAAoC,WAAUrB,QACtC6X,SAAS,EAAA5Y,QAAAyI,YAAW,gBAElBkS,OAAQ,EAAA3a,QAAA2Y,WAAU,OAAQJ,gBAC5BK,QAAS,UAEPE,UAAW,EAAA9Y,QAAA2Y,WAAU,MAAOD,QAAU6B,KAAO1B,MAAQ8B,OACvD/B,QAAS,YACT/W,MAAS,gBAA0B,GAARoV,MAAa,OAGxC2D,oBACA7B,UAAW7Z,GACX8Z,gBAAiBR,MAAQvN,KACzBgO,aAAchC,MACdiC,YAAahC,KACbiC,gBAAiBjM,SACjBkM,gBAAiBb,eACjBc,aAAcrP,MACd4O,SAAS,EAAA5Y,QAAAyI,YACL,aACE6Q,gBAAiBpM,WAO3B,OAJI5L,aACAsZ,mBAAA,WAAkC,IAG/B,EAAA5a,QAAA2Y,WAAU,MAAOG,SAAU8B,oBd6gFrC5b,SAAQ,Wc1gFMuC,ad8gFT,SAAStC,OAAQD,QAASH,qBetlFhC,GAAAgc,SAAAhc,oBAAA,GACA,iBAAAgc,qBAAA5b,OAAAC,GAAA2b,QAAA,KAEAhc,qBAAA,IAAAgc,WACAA,SAAAC,SAAA7b,OAAAD,QAAA6b,QAAAC,Sf4mFM,SAAS7b,OAAQD,QAASH,qBgBnnFhCG,QAAAC,OAAAD,QAAAH,oBAAA,MAKAG,QAAAoB,MAAAnB,OAAAC,GAAA,g3BAAu4B,MhB4nFj4B,SAASD,OAAQD,SiB5nFvBC,OAAAD,QAAA,WACA,GAAAqM,QA0CA,OAvCAA,MAAAgC,SAAA,WAEA,OADA0N,WACA5a,EAAA,EAAgBA,EAAAgG,KAAAlF,OAAiBd,IAAA,CACjC,GAAA6a,MAAA7U,KAAAhG,EACA6a,MAAA,GACAD,OAAA3a,KAAA,UAAA4a,KAAA,OAAwCA,KAAA,QAExCD,OAAA3a,KAAA4a,KAAA,IAGA,MAAAD,QAAArN,KAAA,KAIArC,KAAAlL,EAAA,SAAAvB,QAAAqc,YACA,gBAAArc,WACAA,UAAA,KAAAA,QAAA,KAEA,QADAsc,2BACA/a,EAAA,EAAgBA,EAAAgG,KAAAlF,OAAiBd,IAAA,CACjC,GAAAjB,IAAAiH,KAAAhG,GAAA,EACA,iBAAAjB,MACAgc,uBAAAhc,KAAA,GAEA,IAAAiB,EAAA,EAAYA,EAAAvB,QAAAqC,OAAoBd,IAAA,CAChC,GAAA6a,MAAApc,QAAAuB,EAKA,iBAAA6a,MAAA,IAAAE,uBAAAF,KAAA,MACAC,aAAAD,KAAA,GACAA,KAAA,GAAAC,WACKA,aACLD,KAAA,OAAAA,KAAA,aAAAC,WAAA,KAEA5P,KAAAjL,KAAA4a,SAIA3P,OjByoFM,SAASpM,OAAQD,QAASH,qBkB5nFhC,QAAAsc,gBAAAC,OAAAlV,SACA,OAAA/F,GAAA,EAAeA,EAAAib,OAAAna,OAAmBd,IAAA,CAClC,GAAA6a,MAAAI,OAAAjb,GACAkb,SAAAC,YAAAN,KAAA9b,GACA,IAAAmc,SAAA,CACAA,SAAAE,MACA,QAAAC,GAAA,EAAiBA,EAAAH,SAAAI,MAAAxa,OAA2Bua,IAC5CH,SAAAI,MAAAD,GAAAR,KAAAS,MAAAD,GAEA,MAAQA,EAAAR,KAAAS,MAAAxa,OAAuBua,IAC/BH,SAAAI,MAAArb,KAAAsb,SAAAV,KAAAS,MAAAD,GAAAtV,cAEG,CAEH,OADAuV,UACAD,EAAA,EAAiBA,EAAAR,KAAAS,MAAAxa,OAAuBua,IACxCC,MAAArb,KAAAsb,SAAAV,KAAAS,MAAAD,GAAAtV,SAEAoV,aAAAN,KAAA9b,KAA2BA,GAAA8b,KAAA9b,GAAAqc,KAAA,EAAAE,eAK3B,QAAAE,cAAAtQ,MAGA,OAFA+P,WACAQ,aACAzb,EAAA,EAAeA,EAAAkL,KAAApK,OAAiBd,IAAA,CAChC,GAAA6a,MAAA3P,KAAAlL,GACAjB,GAAA8b,KAAA,GACAa,IAAAb,KAAA,GACAc,MAAAd,KAAA,GACAe,UAAAf,KAAA,GACAgB,MAAcH,QAAAC,YAAAC,oBACdH,WAAA1c,IAGA0c,UAAA1c,IAAAuc,MAAArb,KAAA4b,MAFAZ,OAAAhb,KAAAwb,UAAA1c,KAAgCA,MAAAuc,OAAAO,QAIhC,MAAAZ,QAGA,QAAAa,oBAAA/V,QAAAgW,cACA,GAAAC,MAAAC,iBACAC,8BAAAC,sDAAArb,OAAA,EACA,YAAAiF,QAAAqW,SACAF,8BAEGA,8BAAAG,YACHL,KAAAM,aAAAP,aAAAG,8BAAAG,aAEAL,KAAAzT,YAAAwT,cAJAC,KAAAM,aAAAP,aAAAC,KAAA7S,YAMAgT,2BAAAlc,KAAA8b,kBACE,eAAAhW,QAAAqW,SAGF,SAAAnX,OAAA,qEAFA+W,MAAAzT,YAAAwT,eAMA,QAAAQ,oBAAAR,cACAA,aAAAvS,WAAAJ,YAAA2S,aACA,IAAAS,KAAAL,2BAAA/U,QAAA2U,aACAS,MAAA,GACAL,2BAAAxS,OAAA6S,IAAA,GAIA,QAAAC,oBAAA1W,SACA,GAAAgW,cAAAvb,SAAA6H,cAAA,QAGA,OAFA0T,cAAA1N,KAAA,WACAyN,mBAAA/V,QAAAgW,cACAA,aAGA,QAAAW,mBAAA3W,SACA,GAAA4W,aAAAnc,SAAA6H,cAAA,OAGA,OAFAsU,aAAAC,IAAA,aACAd,mBAAA/V,QAAA4W,aACAA,YAGA,QAAApB,UAAAjc,IAAAyG,SACA,GAAAgW,cAAAxR,OAAAsS,MAEA,IAAA9W,QAAA+W,UAAA,CACA,GAAAC,YAAAC,kBACAjB,cAAAkB,oCAAAR,mBAAA1W,UACAwE,OAAA2S,oBAAAC,KAAA,KAAApB,aAAAgB,YAAA,GACAF,OAAAK,oBAAAC,KAAA,KAAApB,aAAAgB,YAAA,OACEzd,KAAAsc,WACF,kBAAAwB,MACA,kBAAAA,KAAAC,iBACA,kBAAAD,KAAAE,iBACA,kBAAAC,OACA,kBAAAC,OACAzB,aAAAW,kBAAA3W,SACAwE,OAAAkT,WAAAN,KAAA,KAAApB,cACAc,OAAA,WACAN,mBAAAR,cACAA,aAAA2B,MACAN,IAAAE,gBAAAvB,aAAA2B,SAGA3B,aAAAU,mBAAA1W,SACAwE,OAAAoT,WAAAR,KAAA,KAAApB,cACAc,OAAA,WACAN,mBAAAR,eAMA,OAFAxR,QAAAjL,KAEA,SAAAse,QACA,GAAAA,OAAA,CACA,GAAAA,OAAAlC,MAAApc,IAAAoc,KAAAkC,OAAAjC,QAAArc,IAAAqc,OAAAiC,OAAAhC,YAAAtc,IAAAsc,UACA,MACArR,QAAAjL,IAAAse,YAEAf,WAcA,QAAAK,qBAAAnB,aAAArW,MAAAmX,OAAAvd,KACA,GAAAoc,KAAAmB,OAAA,GAAAvd,IAAAoc,GAEA,IAAAK,aAAA8B,WACA9B,aAAA8B,WAAAC,QAAAC,YAAArY,MAAAgW,SACE,CACF,GAAAsC,SAAAxd,SAAAoU,eAAA8G,KACAtP,WAAA2P,aAAA3P,UACAA,YAAA1G,QAAAqW,aAAA3S,YAAAgD,WAAA1G,QACA0G,WAAAtL,OACAib,aAAAO,aAAA0B,QAAA5R,WAAA1G,QAEAqW,aAAAxT,YAAAyV,UAKA,QAAAL,YAAA5B,aAAAzc,KACA,GAAAoc,KAAApc,IAAAoc,IACAC,MAAArc,IAAAqc,KAMA,IAJAA,OACAI,aAAA7J,aAAA,QAAAyJ,OAGAI,aAAA8B,WACA9B,aAAA8B,WAAAC,QAAApC,QACE,CACF,KAAAK,aAAA5S,YACA4S,aAAA3S,YAAA2S,aAAA5S,WAEA4S,cAAAxT,YAAA/H,SAAAoU,eAAA8G,OAIA,QAAA+B,YAAAd,YAAArd,KACA,GAAAoc,KAAApc,IAAAoc,IACAE,UAAAtc,IAAAsc,SAEAA,aAEAF,KAAA,uDAAuD8B,KAAAS,SAAAC,mBAAAhe,KAAAS,UAAAib,cAAA,MAGvD,IAAAuC,MAAA,GAAAZ,OAAA7B,MAA6BrN,KAAA,aAE7B+P,OAAAzB,YAAAe,IAEAf,aAAAe,KAAAN,IAAAC,gBAAAc,MAEAC,QACAhB,IAAAE,gBAAAc,QAhPA,GAAAjD,gBACAkD,QAAA,SAAAC,IACA,GAAAC,KACA,mBAEA,MADA,mBAAAA,aAAAD,GAAApU,MAAAlE,KAAAZ,YACAmZ,OAGAC,QAAAH,QAAA,WACA,qBAAAI,KAAA3b,OAAAgO,UAAA4N,UAAA1N,iBAEAiL,eAAAoC,QAAA,WACA,MAAA7d,UAAAwb,MAAAxb,SAAAme,qBAAA,aAEA1B,iBAAA,KACAD,iBAAA,EACAb,6BAEArd,QAAAD,QAAA,SAAAqM,KAAAnF,SAEA,mBAAAvF,UAAA,SAAAyE,OAAA,+DAGAc,qBAGA,mBAAAA,SAAA+W,YAAA/W,QAAA+W,UAAA0B,WAGA,mBAAAzY,SAAAqW,WAAArW,QAAAqW,SAAA,SAEA,IAAAnB,QAAAO,aAAAtQ,KAGA,OAFA8P,gBAAAC,OAAAlV,SAEA,SAAA6Y,SAEA,OADAC,cACA7e,EAAA,EAAgBA,EAAAib,OAAAna,OAAmBd,IAAA,CACnC,GAAA6a,MAAAI,OAAAjb,GACAkb,SAAAC,YAAAN,KAAA9b,GACAmc,UAAAE,OACAyD,UAAA5e,KAAAib,UAEA,GAAA0D,QAAA,CACA,GAAAnD,WAAAD,aAAAoD,QACA5D,gBAAAS,UAAA1V,SAEA,OAAA/F,GAAA,EAAgBA,EAAA6e,UAAA/d,OAAsBd,IAAA,CACtC,GAAAkb,UAAA2D,UAAA7e,EACA,QAAAkb,SAAAE,KAAA,CACA,OAAAC,GAAA,EAAkBA,EAAAH,SAAAI,MAAAxa,OAA2Bua,IAC7CH,SAAAI,MAAAD,WACAF,aAAAD,SAAAnc,OAiIA,IAAAgf,aAAA,WACA,GAAAe,aAEA,iBAAApZ,MAAAqZ,aAEA,MADAD,WAAApZ,OAAAqZ,YACAD,UAAA/T,OAAAiU,SAAAzR,KAAA","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _src = __webpack_require__(1);\n\t\n\tvar _src2 = _interopRequireDefault(_src);\n\t\n\tvar _renderer = __webpack_require__(12);\n\t\n\tvar _renderer2 = _interopRequireDefault(_renderer);\n\t\n\t__webpack_require__(13);\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar data = [];\n\tvar source = '{\"id\":\"<root>\",\"label\":\"<root>\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"alpha\",\"label\":\"Alpha\",\"props\":{\"droppable\":true}},{\"id\":\"bravo\",\"label\":\"Bravo\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"charlie\",\"label\":\"Charlie\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"delta\",\"label\":\"Delta\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"echo\",\"label\":\"Echo\",\"props\":{\"droppable\":true}},{\"id\":\"foxtrot\",\"label\":\"Foxtrot\",\"props\":{\"droppable\":true}}]},{\"id\":\"golf\",\"label\":\"Golf\",\"props\":{\"droppable\":true}}]},{\"id\":\"hotel\",\"label\":\"Hotel\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"india\",\"label\":\"India\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"juliet\",\"label\":\"Juliet\",\"props\":{\"droppable\":true}}]}]},{\"id\":\"kilo\",\"label\":\"Kilo\",\"props\":{\"droppable\":true}}]}]}';\n\t\n\tfor (var i = 0; i < 1000; ++i) {\n\t    data.push(JSON.parse(source.replace(/\"(id|label)\":\"([^\"]*)\"/g, '\"$1\": \"$2.' + i + '\"')));\n\t}\n\t\n\tvar updatePreview = function updatePreview(node) {\n\t    var el = document.querySelector('#preview');\n\t    if (node) {\n\t        el.innerHTML = JSON.stringify({\n\t            id: node.id,\n\t            label: node.label,\n\t            children: node.children ? node.children.length : 0,\n\t            parent: node.parent ? node.parent.id : null,\n\t            state: node.state\n\t        }, null, 2).replace(/\\n/g, '<br>').replace(/\\s/g, '&nbsp;');\n\t    } else {\n\t        el.innerHTML = '';\n\t    }\n\t};\n\t\n\tvar tree = new _src2['default']({\n\t    autoOpen: true, // Defaults to false\n\t    droppable: true, // Defaults to false\n\t    el: document.querySelector('#tree'),\n\t    rowRenderer: _renderer2['default'],\n\t    selectable: true, // Defaults to true\n\t    shouldSelectNode: function shouldSelectNode(node) {\n\t        // Defaults to null\n\t        if (!node || node === tree.getSelectedNode()) {\n\t            return false; // Prevent from deselecting the current node\n\t        }\n\t        return true;\n\t    }\n\t});\n\t\n\ttree.on('scrollProgress', function (progress) {\n\t    document.querySelector('#scrolling-progress').style.width = progress + '%';\n\t});\n\ttree.on('update', function () {\n\t    var node = tree.getSelectedNode();\n\t    updatePreview(node);\n\t});\n\ttree.on('openNode', function (node) {\n\t    console.log('openNode', node);\n\t});\n\ttree.on('closeNode', function (node) {\n\t    console.log('closeNode', node);\n\t});\n\ttree.on('dropNode', function (node, e) {\n\t    var source = e.dataTransfer.getData('text');\n\t    console.log('Dragged an element ' + JSON.stringify(source) + ' and dropped to ' + JSON.stringify(node.label));\n\t    document.querySelector('#dropped-result').innerHTML = 'Dropped to <b>' + (0, _helper.quoteattr)(node.label) + '</b>';\n\t});\n\ttree.on('selectNode', function (node) {\n\t    updatePreview(node);\n\t});\n\t\n\ttree.loadData(data);\n\t\n\t// Select the first node\n\ttree.selectNode(tree.getChildNodes()[0]);\n\t\n\t// Draggable Element\n\tvar draggableElement = document.querySelector('#draggable-element');\n\t\n\t// http://stackoverflow.com/questions/5500615/internet-explorer-9-drag-and-drop-dnd\n\t(0, _helper.addEventListener)(draggableElement, 'selectstart', function (e) {\n\t    (0, _helper.preventDefault)(e);\n\t    (0, _helper.stopPropagation)(e);\n\t    draggableElement.dragDrop();\n\t    return false;\n\t});\n\t\n\t(0, _helper.addEventListener)(draggableElement, 'dragstart', function (e) {\n\t    e.dataTransfer.effectAllowed = 'move';\n\t    var target = e.target || e.srcElement;\n\t    e.dataTransfer.setData('text', target.id);\n\t    document.querySelector('#dropped-result').innerHTML = '';\n\t});\n\t\n\t(0, _helper.addEventListener)(draggableElement, 'dragend', function (e) {});\n\t\n\twindow.tree = tree;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _infiniteTree = __webpack_require__(2);\n\t\n\tvar _infiniteTree2 = _interopRequireDefault(_infiniteTree);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tmodule.exports = _infiniteTree2['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _events = __webpack_require__(3);\n\t\n\tvar _events2 = _interopRequireDefault(_events);\n\t\n\tvar _clusterize = __webpack_require__(4);\n\t\n\tvar _clusterize2 = _interopRequireDefault(_clusterize);\n\t\n\tvar _flattree = __webpack_require__(5);\n\t\n\tvar _lookupTable = __webpack_require__(9);\n\t\n\tvar _lookupTable2 = _interopRequireDefault(_lookupTable);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar ensureNodeInstance = function ensureNodeInstance(node) {\n\t    if (!(node instanceof _flattree.Node)) {\n\t        throw new Error('The node must be a Node object.');\n\t    }\n\t    return true;\n\t};\n\t\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    if (target === undefined || target === null) {\n\t        throw new TypeError('Cannot convert undefined or null to object');\n\t    }\n\t\n\t    var output = Object(target);\n\t    for (var index = 0; index < sources.length; index++) {\n\t        var source = sources[index];\n\t        if (source !== undefined && source !== null) {\n\t            for (var key in source) {\n\t                if (source.hasOwnProperty(key)) {\n\t                    output[key] = source[key];\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return output;\n\t};\n\t\n\tvar InfiniteTree = function (_events$EventEmitter) {\n\t    _inherits(InfiniteTree, _events$EventEmitter);\n\t\n\t    // Creates new InfiniteTree object.\n\t\n\t    function InfiniteTree() {\n\t        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _classCallCheck(this, InfiniteTree);\n\t\n\t        // Assign options\n\t\n\t        var _this = _possibleConstructorReturn(this, _events$EventEmitter.call(this));\n\t\n\t        _this.options = {\n\t            autoOpen: false,\n\t            droppable: false,\n\t            el: null,\n\t            rowRenderer: _renderer.defaultRowRenderer,\n\t            selectable: true,\n\t            shouldSelectNode: null\n\t        };\n\t        _this.state = {\n\t            openNodes: [],\n\t            rootNode: null,\n\t            selectedNode: null\n\t        };\n\t        _this.clusterize = null;\n\t        _this.nodeTable = new _lookupTable2['default']();\n\t        _this.nodes = [];\n\t        _this.rows = [];\n\t        _this.scrollElement = null;\n\t        _this.contentElement = null;\n\t        _this.dragoverElement = null;\n\t        _this.contentListener = {\n\t            'click': function click(e) {\n\t                var itemTarget = null;\n\t                var handleToggler = false;\n\t\n\t                (0, _helper.stopPropagation)(e);\n\t\n\t                if (e.target && e.currentTarget) {\n\t                    itemTarget = e.target !== e.currentTarget ? e.target : null;\n\t                } else if (e.srcElement) {\n\t                    // IE8\n\t                    itemTarget = e.srcElement;\n\t                }\n\t\n\t                while (itemTarget && itemTarget.parentElement !== _this.contentElement) {\n\t                    if (itemTarget.className.indexOf('tree-toggler') >= 0) {\n\t                        handleToggler = true;\n\t                    }\n\t                    itemTarget = itemTarget.parentElement;\n\t                }\n\t\n\t                if (!itemTarget) {\n\t                    return;\n\t                }\n\t\n\t                var id = itemTarget.getAttribute('aria-id');\n\t                var node = _this.getNodeById(id);\n\t\n\t                if (!node) {\n\t                    return;\n\t                }\n\t\n\t                // Click on the toggler to open/close a tree node\n\t                if (handleToggler) {\n\t                    _this.toggleNode(node);\n\t                    return;\n\t                }\n\t\n\t                _this.selectNode(node);\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\n\t            // The dragenter event is fired when a dragged element or text selection enters a valid drop target.\n\t            'dragenter': function dragenter(e) {\n\t                var itemTarget = null;\n\t\n\t                if (e.target && e.currentTarget) {\n\t                    itemTarget = e.target !== e.currentTarget ? e.target : null;\n\t                } else if (e.srcElement) {\n\t                    // IE8\n\t                    itemTarget = e.srcElement;\n\t                }\n\t\n\t                while (itemTarget && itemTarget.parentElement !== _this.contentElement) {\n\t                    itemTarget = itemTarget.parentElement;\n\t                }\n\t\n\t                if (!itemTarget) {\n\t                    return;\n\t                }\n\t\n\t                if (_this.dragoverElement !== itemTarget) {\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight'); // remove 'highlight' class\n\t                    _this.dragoverElement = null;\n\t\n\t                    if (!itemTarget.hasAttribute('droppable')) {\n\t                        return;\n\t                    }\n\t\n\t                    var canDrop = !itemTarget.getAttribute('droppable').match(/false/i);\n\t                    if (canDrop) {\n\t                        (0, _helper.addClass)(itemTarget, 'highlight');\n\t                        _this.dragoverElement = itemTarget;\n\t                    }\n\t                }\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n\t            // The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\t            'dragend': function dragend(e) {\n\t                if (_this.dragoverElement) {\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight'); // remove 'highlight' class\n\t                    _this.dragoverElement = null;\n\t                }\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragover\n\t            // The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\n\t            'dragover': function dragover(e) {\n\t                (0, _helper.preventDefault)(e);\n\t                e.dataTransfer.dropEffect = 'move';\n\t                return false;\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/drop\n\t            // The drop event is fired when an element or text selection is dropped on a valid drop target.\n\t            'drop': function drop(e) {\n\t                // prevent default action (open as link for some elements)\n\t                (0, _helper.preventDefault)(e);\n\t\n\t                if (_this.dragoverElement) {\n\t                    var id = _this.dragoverElement.getAttribute('aria-id');\n\t                    var node = _this.getNodeById(id);\n\t\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight');\n\t                    _this.dragoverElement = null;\n\t\n\t                    _this.emit('dropNode', node, e);\n\t                }\n\t            }\n\t        };\n\t        _this.options = extend({}, _this.options, options);\n\t\n\t        if (!_this.options.el) {\n\t            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n\t            return _possibleConstructorReturn(_this);\n\t        }\n\t\n\t        _this.create();\n\t\n\t        // Load tree data if it's provided\n\t        if (options.data) {\n\t            _this.loadData(options.data);\n\t        }\n\t        return _this;\n\t    }\n\t\n\t    InfiniteTree.prototype.create = function create() {\n\t        var _this2 = this;\n\t\n\t        if (!this.options.el) {\n\t            throw new Error('The element option is not specified.');\n\t        }\n\t\n\t        var scrollElement = document.createElement('div');\n\t        scrollElement.className = (0, _helper.classNames)('infinite-tree', 'infinite-tree-scroll');\n\t        var contentElement = document.createElement('div');\n\t        contentElement.className = (0, _helper.classNames)('infinite-tree', 'infinite-tree-content');\n\t\n\t        scrollElement.appendChild(contentElement);\n\t        this.options.el.appendChild(scrollElement);\n\t\n\t        this.clusterize = new _clusterize2['default']({\n\t            tag: 'div',\n\t            rows: [],\n\t            scrollElem: scrollElement,\n\t            contentElem: contentElement,\n\t            no_data_class: 'infinite-tree-no-data',\n\t            callbacks: {\n\t                // Will be called right before replacing previous cluster with new one.\n\t                clusterWillChange: function clusterWillChange() {},\n\t                // Will be called right after replacing previous cluster with new one.\n\t                clusterChanged: function clusterChanged() {},\n\t                // Will be called on scrolling. Returns progress position.\n\t                scrollingProgress: function scrollingProgress(progress) {\n\t                    _this2.emit('scrollProgress', progress);\n\t                }\n\t            }\n\t        });\n\t\n\t        this.scrollElement = scrollElement;\n\t        this.contentElement = contentElement;\n\t\n\t        (0, _helper.addEventListener)(this.contentElement, 'click', this.contentListener.click);\n\t        if (this.options.droppable) {\n\t            (0, _helper.addEventListener)(document, 'dragend', this.contentListener.dragend);\n\t            (0, _helper.addEventListener)(this.contentElement, 'dragenter', this.contentListener.dragenter);\n\t            (0, _helper.addEventListener)(this.contentElement, 'dragover', this.contentListener.dragover);\n\t            (0, _helper.addEventListener)(this.contentElement, 'drop', this.contentListener.drop);\n\t        }\n\t    };\n\t\n\t    InfiniteTree.prototype.destroy = function destroy() {\n\t        (0, _helper.removeEventListener)(this.contentElement, 'click', this.contentListener);\n\t        if (this.options.droppable) {\n\t            (0, _helper.removeEventListener)(document, 'dragend', this.contentListener.dragend);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'dragenter', this.contentListener.dragenter);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'dragover', this.contentListener.dragover);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'drop', this.contentListener.drop);\n\t        }\n\t\n\t        this.clear();\n\t\n\t        if (this.clusterize) {\n\t            this.clusterize.destroy(true); // True to remove all data from the list\n\t            this.clusterize = null;\n\t        }\n\t\n\t        // Remove all child nodes\n\t        while (this.contentElement.firstChild) {\n\t            this.contentElement.removeChild(this.contentElement.firstChild);\n\t        }\n\t        while (this.scrollElement.firstChild) {\n\t            this.scrollElement.removeChild(this.scrollElement.firstChild);\n\t        }\n\t        if (this.options.el) {\n\t            var containerElement = this.options.el;\n\t            while (containerElement.firstChild) {\n\t                containerElement.removeChild(containerElement.firstChild);\n\t            }\n\t        }\n\t        this.contentElement = null;\n\t        this.scrollElement = null;\n\t    };\n\t    // Inserts a new child node to a parent node at the specified index.\n\t    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n\t    // * If the parent has children, the method adds the child to it at the specified index.\n\t    // * If the parent does not have children, the method adds the child to the parent.\n\t    // * If the index value is greater than or equal to the number of children in the parent, the method adds the child at the end of the children.\n\t    // @param {Object} newNode The new child node.\n\t    // @param {number} index The 0-based index of where to insert the child node. Defaults to 0 for negative index.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.addChildNodeAt = function addChildNodeAt(newNode, index, parentNode) {\n\t        var _this3 = this;\n\t\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        if (!newNode) {\n\t            return false;\n\t        }\n\t        index = Number(index) || 0;\n\t        if (index < 0) {\n\t            index = 0;\n\t        }\n\t\n\t        // Inserts the new child at the specified index\n\t        newNode.parent = parentNode;\n\t        parentNode.children.splice(index, 0, newNode);\n\t\n\t        var deleteCount = parentNode.state.total;\n\t\n\t        // Update index\n\t        index = parentNode.children.indexOf(newNode);\n\t\n\t        var nodes = (0, _flattree.flatten)(parentNode.children, { openNodes: this.state.openNodes });\n\t\n\t        // Update newNode\n\t        newNode = parentNode.getChildAt(index);\n\t\n\t        var rows = nodes.map(function (node) {\n\t            return _this3.options.rowRenderer(node, _this3.options);\n\t        });\n\t        var parentOffset = this.nodes.indexOf(parentNode);\n\t\n\t        // Update nodes & rows\n\t        this.nodes.splice.apply(this.nodes, [parentOffset + 1, deleteCount].concat(nodes));\n\t        this.rows.splice.apply(this.rows, [parentOffset + 1, deleteCount].concat(rows));\n\t\n\t        // Update the lookup table with newly added nodes\n\t        this.flattenNode(newNode).forEach(function (node) {\n\t            if (node.id !== undefined) {\n\t                _this3.nodeTable.set(node.id, node);\n\t            }\n\t        });\n\t\n\t        // Update the row corresponding to the parent node\n\t        this.rows[parentOffset] = this.options.rowRenderer(parentNode, this.options);\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Adds a node to the end of the list of children of a specified parent node.\n\t    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n\t    // * If the parent has children, the method adds the child as the last child.\n\t    // * If the parent does not have children, the method adds the child to the parent.\n\t    // @param {Object} newNode The new child node.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.appendChildNode = function appendChildNode(newNode, parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        var index = parentNode.children.length;\n\t        return this.addChildNodeAt(newNode, index, parentNode);\n\t    };\n\t    // Clears the tree.\n\t\n\t\n\t    InfiniteTree.prototype.clear = function clear() {\n\t        this.clusterize.clear();\n\t        this.nodeTable.clear();\n\t        this.nodes = [];\n\t        this.rows = [];\n\t        this.state.openNodes = [];\n\t        this.state.rootNode = null;\n\t        this.state.selectedNode = null;\n\t    };\n\t    // Closes a node to hide its children.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.closeNode = function closeNode(node) {\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Check if the closeNode action can be performed\n\t        if (this.state.openNodes.indexOf(node) < 0) {\n\t            return false;\n\t        }\n\t\n\t        // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n\t        if (this.state.selectedNode && this.state.selectedNode !== node) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0     => close this node; next selected node (total=2)\n\t            // row #2       node.0.0.0 => selected node (total=0)\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = nodeIndex + 1;\n\t            var rangeTo = nodeIndex + node.state.total;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                this.selectNode(node);\n\t            }\n\t        }\n\t\n\t        node.state.open = false; // Set the open state to false\n\t        var openNodes = this.state.openNodes.filter(function (node) {\n\t            return node.hasChildren() && node.state.open;\n\t        });\n\t        this.state.openNodes = openNodes;\n\t\n\t        var deleteCount = node.state.total;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = node; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        // Update nodes & rows\n\t        this.nodes.splice(nodeIndex + 1, deleteCount);\n\t        this.rows.splice(nodeIndex + 1, deleteCount);\n\t\n\t        // Update the row corresponding to the node\n\t        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t        // Emit the 'closeNode' event\n\t        this.emit('closeNode', node);\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Flattens all child nodes of a parent node by performing full tree traversal using child-parent link.\n\t    // No recursion or stack is involved.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n\t\n\t\n\t    InfiniteTree.prototype.flattenChildNodes = function flattenChildNodes(parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        var list = [];\n\t\n\t        // Ignore parent node\n\t        var node = parentNode.getFirstChild();\n\t        while (node) {\n\t            list.push(node);\n\t            if (node.hasChildren()) {\n\t                node = node.getFirstChild();\n\t            } else {\n\t                // find the parent level\n\t                while (node.getNextSibling() === null && node.parent !== parentNode) {\n\t                    // use child-parent link to get to the parent level\n\t                    node = node.getParent();\n\t                }\n\t\n\t                // Get next sibling\n\t                node = node.getNextSibling();\n\t            }\n\t        }\n\t\n\t        return list;\n\t    };\n\t    // Flattens a node by performing full tree traversal using child-parent link.\n\t    // No recursion or stack is involved.\n\t    // @param {Node} node The Node object.\n\t    // @return {array} Returns a flattened list of Node objects.\n\t\n\t\n\t    InfiniteTree.prototype.flattenNode = function flattenNode(node) {\n\t        return [node].concat(this.flattenChildNodes(node));\n\t    };\n\t    // Gets a list of child nodes.\n\t    // @param {Node} [parentNode] The Node object that defines the parent node. If null or undefined, returns a list of top level nodes.\n\t    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n\t\n\t\n\t    InfiniteTree.prototype.getChildNodes = function getChildNodes(parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        return parentNode.children;\n\t    };\n\t    // Gets a node by its unique id. This assumes that you have given the nodes in the data a unique id.\n\t    // @param {string|number} id An unique node id. A null value will be returned if the id doesn't match.\n\t    // @return {Node} Returns a node the matches the id, null otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.getNodeById = function getNodeById(id) {\n\t        var node = this.nodeTable.get(id);\n\t        if (!node) {\n\t            // Find the first node that matches the id\n\t            node = this.nodes.filter(function (node) {\n\t                return node.id === id;\n\t            })[0];\n\t            if (!node) {\n\t                return null;\n\t            }\n\t            this.nodeTable.set(node.id, node);\n\t        }\n\t        return node;\n\t    };\n\t    // Gets an array of open nodes.\n\t    // @return {array} Returns an array of Node objects containing open nodes.\n\t\n\t\n\t    InfiniteTree.prototype.getOpenNodes = function getOpenNodes() {\n\t        // returns a shallow copy of an array into a new array object.\n\t        return this.state.openNodes.slice();\n\t    };\n\t    // Gets the root node.\n\t    // @return {Node} Returns the root node, or null if empty.\n\t\n\t\n\t    InfiniteTree.prototype.getRootNode = function getRootNode() {\n\t        return this.state.rootNode;\n\t    };\n\t    // Gets the selected node.\n\t    // @return {Node} Returns the selected node, or null if not selected.\n\t\n\t\n\t    InfiniteTree.prototype.getSelectedNode = function getSelectedNode() {\n\t        return this.state.selectedNode;\n\t    };\n\t    // Inserts the specified node after the reference node.\n\t    // @param {Object} newNode The new sibling node.\n\t    // @param {Node} referenceNode The Node object that defines the reference node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.insertNodeAfter = function insertNodeAfter(newNode, referenceNode) {\n\t        ensureNodeInstance(referenceNode);\n\t        var parentNode = referenceNode.getParent();\n\t        var index = parentNode.children.indexOf(referenceNode) + 1;\n\t        return this.addChildNodeAt(newNode, index, parentNode);\n\t    };\n\t    // Inserts the specified node before the reference node.\n\t    // @param {Object} newNode The new sibling node.\n\t    // @param {Node} referenceNode The Node object that defines the reference node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.insertNodeBefore = function insertNodeBefore(newNode, referenceNode) {\n\t        ensureNodeInstance(referenceNode);\n\t        var parentNode = referenceNode.getParent();\n\t        var index = parentNode.children.indexOf(referenceNode);\n\t        return this.addChildNodeAt(newNode, index, parentNode);\n\t    };\n\t    // Loads data in the tree.\n\t    // @param {object|array} data The data is an object or array of objects that defines the node.\n\t\n\t\n\t    InfiniteTree.prototype.loadData = function loadData() {\n\t        var _this4 = this;\n\t\n\t        var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t        this.nodes = (0, _flattree.flatten)(data, { openAllNodes: this.options.autoOpen });\n\t\n\t        // Clear lookup table\n\t        this.nodeTable.clear();\n\t\n\t        this.state.openNodes = this.nodes.filter(function (node) {\n\t            return node.hasChildren() && node.state.open;\n\t        });\n\t        this.state.rootNode = function () {\n\t            var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            // Finding the root node\n\t            while (node && node.parent !== null) {\n\t                node = node.parent;\n\t            }\n\t            return node;\n\t        }(this.nodes[0]);\n\t        this.state.selectedNode = null;\n\t\n\t        // Update the lookup table with newly added nodes\n\t        this.flattenChildNodes(this.state.rootNode).forEach(function (node) {\n\t            if (node.id !== undefined) {\n\t                _this4.nodeTable.set(node.id, node);\n\t            }\n\t        });\n\t\n\t        // Update rows\n\t        this.rows = this.nodes.map(function (node) {\n\t            return _this4.options.rowRenderer(node, _this4.options);\n\t        });\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t    };\n\t    // Opens a node to display its children.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.openNode = function openNode(node) {\n\t        var _this5 = this;\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Check if the openNode action can be performed\n\t        if (this.state.openNodes.indexOf(node) >= 0) {\n\t            return false;\n\t        }\n\t\n\t        node.state.open = true; // Set node.state.open to true\n\t        var openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n\t        this.state.openNodes = openNodes;\n\t\n\t        var nodes = (0, _flattree.flatten)(node.children, { openNodes: this.state.openNodes });\n\t        var rows = nodes.map(function (node) {\n\t            return _this5.options.rowRenderer(node, _this5.options);\n\t        });\n\t\n\t        // Update nodes & rows\n\t        this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n\t        this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n\t\n\t        // Update the row corresponding to the node\n\t        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t        // Add all child nodes to the lookup table if the first child does not exist in the lookup table\n\t        if (nodes.length > 0 && !this.nodeTable.get(nodes[0])) {\n\t            nodes.forEach(function (node) {\n\t                if (node.id !== undefined) {\n\t                    _this5.nodeTable.set(node.id, node);\n\t                }\n\t            });\n\t        }\n\t\n\t        // Emit the 'openNode' event\n\t        this.emit('openNode', node);\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Removes all child nodes from a parent node.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.removeChildNodes = function removeChildNodes(parentNode) {\n\t        var _this6 = this;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        if (parentNode.children.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        var parentNodeIndex = this.nodes.indexOf(parentNode);\n\t\n\t        // Update selected node\n\t        if (parentNodeIndex >= 0 && this.state.selectedNode) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0\n\t            // row #2       node.0.0.0 => current selected node\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = parentNodeIndex + 1;\n\t            var rangeTo = parentNodeIndex + parentNode.state.total;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                this.selectNode(parentNode);\n\t            }\n\t        }\n\t\n\t        // Update parent node\n\t        parentNode.children = [];\n\t        parentNode.state.open = parentNode.state.open && parentNode.children.length > 0;\n\t\n\t        // Get the number of nodes to be removed\n\t        var deleteCount = parentNode.state.total;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = parentNode; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        if (parentNodeIndex >= 0) {\n\t            // Update nodes & rows\n\t            this.nodes.splice(parentNodeIndex + 1, deleteCount);\n\t            this.rows.splice(parentNodeIndex + 1, deleteCount);\n\t\n\t            // Update the row corresponding to the parent node\n\t            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n\t        }\n\t\n\t        {\n\t            (function () {\n\t                // Update open nodes and lookup table\n\t                var childNodes = _this6.flattenChildNodes(parentNode);\n\t\n\t                _this6.state.openNodes = _this6.state.openNodes.filter(function (node) {\n\t                    return childNodes.indexOf(node) < 0;\n\t                });\n\t\n\t                childNodes.forEach(function (node) {\n\t                    _this6.nodeTable.unset(node.id);\n\t                });\n\t            })();\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Removes a node and all of its child nodes.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.removeNode = function removeNode(node) {\n\t        var _this7 = this;\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        var parentNode = node.parent;\n\t        if (!parentNode) {\n\t            return false;\n\t        }\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        var parentNodeIndex = this.nodes.indexOf(parentNode);\n\t\n\t        // Update selected node\n\t        if (nodeIndex >= 0 && this.state.selectedNode) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0     => remove this node (total=2)\n\t            // row #2       node.0.0.0 => current selected node (total=0)\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1     => next selected node (total=0)\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = nodeIndex;\n\t            var rangeTo = nodeIndex + node.state.total + 1;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                // Change the selected node in the following order:\n\t                // 1. next sibling node\n\t                // 2. previous sibling node\n\t                // 3. parent node\n\t                var selectedNode = node.getNextSibling() || node.getPreviousSibling() || node.getParent();\n\t                this.selectNode(selectedNode);\n\t            }\n\t        }\n\t\n\t        // Update parent node\n\t        parentNode.children.splice(parentNode.children.indexOf(node), 1);\n\t        parentNode.state.open = parentNode.state.open && parentNode.children.length > 0;\n\t\n\t        // Get the number of nodes to be removed\n\t        var deleteCount = node.state.total + 1;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = parentNode; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        if (nodeIndex >= 0) {\n\t            // Update nodes & rows\n\t            this.nodes.splice(nodeIndex, deleteCount);\n\t            this.rows.splice(nodeIndex, deleteCount);\n\t        }\n\t\n\t        // Update the row corresponding to the parent node\n\t        if (parentNodeIndex >= 0) {\n\t            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n\t        }\n\t\n\t        {\n\t            (function () {\n\t                // Update open nodes and lookup table\n\t                var nodes = _this7.flattenNode(node);\n\t\n\t                _this7.state.openNodes = _this7.state.openNodes.filter(function (node) {\n\t                    return nodes.indexOf(node) < 0;\n\t                });\n\t\n\t                nodes.forEach(function (node) {\n\t                    _this7.nodeTable.unset(node.id);\n\t                });\n\t            })();\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Sets the current scroll position to this node.\n\t    // @param {Node} node The Node object.\n\t    // @return {number} Returns the vertical scroll position, or -1 on error.\n\t\n\t\n\t    InfiniteTree.prototype.scrollToNode = function scrollToNode(node) {\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            return -1;\n\t        }\n\t        if (!this.contentElement) {\n\t            return -1;\n\t        }\n\t        // Get the offset height of the first child element that contains the \"tree-item\" class\n\t        var firstChild = this.contentElement.querySelectorAll('.tree-item')[0];\n\t        var rowHeight = firstChild && firstChild.offsetHeight || 0;\n\t        return this.scrollTop(nodeIndex * rowHeight);\n\t    };\n\t    // Gets (or sets) the current vertical position of the scroll bar.\n\t    // @param {number} [value] An integer that indicates the new position to set the scroll bar to.\n\t    // @return {number} Returns the vertical scroll position.\n\t\n\t\n\t    InfiniteTree.prototype.scrollTop = function scrollTop(value) {\n\t        if (!this.scrollElement) {\n\t            return 0;\n\t        }\n\t        if (value !== undefined) {\n\t            this.scrollElement.scrollTop = Number(value);\n\t        }\n\t        return this.scrollElement.scrollTop;\n\t    };\n\t    // Selects a node.\n\t    // @param {Node} node The Node object. If null or undefined, deselects the current node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.selectNode = function selectNode() {\n\t        var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t        var _options = this.options;\n\t        var selectable = _options.selectable;\n\t        var shouldSelectNode = _options.shouldSelectNode;\n\t\n\t\n\t        if (!selectable) {\n\t            return false;\n\t        }\n\t        if (typeof shouldSelectNode === 'function' && !shouldSelectNode(node)) {\n\t            return false;\n\t        }\n\t\n\t        if (node === null) {\n\t            // Deselect the current node\n\t            if (this.state.selectedNode) {\n\t                var selectedNode = this.state.selectedNode;\n\t                var selectedIndex = this.nodes.indexOf(selectedNode);\n\t\n\t                selectedNode.state.selected = false;\n\t                this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n\t                this.state.selectedNode = null;\n\t\n\t                // Emit the 'selectNode' event\n\t                this.emit('selectNode', null);\n\t\n\t                // Updates list with new data\n\t                this.update();\n\t\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        }\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Select this node\n\t        if (this.state.selectedNode !== node) {\n\t            node.state.selected = true;\n\t\n\t            // Update the row corresponding to the node\n\t            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t        }\n\t\n\t        // Deselect the current node\n\t        if (this.state.selectedNode) {\n\t            var _selectedNode = this.state.selectedNode;\n\t            var _selectedIndex = this.nodes.indexOf(_selectedNode);\n\t            _selectedNode.state.selected = false;\n\t            this.rows[_selectedIndex] = this.options.rowRenderer(_selectedNode, this.options);\n\t        }\n\t\n\t        if (this.state.selectedNode !== node) {\n\t            this.state.selectedNode = node;\n\t\n\t            // Emit the 'selectNode' event\n\t            this.emit('selectNode', node);\n\t        } else {\n\t            this.state.selectedNode = null;\n\t\n\t            // Emit the 'selectNode' event\n\t            this.emit('selectNode', null);\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Toggles a node to display or hide its children.\n\t    // @param {Node} node The Node object.\n\t\n\t\n\t    InfiniteTree.prototype.toggleNode = function toggleNode(node) {\n\t        if (this.state.openNodes.indexOf(node) >= 0) {\n\t            // close node\n\t            this.closeNode(node);\n\t        } else {\n\t            // open node\n\t            this.openNode(node);\n\t        }\n\t    };\n\t    // Serializes the current state of a node to a JSON string.\n\t    // @param {Node} node The Node object. If null, returns the whole tree.\n\t    // @return {string} Returns a JSON string represented the tree.\n\t\n\t\n\t    InfiniteTree.prototype.toString = function toString() {\n\t        var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t        var traverse = function traverse(node) {\n\t            var s = '[';\n\t            if (node && node.children) {\n\t                var _loop = function _loop(i) {\n\t                    var list = [];\n\t                    s = s + '{';\n\t                    Object.keys(node).forEach(function (key) {\n\t                        var value = node[key];\n\t                        if (key === 'parent') {\n\t                            // ignore parent\n\t                            return;\n\t                        }\n\t                        if (key === 'children') {\n\t                            // traverse child nodes\n\t                            list.push('\"' + key + '\":' + traverse(node.children[i]));\n\t                            return;\n\t                        }\n\t                        if (typeof value === 'string' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n\t                            list.push('\"' + key + '\":' + JSON.stringify(value));\n\t                        } else {\n\t                            // primitive types\n\t                            list.push('\"' + key + '\":' + value);\n\t                        }\n\t                    });\n\t                    s = s + list.join(',');\n\t                    s = s + '}' + (i === node.children.length - 1 ? '' : ',');\n\t                };\n\t\n\t                for (var i = 0; i < node.children.length; ++i) {\n\t                    _loop(i);\n\t                }\n\t            }\n\t            s = s + ']';\n\t            return s;\n\t        };\n\t\n\t        if (!node) {\n\t            node = this.state.rootNode;\n\t        }\n\t\n\t        return traverse(node);\n\t    };\n\t    // Updates the tree.\n\t\n\t\n\t    InfiniteTree.prototype.update = function update() {\n\t        // Update the list with new data\n\t        this.clusterize.update(this.rows);\n\t\n\t        // Emit the 'update' event\n\t        this.emit('update');\n\t    };\n\t    // Updates the data of a node.\n\t    // @param {Node} node The Node object.\n\t    // @param {Object} data The data object.\n\t\n\t\n\t    InfiniteTree.prototype.updateNode = function updateNode(node, data) {\n\t        ensureNodeInstance(node);\n\t\n\t        // The static attributes (i.e. children, parent, and state) are being protected\n\t        var _node = node;\n\t        var children = _node.children;\n\t        var parent = _node.parent;\n\t        var state = _node.state;\n\t\n\t        node = extend(node, data, { children: children, parent: parent, state: state });\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex >= 0) {\n\t            // Update the row corresponding to the node\n\t            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t        }\n\t    };\n\t\n\t    return InfiniteTree;\n\t}(_events2['default'].EventEmitter);\n\t\n\texports['default'] = InfiniteTree;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      }\n\t      throw TypeError('Uncaught, unspecified \"error\" event.');\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n\t* http://NeXTs.github.com/Clusterize.js/\r\n\t* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\t\r\n\t;(function(name, definition) {\r\n\t    if (true) module.exports = definition();\r\n\t    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n\t    else this[name] = definition();\r\n\t}('Clusterize', function() {\r\n\t  \"use strict\"\r\n\t\r\n\t  // detect ie9 and lower\r\n\t  // https://gist.github.com/padolsey/527683#comment-786682\r\n\t  var ie = (function(){\r\n\t    for( var v = 3,\r\n\t             el = document.createElement('b'),\r\n\t             all = el.all || [];\r\n\t         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n\t         all[0];\r\n\t       ){}\r\n\t    return v > 4 ? v : document.documentMode;\r\n\t  }()),\r\n\t  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n\t  var Clusterize = function(data) {\r\n\t    if( ! (this instanceof Clusterize))\r\n\t      return new Clusterize(data);\r\n\t    var self = this;\r\n\t\r\n\t    var defaults = {\r\n\t      item_height: 0,\r\n\t      block_height: 0,\r\n\t      rows_in_block: 50,\r\n\t      rows_in_cluster: 0,\r\n\t      cluster_height: 0,\r\n\t      blocks_in_cluster: 4,\r\n\t      tag: null,\r\n\t      content_tag: null,\r\n\t      show_no_data_row: true,\r\n\t      no_data_class: 'clusterize-no-data',\r\n\t      no_data_text: 'No data',\r\n\t      keep_parity: true,\r\n\t      callbacks: {},\r\n\t      scroll_top: 0\r\n\t    }\r\n\t\r\n\t    // public parameters\r\n\t    self.options = {};\r\n\t    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n\t    for(var i = 0, option; option = options[i]; i++) {\r\n\t      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n\t        ? data[option]\r\n\t        : defaults[option];\r\n\t    }\r\n\t\r\n\t    var elems = ['scroll', 'content'];\r\n\t    for(var i = 0, elem; elem = elems[i]; i++) {\r\n\t      self[elem + '_elem'] = data[elem + 'Id']\r\n\t        ? document.getElementById(data[elem + 'Id'])\r\n\t        : data[elem + 'Elem'];\r\n\t      if( ! self[elem + '_elem'])\r\n\t        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n\t    }\r\n\t\r\n\t    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n\t    if( ! self.content_elem.hasAttribute('tabindex'))\r\n\t      self.content_elem.setAttribute('tabindex', 0);\r\n\t\r\n\t    // private parameters\r\n\t    var rows = isArray(data.rows)\r\n\t        ? data.rows\r\n\t        : self.fetchMarkup(),\r\n\t      cache = {data: '', bottom: 0},\r\n\t      scroll_top = self.scroll_elem.scrollTop;\r\n\t\r\n\t    // get row height\r\n\t    self.exploreEnvironment(rows);\r\n\t\r\n\t    // append initial data\r\n\t    self.insertToDOM(rows, cache);\r\n\t\r\n\t    // restore the scroll position\r\n\t    self.scroll_elem.scrollTop = scroll_top;\r\n\t\r\n\t    // adding scroll handler\r\n\t    var last_cluster = false,\r\n\t    scroll_debounce = 0,\r\n\t    pointer_events_set = false,\r\n\t    scrollEv = function() {\r\n\t      // fixes scrolling issue on Mac #3\r\n\t      if (is_mac) {\r\n\t          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n\t          pointer_events_set = true;\r\n\t          clearTimeout(scroll_debounce);\r\n\t          scroll_debounce = setTimeout(function () {\r\n\t              self.content_elem.style.pointerEvents = 'auto';\r\n\t              pointer_events_set = false;\r\n\t          }, 50);\r\n\t      }\r\n\t      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n\t        self.insertToDOM(rows, cache);\r\n\t      if (self.options.callbacks.scrollingProgress)\r\n\t        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n\t    },\r\n\t    resize_debounce = 0,\r\n\t    resizeEv = function() {\r\n\t      clearTimeout(resize_debounce);\r\n\t      resize_debounce = setTimeout(self.refresh, 100);\r\n\t    }\r\n\t    on('scroll', self.scroll_elem, scrollEv);\r\n\t    on('resize', window, resizeEv);\r\n\t\r\n\t    // public methods\r\n\t    self.destroy = function(clean) {\r\n\t      off('scroll', self.scroll_elem, scrollEv);\r\n\t      off('resize', window, resizeEv);\r\n\t      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n\t    }\r\n\t    self.refresh = function() {\r\n\t      self.getRowsHeight(rows) && self.update(rows);\r\n\t    }\r\n\t    self.update = function(new_rows) {\r\n\t      rows = isArray(new_rows)\r\n\t        ? new_rows\r\n\t        : [];\r\n\t      var scroll_top = self.scroll_elem.scrollTop;\r\n\t      // fixes #39\r\n\t      if(rows.length * self.options.item_height < scroll_top) {\r\n\t        self.scroll_elem.scrollTop = 0;\r\n\t        last_cluster = 0;\r\n\t      }\r\n\t      self.insertToDOM(rows, cache);\r\n\t      self.scroll_elem.scrollTop = scroll_top;\r\n\t    }\r\n\t    self.clear = function() {\r\n\t      self.update([]);\r\n\t    }\r\n\t    self.getRowsAmount = function() {\r\n\t      return rows.length;\r\n\t    }\r\n\t    self.getScrollProgress = function() {\r\n\t      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n\t    }\r\n\t\r\n\t    var add = function(where, _new_rows) {\r\n\t      var new_rows = isArray(_new_rows)\r\n\t        ? _new_rows\r\n\t        : [];\r\n\t      if( ! new_rows.length) return;\r\n\t      rows = where == 'append'\r\n\t        ? rows.concat(new_rows)\r\n\t        : new_rows.concat(rows);\r\n\t      self.insertToDOM(rows, cache);\r\n\t    }\r\n\t    self.append = function(rows) {\r\n\t      add('append', rows);\r\n\t    }\r\n\t    self.prepend = function(rows) {\r\n\t      add('prepend', rows);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  Clusterize.prototype = {\r\n\t    constructor: Clusterize,\r\n\t    // fetch existing markup\r\n\t    fetchMarkup: function() {\r\n\t      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n\t      while (rows_nodes.length) {\r\n\t        rows.push(rows_nodes.shift().outerHTML);\r\n\t      }\r\n\t      return rows;\r\n\t    },\r\n\t    // get tag name, content tag name, tag height, calc cluster height\r\n\t    exploreEnvironment: function(rows) {\r\n\t      var opts = this.options;\r\n\t      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n\t      if( ! rows.length) return;\r\n\t      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n\t      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n\t      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n\t      this.getRowsHeight(rows);\r\n\t    },\r\n\t    getRowsHeight: function(rows) {\r\n\t      var opts = this.options,\r\n\t        prev_item_height = opts.item_height;\r\n\t      opts.cluster_height = 0\r\n\t      if( ! rows.length) return;\r\n\t      var nodes = this.content_elem.children;\r\n\t      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n\t      // consider table's border-spacing\r\n\t      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n\t        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n\t      opts.block_height = opts.item_height * opts.rows_in_block;\r\n\t      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n\t      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n\t      return prev_item_height != opts.item_height;\r\n\t    },\r\n\t    // get current cluster number\r\n\t    getClusterNum: function () {\r\n\t      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n\t      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n\t    },\r\n\t    // generate empty row if no data provided\r\n\t    generateEmptyRow: function() {\r\n\t      var opts = this.options;\r\n\t      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n\t      var empty_row = document.createElement(opts.tag),\r\n\t        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n\t      empty_row.className = opts.no_data_class;\r\n\t      if(opts.tag == 'tr') {\r\n\t        td = document.createElement('td');\r\n\t        td.appendChild(no_data_content);\r\n\t      }\r\n\t      empty_row.appendChild(td || no_data_content);\r\n\t      return [empty_row.outerHTML];\r\n\t    },\r\n\t    // generate cluster for current scroll position\r\n\t    generate: function (rows, cluster_num) {\r\n\t      var opts = this.options,\r\n\t        rows_len = rows.length;\r\n\t      if (rows_len < opts.rows_in_block) {\r\n\t        return {\r\n\t          top_offset: 0,\r\n\t          bottom_offset: 0,\r\n\t          rows_above: 0,\r\n\t          rows: rows_len ? rows : this.generateEmptyRow()\r\n\t        }\r\n\t      }\r\n\t      if( ! opts.cluster_height) {\r\n\t        this.exploreEnvironment(rows);\r\n\t      }\r\n\t      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n\t        items_end = items_start + opts.rows_in_cluster,\r\n\t        top_offset = Math.max(items_start * opts.item_height, 0),\r\n\t        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n\t        this_cluster_rows = [],\r\n\t        rows_above = items_start;\r\n\t      if(top_offset < 1) {\r\n\t        rows_above++;\r\n\t      }\r\n\t      for (var i = items_start; i < items_end; i++) {\r\n\t        rows[i] && this_cluster_rows.push(rows[i]);\r\n\t      }\r\n\t      return {\r\n\t        top_offset: top_offset,\r\n\t        bottom_offset: bottom_offset,\r\n\t        rows_above: rows_above,\r\n\t        rows: this_cluster_rows\r\n\t      }\r\n\t    },\r\n\t    renderExtraTag: function(class_name, height) {\r\n\t      var tag = document.createElement(this.options.tag),\r\n\t        clusterize_prefix = 'clusterize-';\r\n\t      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n\t      height && (tag.style.height = height + 'px');\r\n\t      return tag.outerHTML;\r\n\t    },\r\n\t    // if necessary verify data changed and insert to DOM\r\n\t    insertToDOM: function(rows, cache) {\r\n\t      var data = this.generate(rows, this.getClusterNum()),\r\n\t        this_cluster_rows = data.rows.join(''),\r\n\t        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n\t        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n\t        callbacks = this.options.callbacks,\r\n\t        layout = [];\r\n\t\r\n\t      if(this_cluster_content_changed) {\r\n\t        if(data.top_offset) {\r\n\t          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n\t          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n\t        }\r\n\t        layout.push(this_cluster_rows);\r\n\t        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n\t        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n\t        this.html(layout.join(''));\r\n\t        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n\t        callbacks.clusterChanged && callbacks.clusterChanged();\r\n\t      } else if(only_bottom_offset_changed) {\r\n\t        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n\t      }\r\n\t    },\r\n\t    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n\t    html: function(data) {\r\n\t      var content_elem = this.content_elem;\r\n\t      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n\t        var div = document.createElement('div'), last;\r\n\t        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n\t        while((last = content_elem.lastChild)) {\r\n\t          content_elem.removeChild(last);\r\n\t        }\r\n\t        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n\t        while (rows_nodes.length) {\r\n\t          content_elem.appendChild(rows_nodes.shift());\r\n\t        }\r\n\t      } else {\r\n\t        content_elem.innerHTML = data;\r\n\t      }\r\n\t    },\r\n\t    getChildNodes: function(tag) {\r\n\t        var child_nodes = tag.children, nodes = [];\r\n\t        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n\t            nodes.push(child_nodes[i]);\r\n\t        }\r\n\t        return nodes;\r\n\t    },\r\n\t    checkChanges: function(type, value, cache) {\r\n\t      var changed = value != cache[type];\r\n\t      cache[type] = value;\r\n\t      return changed;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  // support functions\r\n\t  function on(evt, element, fnc) {\r\n\t    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function off(evt, element, fnc) {\r\n\t    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function isArray(arr) {\r\n\t    return Object.prototype.toString.call(arr) === '[object Array]';\r\n\t  }\r\n\t  function getStyle(prop, elem) {\r\n\t    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n\t  }\r\n\t\r\n\t  return Clusterize;\r\n\t}));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.Node = exports.flatten = undefined;\n\t\n\tvar _flatten = __webpack_require__(6);\n\t\n\tvar _flatten2 = _interopRequireDefault(_flatten);\n\t\n\tvar _node = __webpack_require__(8);\n\t\n\tvar _node2 = _interopRequireDefault(_node);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// IE8 compatibility output\n\texports.flatten = _flatten2['default'];\n\texports.Node = _node2['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extend = __webpack_require__(7);\n\t\n\tvar _extend2 = _interopRequireDefault(_extend);\n\t\n\tvar _node = __webpack_require__(8);\n\t\n\tvar _node2 = _interopRequireDefault(_node);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// @param {object|array} nodes The tree nodes\n\t// @param {object} [options] The options object\n\t// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n\t// @param {array} [options.openNodes] An array that contains the ids of open nodes\n\t// @return {array}\n\tvar flatten = function flatten() {\n\t    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    nodes = [].concat(nodes);\n\t\n\t    var flatten = [];\n\t    var stack = [];\n\t    var pool = {\n\t        lastChild: {}\n\t    };\n\t\n\t    options.openAllNodes = !!options.openAllNodes;\n\t    options.openNodes = options.openNodes || [];\n\t    options.throwOnError = !!options.throwOnError;\n\t\n\t    {\n\t        // root node\n\t        var firstNode = nodes.length > 0 ? nodes[0] : null;\n\t        var parentNode = firstNode ? firstNode.parent : null;\n\t        if (parentNode && !(parentNode instanceof _node2['default'])) {\n\t            parentNode = new _node2['default'](parentNode);\n\t        }\n\t        var rootNode = parentNode || new _node2['default']({ // defaults\n\t            label: '',\n\t            parent: null,\n\t            children: nodes,\n\t            state: {\n\t                depth: -1,\n\t                open: true, // always open\n\t                path: '',\n\t                prefixMask: '',\n\t                total: 0\n\t            }\n\t        });\n\t\n\t        if (rootNode === parentNode) {\n\t            var subtotal = rootNode.state.total || 0;\n\t\n\t            // Traversing up through its ancestors\n\t            var p = rootNode;\n\t            while (p) {\n\t                var _p$state = p.state;\n\t                var path = _p$state.path;\n\t                var _p$state$total = _p$state.total;\n\t                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\t\n\t                // Rebuild the lastChild pool\n\t\n\t                if (p.isLastChild() && path) {\n\t                    pool.lastChild[path] = true;\n\t                }\n\t\n\t                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n\t                p.state.total = total - subtotal;\n\t                if (p.state.total < 0) {\n\t                    if (options.throwOnError) {\n\t                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n\t                    } else {\n\t                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n\t                    }\n\t                }\n\t\n\t                p = p.parent;\n\t            }\n\t        }\n\t\n\t        stack.push([rootNode, rootNode.state.depth, 0]);\n\t    }\n\t\n\t    while (stack.length > 0) {\n\t        var _stack$pop = stack.pop();\n\t\n\t        var current = _stack$pop[0];\n\t        var depth = _stack$pop[1];\n\t        var index = _stack$pop[2];\n\t\n\t        var _loop = function _loop() {\n\t            var node = current.children[index];\n\t            if (!(node instanceof _node2['default'])) {\n\t                node = new _node2['default'](node);\n\t            }\n\t            node.parent = current;\n\t            node.children = node.children || [];\n\t\n\t            // Ensure parent.children[index] is equal to the current node\n\t            node.parent.children[index] = node;\n\t\n\t            var path = current.state.path + '.' + index;\n\t            var open = node.hasChildren() && function () {\n\t                var openAllNodes = options.openAllNodes;\n\t                var openNodes = options.openNodes;\n\t\n\t                if (openAllNodes) {\n\t                    return true;\n\t                }\n\t                // determine by node object\n\t                if (openNodes.indexOf(node) >= 0) {\n\t                    return true;\n\t                }\n\t                // determine by node id\n\t                if (openNodes.indexOf(node.id) >= 0) {\n\t                    return true;\n\t                }\n\t                return false;\n\t            }();\n\t            var prefixMask = function (prefix) {\n\t                var mask = '';\n\t                while (prefix.length > 0) {\n\t                    prefix = prefix.replace(/\\.\\d+$/, '');\n\t                    if (!prefix || pool.lastChild[prefix]) {\n\t                        mask = '0' + mask;\n\t                    } else {\n\t                        mask = '1' + mask;\n\t                    }\n\t                }\n\t                return mask;\n\t            }(path);\n\t\n\t            if (node.isLastChild()) {\n\t                pool.lastChild[path] = true;\n\t            }\n\t\n\t            // This allows you to put extra information to node.state\n\t            node.state = (0, _extend2['default'])({}, node.state, {\n\t                depth: depth + 1,\n\t                open: open,\n\t                path: path,\n\t                prefixMask: prefixMask,\n\t                total: 0\n\t            });\n\t\n\t            var parentDidOpen = true;\n\t\n\t            {\n\t                // Check the open state from its ancestors\n\t                var _p = node;\n\t                while (_p.parent !== null) {\n\t                    if (_p.parent.state.open === false) {\n\t                        parentDidOpen = false;\n\t                        break;\n\t                    }\n\t                    _p = _p.parent;\n\t                }\n\t            }\n\t\n\t            if (parentDidOpen) {\n\t                // Push the node to flatten list only if all of its parent nodes have the open state set to true\n\t                flatten.push(node);\n\t\n\t                // Update the total number of visible child nodes\n\t                var _p2 = node;\n\t                while (_p2.parent !== null) {\n\t                    _p2.parent.state.total++;\n\t                    _p2 = _p2.parent;\n\t                }\n\t            }\n\t\n\t            ++index;\n\t\n\t            if (node.hasChildren()) {\n\t                // Push back parent node to the stack that will be able to continue\n\t                // the next iteration once all the child nodes of the current node\n\t                // have been completely explored.\n\t                stack.push([current, depth, index]);\n\t\n\t                index = 0;\n\t                depth = depth + 1;\n\t                current = node;\n\t            }\n\t        };\n\t\n\t        while (index < current.children.length) {\n\t            _loop();\n\t        }\n\t    }\n\t\n\t    return flatten;\n\t};\n\t\n\texports['default'] = flatten;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    if (target === undefined || target === null) {\n\t        throw new TypeError('Cannot convert undefined or null to object');\n\t    }\n\t\n\t    var output = Object(target);\n\t    for (var index = 0; index < sources.length; index++) {\n\t        var source = sources[index];\n\t        if (source !== undefined && source !== null) {\n\t            for (var key in source) {\n\t                if (source.hasOwnProperty(key)) {\n\t                    output[key] = source[key];\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return output;\n\t};\n\t\n\texports['default'] = extend;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extend = __webpack_require__(7);\n\t\n\tvar _extend2 = _interopRequireDefault(_extend);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Node = function () {\n\t    function Node(node) {\n\t        _classCallCheck(this, Node);\n\t\n\t        this.id = null;\n\t        this.label = '';\n\t        this.parent = null;\n\t        this.children = [];\n\t        this.state = {};\n\t\n\t        (0, _extend2['default'])(this, node);\n\t\n\t        this.children = this.children || [];\n\t    }\n\t    // Gets a child node at the specified index.\n\t    // @param {number} The index of the child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getChildAt = function getChildAt(index) {\n\t        var node = null;\n\t        if (this.children.length > 0 && index >= 0 && index < this.children.length) {\n\t            node = this.children[index];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the child nodes.\n\t    // @return {array} Returns an array of objects that define the nodes.\n\t\n\t\n\t    Node.prototype.getChildren = function getChildren() {\n\t        return this.children;\n\t    };\n\t    // Gets the first child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getFirstChild = function getFirstChild() {\n\t        var node = null;\n\t        if (this.children.length > 0) {\n\t            node = this.children[0];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the last child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getLastChild = function getLastChild() {\n\t        var node = null;\n\t        if (this.children.length > 0) {\n\t            node = this.children[this.children.length - 1];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the next sibling node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getNextSibling = function getNextSibling() {\n\t        var node = null;\n\t        if (this.parent) {\n\t            var index = this.parent.children.indexOf(this);\n\t            if (index >= 0 && index < this.parent.children.length - 1) {\n\t                node = this.parent.children[index + 1];\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the parent node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getParent = function getParent() {\n\t        return this.parent;\n\t    };\n\t    // Gets the previous sibling node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getPreviousSibling = function getPreviousSibling() {\n\t        var node = null;\n\t        if (this.parent) {\n\t            var index = this.parent.children.indexOf(this);\n\t            if (index > 0 && index < this.parent.children.length) {\n\t                node = this.parent.children[index - 1];\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    // Checks whether this node has children.\n\t    // @return {boolean} Returns true if the node has children, false otherwise.\n\t\n\t\n\t    Node.prototype.hasChildren = function hasChildren() {\n\t        return this.children.length > 0;\n\t    };\n\t    // Checks whether this node is the last child of its parent.\n\t    // @return {boolean} Returns true if the node is the last child of its parent, false otherwise.\n\t\n\t\n\t    Node.prototype.isLastChild = function isLastChild() {\n\t        var hasNextSibling = this.getNextSibling();\n\t        return !hasNextSibling;\n\t    };\n\t\n\t    return Node;\n\t}();\n\t\n\texports['default'] = Node;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar LookupTable = function () {\n\t    function LookupTable() {\n\t        _classCallCheck(this, LookupTable);\n\t\n\t        this.data = {};\n\t    }\n\t\n\t    LookupTable.prototype.clear = function clear() {\n\t        this.data = {};\n\t    };\n\t\n\t    LookupTable.prototype.get = function get(key) {\n\t        return this.data[key];\n\t    };\n\t\n\t    LookupTable.prototype.has = function has(key) {\n\t        return this.data[key] !== undefined;\n\t    };\n\t\n\t    LookupTable.prototype.set = function set(key, value) {\n\t        this.data[key] = value;\n\t        return value;\n\t    };\n\t\n\t    LookupTable.prototype.unset = function unset(key) {\n\t        if (this.data[key] !== undefined) {\n\t            delete this.data[key];\n\t        }\n\t    };\n\t\n\t    return LookupTable;\n\t}();\n\t\n\texports[\"default\"] = LookupTable;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.defaultRowRenderer = undefined;\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tvar defaultRowRenderer = function defaultRowRenderer(node, treeOptions) {\n\t    var id = node.id;\n\t    var label = node.label;\n\t    var children = node.children;\n\t    var state = node.state;\n\t    var depth = state.depth;\n\t    var open = state.open;\n\t    var path = state.path;\n\t    var total = state.total;\n\t    var _state$selected = state.selected;\n\t    var selected = _state$selected === undefined ? false : _state$selected;\n\t\n\t    var childrenLength = Object.keys(children).length;\n\t    var more = node.hasChildren();\n\t\n\t    var togglerContent = '';\n\t    if (more && open) {\n\t        togglerContent = '▼';\n\t    }\n\t    if (more && !open) {\n\t        togglerContent = '►';\n\t    }\n\t    var toggler = (0, _helper.buildHTML)('a', togglerContent, {\n\t        'class': function () {\n\t            if (more && open) {\n\t                return (0, _helper.classNames)('tree-toggler');\n\t            }\n\t            if (more && !open) {\n\t                return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            return '';\n\t        }()\n\t    });\n\t    var title = (0, _helper.buildHTML)('span', (0, _helper.quoteattr)(label), {\n\t        'class': (0, _helper.classNames)('tree-title')\n\t    });\n\t    var treeNode = (0, _helper.buildHTML)('div', toggler + title, {\n\t        'class': 'tree-node',\n\t        'style': 'margin-left: ' + depth * 18 + 'px'\n\t    });\n\t\n\t    return (0, _helper.buildHTML)('div', treeNode, {\n\t        'aria-id': id,\n\t        'aria-expanded': more && open,\n\t        'aria-depth': depth,\n\t        'aria-path': path,\n\t        'aria-selected': selected,\n\t        'aria-children': childrenLength,\n\t        'aria-total': total,\n\t        'class': (0, _helper.classNames)('tree-item', { 'tree-selected': selected }),\n\t        'droppable': true\n\t    });\n\t};\n\t\n\texports.defaultRowRenderer = defaultRowRenderer;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar preventDefault = function preventDefault(e) {\n\t    if (typeof e.preventDefault !== 'undefined') {\n\t        e.preventDefault();\n\t    } else {\n\t        e.returnValue = false;\n\t    }\n\t};\n\t\n\tvar stopPropagation = function stopPropagation(e) {\n\t    if (typeof e.stopPropagation !== 'undefined') {\n\t        e.stopPropagation();\n\t    } else {\n\t        e.cancelBubble = true;\n\t    }\n\t};\n\t\n\t// http://blog.garstasio.com/you-dont-need-jquery/events/#sending-custom-events\n\tvar dispatchEvent = function dispatchEvent(el, eventType) {\n\t    var evt = document.createEvent('Event');\n\t    evt.initEvent(eventType, true, true); // can bubble, and is cancellable\n\t    el.dispatchEvent(evt);\n\t};\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility\n\tvar addEventListener = function addEventListener(target, type, listener) {\n\t    if (target.addEventListener) {\n\t        // Standard\n\t        target.addEventListener(type, listener, false);\n\t    } else if (target.attachEvent) {\n\t        // IE8\n\t        // In Internet Explorer versions before IE 9, you have to use attachEvent rather than the standard addEventListener.\n\t        target.attachEvent('on' + type, listener);\n\t    }\n\t};\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n\tvar removeEventListener = function removeEventListener(target, type, listener) {\n\t    if (target.removeEventListener) {\n\t        // Standard\n\t        target.removeEventListener(type, listener, false);\n\t    } else if (target.detachEvent) {\n\t        // IE8\n\t        // In Internet Explorer versions before IE 9, you have to use detachEvent rather than the standard removeEventListener.\n\t        target.detachEvent('on' + type, listener);\n\t    }\n\t};\n\t\n\tvar hasClass = function hasClass(el, className) {\n\t    if (!el) {\n\t        return false;\n\t    }\n\t    var classes = el.className.split(' ');\n\t    return classes.indexOf(className) >= 0;\n\t};\n\t\n\tvar addClass = function addClass(el, className) {\n\t    if (!el) {\n\t        return '';\n\t    }\n\t    if (!hasClass(el, className)) {\n\t        var classes = el.className.split(' ');\n\t        el.className = classes.concat(className).join(' ');\n\t    }\n\t    return el.className;\n\t};\n\t\n\tvar removeClass = function removeClass(el, className) {\n\t    if (!el) {\n\t        return '';\n\t    }\n\t    if (hasClass(el, className)) {\n\t        var classes = el.className.split(' ');\n\t        el.className = classes.filter(function (c) {\n\t            return c !== className;\n\t        }).join(' ');\n\t    }\n\t    return el.className;\n\t};\n\t\n\tvar toggleClass = function toggleClass(el, className) {\n\t    if (!el) {\n\t        return;\n\t    }\n\t    if (hasClass(el, className)) {\n\t        removeClass(el, className);\n\t    } else {\n\t        addClass(el, className);\n\t    }\n\t};\n\t\n\tvar classNames = function classNames() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t    }\n\t\n\t    var classNames = [];\n\t    args.forEach(function (arg) {\n\t        if (Array.isArray(arg)) {\n\t            classNames = classNames.concat(arg);\n\t        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n\t            Object.keys(arg).forEach(function (className) {\n\t                var ok = arg[className];\n\t                if (!!ok) {\n\t                    classNames.push(className);\n\t                }\n\t            });\n\t        } else {\n\t            classNames.push(arg);\n\t        }\n\t    });\n\t    return classNames.join(' ');\n\t};\n\t\n\tvar quoteattr = function quoteattr(s, preserveCR) {\n\t    preserveCR = preserveCR ? '&#13;' : '\\n';\n\t    return ('' + s). /* Forces the conversion to string. */\n\t    replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n\t    .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n\t    .replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\t    /*\n\t     * You may add other replacements here for HTML only\n\t     * (but it's not necessary).\n\t     * Or for XML, only if the named entities are defined in its DTD.\n\t     */\n\t    .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n\t    .replace(/[\\r\\n]/g, preserveCR);\n\t};\n\t\n\t/**\n\t * Example #1:\n\t * =========================================================================\n\t * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n\t *\n\t * buildHTML('a', 'My Mail', {\n\t *     id: 'mymail',\n\t *     href: 'http://mymail.example.com'\n\t * });\n\t *\n\t * Example #2:\n\t * =========================================================================\n\t * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n\t *\n\t * buildHTML('input', {\n\t *   id: 'myinput',\n\t *   type: 'text',\n\t *   value: 'myvalue'\n\t * });\n\t *\n\t */\n\tvar buildHTML = function buildHTML(tag, html, attrs) {\n\t    switch (tag) {\n\t        case 'select':\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                var options = html || {};\n\t                html = '';\n\t                for (var value in options) {\n\t                    if (!options.hasOwnProperty(value)) {\n\t                        continue;\n\t                    }\n\t                    html += buildHTML('option', options[value] || '', { value: value });\n\t                }\n\t            }\n\t            break;\n\t\n\t        default:\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                attrs = html;\n\t                html = undefined;\n\t            }\n\t            break;\n\t    }\n\t\n\t    var h = '<' + tag;\n\t    for (var attr in attrs) {\n\t        if (!attrs.hasOwnProperty(attr)) {\n\t            continue;\n\t        }\n\t        if (typeof attrs[attr] !== 'undefined') {\n\t            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n\t        }\n\t    }\n\t    h += typeof html !== 'undefined' ? '>' + html + '</' + tag + '>' : '/>';\n\t\n\t    return h;\n\t};\n\t\n\texports.preventDefault = preventDefault;\n\texports.stopPropagation = stopPropagation;\n\texports.dispatchEvent = dispatchEvent;\n\texports.addEventListener = addEventListener;\n\texports.removeEventListener = removeEventListener;\n\texports.hasClass = hasClass;\n\texports.addClass = addClass;\n\texports.removeClass = removeClass;\n\texports.toggleClass = toggleClass;\n\texports.classNames = classNames;\n\texports.quoteattr = quoteattr;\n\texports.buildHTML = buildHTML;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tvar rowRenderer = function rowRenderer(node, treeOptions) {\n\t    var id = node.id;\n\t    var label = node.label;\n\t    var children = node.children;\n\t    var state = node.state;\n\t    var props = node.props;\n\t\n\t    var droppable = treeOptions.droppable && props.droppable;\n\t    var depth = state.depth;\n\t    var open = state.open;\n\t    var path = state.path;\n\t    var total = state.total;\n\t    var _state$selected = state.selected;\n\t    var selected = _state$selected === undefined ? false : _state$selected;\n\t\n\t    var childrenLength = Object.keys(children).length;\n\t    var more = node.hasChildren();\n\t\n\t    var toggler = '';\n\t    if (more) {\n\t        var togglerContent = '';\n\t        if (open) {\n\t            togglerContent = (0, _helper.buildHTML)('i', '', {\n\t                'class': (0, _helper.classNames)('glyphicon', 'glyphicon-triangle-bottom')\n\t            });\n\t        }\n\t        if (!open) {\n\t            togglerContent = (0, _helper.buildHTML)('i', '', {\n\t                'class': (0, _helper.classNames)('glyphicon', 'glyphicon-triangle-right')\n\t            });\n\t        }\n\t        toggler = (0, _helper.buildHTML)('a', togglerContent, {\n\t            'class': function () {\n\t                if (more && open) {\n\t                    return (0, _helper.classNames)('tree-toggler');\n\t                }\n\t                if (more && !open) {\n\t                    return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t                }\n\t                return '';\n\t            }()\n\t        });\n\t    }\n\t\n\t    var icon = (0, _helper.buildHTML)('i', '', {\n\t        'class': (0, _helper.classNames)('tree-folder-icon', 'glyphicon', { 'glyphicon-folder-open': more && open }, { 'glyphicon-folder-close': more && !open }, { 'glyphicon-file': !more })\n\t    });\n\t    var title = (0, _helper.buildHTML)('span', (0, _helper.quoteattr)(label), {\n\t        'class': (0, _helper.classNames)('tree-title')\n\t    });\n\t    var count = (0, _helper.buildHTML)('span', childrenLength, {\n\t        'class': 'count'\n\t    });\n\t    var treeNode = (0, _helper.buildHTML)('div', toggler + icon + title + count, {\n\t        'class': 'tree-node',\n\t        'style': 'margin-left: ' + depth * 18 + 'px'\n\t    });\n\t\n\t    var treeNodeAttributes = {\n\t        'aria-id': id,\n\t        'aria-expanded': more && open,\n\t        'aria-depth': depth,\n\t        'aria-path': path,\n\t        'aria-selected': selected,\n\t        'aria-children': childrenLength,\n\t        'aria-total': total,\n\t        'class': (0, _helper.classNames)('tree-item', { 'tree-selected': selected })\n\t    };\n\t    if (droppable) {\n\t        treeNodeAttributes['droppable'] = true;\n\t    }\n\t\n\t    return (0, _helper.buildHTML)('div', treeNode, treeNodeAttributes);\n\t};\n\t\n\texports['default'] = rowRenderer;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(14);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(16)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./../node_modules/stylus-loader/index.js!./index.styl\", function() {\n\t\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./../node_modules/stylus-loader/index.js!./index.styl\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(15)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".infinite-tree-scroll{overflow:auto}.infinite-tree-content{outline:0}.infinite-tree-content .tree-selected.tree-item,.infinite-tree-content .tree-selected.tree-item:hover{background:#deecfd;border:1px solid #06c}.infinite-tree-content .tree-item{border:1px solid transparent;cursor:default}.infinite-tree-content .tree-item:hover{background:#f2fdff}.infinite-tree-content .tree-item.highlight{border:1px dotted #ccc;background-color:#f5f6f7}.infinite-tree-content .tree-node{position:relative}.infinite-tree-content .tree-toggler{color:#666;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-content .tree-toggler:hover{color:#333;text-decoration:none}.infinite-tree-content .tree-title{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-no-data{text-align:center}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(true) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7045c80b604e4a38e4eb\n **/","import InfiniteTree from '../src';\nimport rowRenderer from './renderer';\nimport '../src/index.styl';\nimport { addEventListener, preventDefault, stopPropagation, quoteattr } from '../src/helper';\n\nconst data = [];\nconst source = '{\"id\":\"<root>\",\"label\":\"<root>\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"alpha\",\"label\":\"Alpha\",\"props\":{\"droppable\":true}},{\"id\":\"bravo\",\"label\":\"Bravo\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"charlie\",\"label\":\"Charlie\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"delta\",\"label\":\"Delta\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"echo\",\"label\":\"Echo\",\"props\":{\"droppable\":true}},{\"id\":\"foxtrot\",\"label\":\"Foxtrot\",\"props\":{\"droppable\":true}}]},{\"id\":\"golf\",\"label\":\"Golf\",\"props\":{\"droppable\":true}}]},{\"id\":\"hotel\",\"label\":\"Hotel\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"india\",\"label\":\"India\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"juliet\",\"label\":\"Juliet\",\"props\":{\"droppable\":true}}]}]},{\"id\":\"kilo\",\"label\":\"Kilo\",\"props\":{\"droppable\":true}}]}]}';\n\nfor (let i = 0; i < 1000; ++i) {\n    data.push(JSON.parse(source.replace(/\"(id|label)\":\"([^\"]*)\"/g, '\"$1\": \"$2.' + i + '\"')));\n}\n\nconst updatePreview = (node) => {\n    const el = document.querySelector('#preview');\n    if (node) {\n        el.innerHTML = JSON.stringify({\n            id: node.id,\n            label: node.label,\n            children: node.children ? node.children.length : 0,\n            parent: node.parent ? node.parent.id : null,\n            state: node.state\n        }, null, 2).replace(/\\n/g, '<br>').replace(/\\s/g, '&nbsp;');\n    } else {\n        el.innerHTML = '';\n    }\n};\n\nconst tree = new InfiniteTree({\n    autoOpen: true, // Defaults to false\n    droppable: true, // Defaults to false\n    el: document.querySelector('#tree'),\n    rowRenderer: rowRenderer,\n    selectable: true, // Defaults to true\n    shouldSelectNode: (node) => { // Defaults to null\n        if (!node || (node === tree.getSelectedNode())) {\n            return false; // Prevent from deselecting the current node\n        }\n        return true;\n    }\n});\n\ntree.on('scrollProgress', (progress) => {\n    document.querySelector('#scrolling-progress').style.width = progress + '%';\n});\ntree.on('update', () => {\n    const node = tree.getSelectedNode();\n    updatePreview(node);\n});\ntree.on('openNode', (node) => {\n    console.log('openNode', node);\n});\ntree.on('closeNode', (node) => {\n    console.log('closeNode', node);\n});\ntree.on('dropNode', (node, e) => {\n    const source = e.dataTransfer.getData('text');\n    console.log('Dragged an element ' + JSON.stringify(source) + ' and dropped to ' + JSON.stringify(node.label));\n    document.querySelector('#dropped-result').innerHTML = 'Dropped to <b>' + quoteattr(node.label) + '</b>';\n});\ntree.on('selectNode', (node) => {\n    updatePreview(node);\n});\n\ntree.loadData(data);\n\n// Select the first node\ntree.selectNode(tree.getChildNodes()[0]);\n\n// Draggable Element\nconst draggableElement = document.querySelector('#draggable-element');\n\n// http://stackoverflow.com/questions/5500615/internet-explorer-9-drag-and-drop-dnd\naddEventListener(draggableElement, 'selectstart', (e) => {\n    preventDefault(e);\n    stopPropagation(e);\n    draggableElement.dragDrop();\n    return false;\n});\n\naddEventListener(draggableElement, 'dragstart', (e) => {\n    e.dataTransfer.effectAllowed = 'move';\n    const target = e.target || e.srcElement;\n    e.dataTransfer.setData('text', target.id);\n    document.querySelector('#dropped-result').innerHTML = '';\n});\n\naddEventListener(draggableElement, 'dragend', function(e) {\n});\n\nwindow.tree = tree;\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","import InfiniteTree from './infinite-tree';\n\nmodule.exports = InfiniteTree;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/index.js\n **/","import events from 'events';\nimport Clusterize from 'clusterize.js';\nimport { flatten, Node } from 'flattree';\nimport LookupTable from './lookup-table';\nimport { defaultRowRenderer } from './renderer';\nimport {\n    preventDefault,\n    stopPropagation,\n    addEventListener,\n    removeEventListener,\n    classNames,\n    addClass,\n    removeClass\n} from './helper';\n\nconst ensureNodeInstance = (node) => {\n    if (!(node instanceof Node)) {\n        throw new Error('The node must be a Node object.');\n    }\n    return true;\n};\n\nconst extend = (target, ...sources) => {\n    if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    const output = Object(target);\n    for (let index = 0; index < sources.length; index++) {\n        const source = sources[index];\n        if (source !== undefined && source !== null) {\n            for (let key in source) {\n                if (source.hasOwnProperty(key)) {\n                    output[key] = source[key];\n                }\n            }\n        }\n    }\n    return output;\n};\n\nclass InfiniteTree extends events.EventEmitter {\n    options = {\n        autoOpen: false,\n        droppable: false,\n        el: null,\n        rowRenderer: defaultRowRenderer,\n        selectable: true,\n        shouldSelectNode: null\n    };\n    state = {\n        openNodes: [],\n        rootNode: null,\n        selectedNode: null\n    };\n    clusterize = null;\n    nodeTable = new LookupTable();\n    nodes = [];\n    rows = [];\n    scrollElement = null;\n    contentElement = null;\n    dragoverElement = null;\n\n    contentListener = {\n        'click': (e) => {\n            let itemTarget = null;\n            let handleToggler = false;\n\n            stopPropagation(e);\n\n            if (e.target && e.currentTarget) {\n                itemTarget = (e.target !== e.currentTarget) ? e.target : null;\n            } else if (e.srcElement) { // IE8\n                itemTarget = e.srcElement;\n            }\n\n            while (itemTarget && itemTarget.parentElement !== this.contentElement) {\n                if (itemTarget.className.indexOf('tree-toggler') >= 0) {\n                    handleToggler = true;\n                }\n                itemTarget = itemTarget.parentElement;\n            }\n\n            if (!itemTarget) {\n                return;\n            }\n\n            const id = itemTarget.getAttribute('aria-id');\n            const node = this.getNodeById(id);\n\n            if (!node) {\n                return;\n            }\n\n            // Click on the toggler to open/close a tree node\n            if (handleToggler) {\n                this.toggleNode(node);\n                return;\n            }\n\n            this.selectNode(node);\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\n        // The dragenter event is fired when a dragged element or text selection enters a valid drop target.\n        'dragenter': (e) => {\n            let itemTarget = null;\n\n            if (e.target && e.currentTarget) {\n                itemTarget = (e.target !== e.currentTarget) ? e.target : null;\n            } else if (e.srcElement) { // IE8\n                itemTarget = e.srcElement;\n            }\n\n            while (itemTarget && itemTarget.parentElement !== this.contentElement) {\n                itemTarget = itemTarget.parentElement;\n            }\n\n            if (!itemTarget) {\n                return;\n            }\n\n            if (this.dragoverElement !== itemTarget) {\n                removeClass(this.dragoverElement, 'highlight'); // remove 'highlight' class\n                this.dragoverElement = null;\n\n                if (!(itemTarget.hasAttribute('droppable'))) {\n                    return;\n                }\n\n                const canDrop = !(itemTarget.getAttribute('droppable').match(/false/i));\n                if (canDrop) {\n                    addClass(itemTarget, 'highlight');\n                    this.dragoverElement = itemTarget;\n                }\n            }\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n        // The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n        'dragend': (e) => {\n            if (this.dragoverElement) {\n                removeClass(this.dragoverElement, 'highlight'); // remove 'highlight' class\n                this.dragoverElement = null;\n            }\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragover\n        // The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\n        'dragover': (e) => {\n            preventDefault(e);\n            e.dataTransfer.dropEffect = 'move';\n            return false;\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/drop\n        // The drop event is fired when an element or text selection is dropped on a valid drop target.\n        'drop': (e) => {\n            // prevent default action (open as link for some elements)\n            preventDefault(e);\n\n            if (this.dragoverElement) {\n                const id = this.dragoverElement.getAttribute('aria-id');\n                const node = this.getNodeById(id);\n\n                removeClass(this.dragoverElement, 'highlight');\n                this.dragoverElement = null;\n\n                this.emit('dropNode', node, e);\n            }\n        }\n    };\n\n    // Creates new InfiniteTree object.\n    constructor(options = {}) {\n        super();\n\n        // Assign options\n        this.options = extend({}, this.options, options);\n\n        if (!this.options.el) {\n            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n            return;\n        }\n\n        this.create();\n\n        // Load tree data if it's provided\n        if (options.data) {\n            this.loadData(options.data);\n        }\n    }\n    create() {\n        if (!this.options.el) {\n            throw new Error('The element option is not specified.');\n        }\n\n        const scrollElement = document.createElement('div');\n        scrollElement.className = classNames(\n            'infinite-tree',\n            'infinite-tree-scroll'\n        );\n        const contentElement = document.createElement('div');\n        contentElement.className = classNames(\n            'infinite-tree',\n            'infinite-tree-content'\n        );\n\n        scrollElement.appendChild(contentElement);\n        this.options.el.appendChild(scrollElement);\n\n        this.clusterize = new Clusterize({\n            tag: 'div',\n            rows: [],\n            scrollElem: scrollElement,\n            contentElem: contentElement,\n            no_data_class: 'infinite-tree-no-data',\n            callbacks: {\n                // Will be called right before replacing previous cluster with new one.\n                clusterWillChange: () => {\n                },\n                // Will be called right after replacing previous cluster with new one.\n                clusterChanged: () => {\n                },\n                // Will be called on scrolling. Returns progress position.\n                scrollingProgress: (progress) => {\n                    this.emit('scrollProgress', progress);\n                }\n            }\n        });\n\n        this.scrollElement = scrollElement;\n        this.contentElement = contentElement;\n\n        addEventListener(this.contentElement, 'click', this.contentListener.click);\n        if (this.options.droppable) {\n            addEventListener(document, 'dragend', this.contentListener.dragend);\n            addEventListener(this.contentElement, 'dragenter', this.contentListener.dragenter);\n            addEventListener(this.contentElement, 'dragover', this.contentListener.dragover);\n            addEventListener(this.contentElement, 'drop', this.contentListener.drop);\n        }\n    }\n    destroy() {\n        removeEventListener(this.contentElement, 'click', this.contentListener);\n        if (this.options.droppable) {\n            removeEventListener(document, 'dragend', this.contentListener.dragend);\n            removeEventListener(this.contentElement, 'dragenter', this.contentListener.dragenter);\n            removeEventListener(this.contentElement, 'dragover', this.contentListener.dragover);\n            removeEventListener(this.contentElement, 'drop', this.contentListener.drop);\n        }\n\n        this.clear();\n\n        if (this.clusterize) {\n            this.clusterize.destroy(true); // True to remove all data from the list\n            this.clusterize = null;\n        }\n\n        // Remove all child nodes\n        while (this.contentElement.firstChild) {\n            this.contentElement.removeChild(this.contentElement.firstChild);\n        }\n        while (this.scrollElement.firstChild) {\n            this.scrollElement.removeChild(this.scrollElement.firstChild);\n        }\n        if (this.options.el) {\n            const containerElement = this.options.el;\n            while (containerElement.firstChild) {\n                containerElement.removeChild(containerElement.firstChild);\n            }\n        }\n        this.contentElement = null;\n        this.scrollElement = null;\n    }\n    // Inserts a new child node to a parent node at the specified index.\n    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n    // * If the parent has children, the method adds the child to it at the specified index.\n    // * If the parent does not have children, the method adds the child to the parent.\n    // * If the index value is greater than or equal to the number of children in the parent, the method adds the child at the end of the children.\n    // @param {Object} newNode The new child node.\n    // @param {number} index The 0-based index of where to insert the child node. Defaults to 0 for negative index.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    addChildNodeAt(newNode, index, parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        if (!newNode) {\n            return false;\n        }\n        index = Number(index) || 0;\n        if (index < 0) {\n            index = 0;\n        }\n\n        // Inserts the new child at the specified index\n        newNode.parent = parentNode;\n        parentNode.children.splice(index, 0, newNode);\n\n        const deleteCount = parentNode.state.total;\n\n        // Update index\n        index = parentNode.children.indexOf(newNode);\n\n        const nodes = flatten(parentNode.children, { openNodes: this.state.openNodes });\n\n        // Update newNode\n        newNode = parentNode.getChildAt(index);\n\n        const rows = nodes.map(node => this.options.rowRenderer(node, this.options));\n        const parentOffset = this.nodes.indexOf(parentNode);\n\n        // Update nodes & rows\n        this.nodes.splice.apply(this.nodes, [parentOffset + 1, deleteCount].concat(nodes));\n        this.rows.splice.apply(this.rows, [parentOffset + 1, deleteCount].concat(rows));\n\n        // Update the lookup table with newly added nodes\n        this.flattenNode(newNode).forEach((node) => {\n            if (node.id !== undefined) {\n                this.nodeTable.set(node.id, node);\n            }\n        });\n\n        // Update the row corresponding to the parent node\n        this.rows[parentOffset] = this.options.rowRenderer(parentNode, this.options);\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Adds a node to the end of the list of children of a specified parent node.\n    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n    // * If the parent has children, the method adds the child as the last child.\n    // * If the parent does not have children, the method adds the child to the parent.\n    // @param {Object} newNode The new child node.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    appendChildNode(newNode, parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        const index = parentNode.children.length;\n        return this.addChildNodeAt(newNode, index, parentNode);\n    }\n    // Clears the tree.\n    clear() {\n        this.clusterize.clear();\n        this.nodeTable.clear();\n        this.nodes = [];\n        this.rows = [];\n        this.state.openNodes = [];\n        this.state.rootNode = null;\n        this.state.selectedNode = null;\n    }\n    // Closes a node to hide its children.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    closeNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Check if the closeNode action can be performed\n        if (this.state.openNodes.indexOf(node) < 0) {\n            return false;\n        }\n\n        // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n        if (this.state.selectedNode && (this.state.selectedNode !== node)) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0     => close this node; next selected node (total=2)\n            // row #2       node.0.0.0 => selected node (total=0)\n            // row #3       node.0.0.1\n            // row #4     node.0.1\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = nodeIndex + 1;\n            const rangeTo = nodeIndex + node.state.total;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                this.selectNode(node);\n            }\n        }\n\n        node.state.open = false; // Set the open state to false\n        const openNodes = this.state.openNodes.filter((node) => (node.hasChildren() && node.state.open));\n        this.state.openNodes = openNodes;\n\n        const deleteCount = node.state.total;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = node; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        // Update nodes & rows\n        this.nodes.splice(nodeIndex + 1, deleteCount);\n        this.rows.splice(nodeIndex + 1, deleteCount);\n\n        // Update the row corresponding to the node\n        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n        // Emit the 'closeNode' event\n        this.emit('closeNode', node);\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Flattens all child nodes of a parent node by performing full tree traversal using child-parent link.\n    // No recursion or stack is involved.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n    flattenChildNodes(parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        const list = [];\n\n        // Ignore parent node\n        let node = parentNode.getFirstChild();\n        while (node) {\n            list.push(node);\n            if (node.hasChildren()) {\n                node = node.getFirstChild();\n            } else {\n                // find the parent level\n                while ((node.getNextSibling() === null) && (node.parent !== parentNode)) {\n                    // use child-parent link to get to the parent level\n                    node = node.getParent();\n                }\n\n                // Get next sibling\n                node = node.getNextSibling();\n            }\n        }\n\n        return list;\n    }\n    // Flattens a node by performing full tree traversal using child-parent link.\n    // No recursion or stack is involved.\n    // @param {Node} node The Node object.\n    // @return {array} Returns a flattened list of Node objects.\n    flattenNode(node) {\n        return [node].concat(this.flattenChildNodes(node));\n    }\n    // Gets a list of child nodes.\n    // @param {Node} [parentNode] The Node object that defines the parent node. If null or undefined, returns a list of top level nodes.\n    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n    getChildNodes(parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        return parentNode.children;\n    }\n    // Gets a node by its unique id. This assumes that you have given the nodes in the data a unique id.\n    // @param {string|number} id An unique node id. A null value will be returned if the id doesn't match.\n    // @return {Node} Returns a node the matches the id, null otherwise.\n    getNodeById(id) {\n        let node = this.nodeTable.get(id);\n        if (!node) {\n            // Find the first node that matches the id\n            node = this.nodes.filter((node) => (node.id === id))[0];\n            if (!node) {\n                return null;\n            }\n            this.nodeTable.set(node.id, node);\n        }\n        return node;\n    }\n    // Gets an array of open nodes.\n    // @return {array} Returns an array of Node objects containing open nodes.\n    getOpenNodes() {\n        // returns a shallow copy of an array into a new array object.\n        return this.state.openNodes.slice();\n    }\n    // Gets the root node.\n    // @return {Node} Returns the root node, or null if empty.\n    getRootNode() {\n        return this.state.rootNode;\n    }\n    // Gets the selected node.\n    // @return {Node} Returns the selected node, or null if not selected.\n    getSelectedNode() {\n        return this.state.selectedNode;\n    }\n    // Inserts the specified node after the reference node.\n    // @param {Object} newNode The new sibling node.\n    // @param {Node} referenceNode The Node object that defines the reference node.\n    // @return {boolean} Returns true on success, false otherwise.\n    insertNodeAfter(newNode, referenceNode) {\n        ensureNodeInstance(referenceNode);\n        const parentNode = referenceNode.getParent();\n        const index = parentNode.children.indexOf(referenceNode) + 1;\n        return this.addChildNodeAt(newNode, index, parentNode);\n    }\n    // Inserts the specified node before the reference node.\n    // @param {Object} newNode The new sibling node.\n    // @param {Node} referenceNode The Node object that defines the reference node.\n    // @return {boolean} Returns true on success, false otherwise.\n    insertNodeBefore(newNode, referenceNode) {\n        ensureNodeInstance(referenceNode);\n        const parentNode = referenceNode.getParent();\n        const index = parentNode.children.indexOf(referenceNode);\n        return this.addChildNodeAt(newNode, index, parentNode);\n    }\n    // Loads data in the tree.\n    // @param {object|array} data The data is an object or array of objects that defines the node.\n    loadData(data = []) {\n        this.nodes = flatten(data, { openAllNodes: this.options.autoOpen });\n\n        // Clear lookup table\n        this.nodeTable.clear();\n\n        this.state.openNodes = this.nodes.filter((node) => (node.hasChildren() && node.state.open));\n        this.state.rootNode = ((node = null) => {\n            // Finding the root node\n            while (node && node.parent !== null) {\n                node = node.parent;\n            }\n            return node;\n        })(this.nodes[0]);\n        this.state.selectedNode = null;\n\n        // Update the lookup table with newly added nodes\n        this.flattenChildNodes(this.state.rootNode).forEach((node) => {\n            if (node.id !== undefined) {\n                this.nodeTable.set(node.id, node);\n            }\n        });\n\n        // Update rows\n        this.rows = this.nodes.map(node => this.options.rowRenderer(node, this.options));\n\n        // Updates list with new data\n        this.update();\n    }\n    // Opens a node to display its children.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    openNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Check if the openNode action can be performed\n        if (this.state.openNodes.indexOf(node) >= 0) {\n            return false;\n        }\n\n        node.state.open = true; // Set node.state.open to true\n        const openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n        this.state.openNodes = openNodes;\n\n        const nodes = flatten(node.children, { openNodes: this.state.openNodes });\n        const rows = nodes.map(node => this.options.rowRenderer(node, this.options));\n\n        // Update nodes & rows\n        this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n        this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n\n        // Update the row corresponding to the node\n        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n        // Add all child nodes to the lookup table if the first child does not exist in the lookup table\n        if ((nodes.length > 0) && !(this.nodeTable.get(nodes[0]))) {\n            nodes.forEach((node) => {\n                if (node.id !== undefined) {\n                    this.nodeTable.set(node.id, node);\n                }\n            });\n        }\n\n        // Emit the 'openNode' event\n        this.emit('openNode', node);\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Removes all child nodes from a parent node.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    removeChildNodes(parentNode) {\n        ensureNodeInstance(parentNode);\n\n        if (parentNode.children.length === 0) {\n            return false;\n        }\n\n        const parentNodeIndex = this.nodes.indexOf(parentNode);\n\n        // Update selected node\n        if ((parentNodeIndex >= 0) && this.state.selectedNode) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0\n            // row #2       node.0.0.0 => current selected node\n            // row #3       node.0.0.1\n            // row #4     node.0.1\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = parentNodeIndex + 1;\n            const rangeTo = parentNodeIndex + parentNode.state.total;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                this.selectNode(parentNode);\n            }\n        }\n\n        // Update parent node\n        parentNode.children = [];\n        parentNode.state.open = parentNode.state.open && (parentNode.children.length > 0);\n\n        // Get the number of nodes to be removed\n        const deleteCount = parentNode.state.total;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = parentNode; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        if (parentNodeIndex >= 0) {\n            // Update nodes & rows\n            this.nodes.splice(parentNodeIndex + 1, deleteCount);\n            this.rows.splice(parentNodeIndex + 1, deleteCount);\n\n            // Update the row corresponding to the parent node\n            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n        }\n\n        { // Update open nodes and lookup table\n            const childNodes = this.flattenChildNodes(parentNode);\n\n            this.state.openNodes = this.state.openNodes.filter((node) => {\n                return childNodes.indexOf(node) < 0;\n            });\n\n            childNodes.forEach((node) => {\n                this.nodeTable.unset(node.id);\n            });\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Removes a node and all of its child nodes.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    removeNode(node) {\n        ensureNodeInstance(node);\n\n        const parentNode = node.parent;\n        if (!parentNode) {\n            return false;\n        }\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        const parentNodeIndex = this.nodes.indexOf(parentNode);\n\n        // Update selected node\n        if ((nodeIndex >= 0) && this.state.selectedNode) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0     => remove this node (total=2)\n            // row #2       node.0.0.0 => current selected node (total=0)\n            // row #3       node.0.0.1\n            // row #4     node.0.1     => next selected node (total=0)\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = nodeIndex;\n            const rangeTo = nodeIndex + node.state.total + 1;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                // Change the selected node in the following order:\n                // 1. next sibling node\n                // 2. previous sibling node\n                // 3. parent node\n                const selectedNode = node.getNextSibling() || node.getPreviousSibling() || node.getParent();\n                this.selectNode(selectedNode);\n            }\n        }\n\n        // Update parent node\n        parentNode.children.splice(parentNode.children.indexOf(node), 1);\n        parentNode.state.open = parentNode.state.open && (parentNode.children.length > 0);\n\n        // Get the number of nodes to be removed\n        const deleteCount = node.state.total + 1;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = parentNode; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        if (nodeIndex >= 0) {\n            // Update nodes & rows\n            this.nodes.splice(nodeIndex, deleteCount);\n            this.rows.splice(nodeIndex, deleteCount);\n        }\n\n        // Update the row corresponding to the parent node\n        if (parentNodeIndex >= 0) {\n            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n        }\n\n        { // Update open nodes and lookup table\n            const nodes = this.flattenNode(node);\n\n            this.state.openNodes = this.state.openNodes.filter((node) => {\n                return nodes.indexOf(node) < 0;\n            });\n\n            nodes.forEach((node) => {\n                this.nodeTable.unset(node.id);\n            });\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Sets the current scroll position to this node.\n    // @param {Node} node The Node object.\n    // @return {number} Returns the vertical scroll position, or -1 on error.\n    scrollToNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            return -1;\n        }\n        if (!this.contentElement) {\n            return -1;\n        }\n        // Get the offset height of the first child element that contains the \"tree-item\" class\n        const firstChild = this.contentElement.querySelectorAll('.tree-item')[0];\n        const rowHeight = (firstChild && firstChild.offsetHeight) || 0;\n        return this.scrollTop(nodeIndex * rowHeight);\n    }\n    // Gets (or sets) the current vertical position of the scroll bar.\n    // @param {number} [value] An integer that indicates the new position to set the scroll bar to.\n    // @return {number} Returns the vertical scroll position.\n    scrollTop(value) {\n        if (!this.scrollElement) {\n            return 0;\n        }\n        if (value !== undefined) {\n            this.scrollElement.scrollTop = Number(value);\n        }\n        return this.scrollElement.scrollTop;\n    }\n    // Selects a node.\n    // @param {Node} node The Node object. If null or undefined, deselects the current node.\n    // @return {boolean} Returns true on success, false otherwise.\n    selectNode(node = null) {\n        const { selectable, shouldSelectNode } = this.options;\n\n        if (!selectable) {\n            return false;\n        }\n        if ((typeof shouldSelectNode === 'function') && !shouldSelectNode(node)) {\n            return false;\n        }\n\n        if (node === null) {\n            // Deselect the current node\n            if (this.state.selectedNode) {\n                const selectedNode = this.state.selectedNode;\n                const selectedIndex = this.nodes.indexOf(selectedNode);\n\n                selectedNode.state.selected = false;\n                this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n                this.state.selectedNode = null;\n\n                // Emit the 'selectNode' event\n                this.emit('selectNode', null);\n\n                // Updates list with new data\n                this.update();\n\n                return true;\n            }\n\n            return false;\n        }\n\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Select this node\n        if (this.state.selectedNode !== node) {\n            node.state.selected = true;\n\n            // Update the row corresponding to the node\n            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n        }\n\n        // Deselect the current node\n        if (this.state.selectedNode) {\n            const selectedNode = this.state.selectedNode;\n            const selectedIndex = this.nodes.indexOf(selectedNode);\n            selectedNode.state.selected = false;\n            this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n        }\n\n        if (this.state.selectedNode !== node) {\n            this.state.selectedNode = node;\n\n            // Emit the 'selectNode' event\n            this.emit('selectNode', node);\n        } else {\n            this.state.selectedNode = null;\n\n            // Emit the 'selectNode' event\n            this.emit('selectNode', null);\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Toggles a node to display or hide its children.\n    // @param {Node} node The Node object.\n    toggleNode(node) {\n        if (this.state.openNodes.indexOf(node) >= 0) {\n            // close node\n            this.closeNode(node);\n        } else {\n            // open node\n            this.openNode(node);\n        }\n    }\n    // Serializes the current state of a node to a JSON string.\n    // @param {Node} node The Node object. If null, returns the whole tree.\n    // @return {string} Returns a JSON string represented the tree.\n    toString(node = null) {\n        const traverse = (node) => {\n            let s = '[';\n            if (node && node.children) {\n                for (let i = 0; i < node.children.length; ++i) {\n                    let list = [];\n                    s = s + '{';\n                    Object.keys(node).forEach((key) => {\n                        let value = node[key];\n                        if (key === 'parent') { // ignore parent\n                            return;\n                        }\n                        if (key === 'children') { // traverse child nodes\n                            list.push('\"' + key + '\":' + traverse(node.children[i]));\n                            return;\n                        }\n                        if (typeof value === 'string' || typeof value === 'object') {\n                            list.push('\"' + key + '\":' + JSON.stringify(value));\n                        } else { // primitive types\n                            list.push('\"' + key + '\":' + value);\n                        }\n                    });\n                    s = s + list.join(',');\n                    s = s + '}' + ((i === node.children.length - 1) ? '' : ',');\n                }\n            }\n            s = s + ']';\n            return s;\n        };\n\n        if (!node) {\n            node = this.state.rootNode;\n        }\n\n        return traverse(node);\n    }\n    // Updates the tree.\n    update() {\n        // Update the list with new data\n        this.clusterize.update(this.rows);\n\n        // Emit the 'update' event\n        this.emit('update');\n    }\n    // Updates the data of a node.\n    // @param {Node} node The Node object.\n    // @param {Object} data The data object.\n    updateNode(node, data) {\n        ensureNodeInstance(node);\n\n        // The static attributes (i.e. children, parent, and state) are being protected\n        const { children, parent, state } = node;\n        node = extend(node, data, { children, parent, state });\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex >= 0) {\n            // Update the row corresponding to the node\n            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n            // Updates list with new data\n            this.update();\n        }\n    }\n}\n\nexport default InfiniteTree;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/infinite-tree.js\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/webpack/~/node-libs-browser/~/events/events.js\n ** module id = 3\n ** module chunks = 0\n **/","/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function(name, definition) {\r\n    if (typeof module != 'undefined') module.exports = definition();\r\n    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n    else this[name] = definition();\r\n}('Clusterize', function() {\r\n  \"use strict\"\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function(){\r\n    for( var v = 3,\r\n             el = document.createElement('b'),\r\n             all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ){}\r\n    return v > 4 ? v : document.documentMode;\r\n  }()),\r\n  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n  var Clusterize = function(data) {\r\n    if( ! (this instanceof Clusterize))\r\n      return new Clusterize(data);\r\n    var self = this;\r\n\r\n    var defaults = {\r\n      item_height: 0,\r\n      block_height: 0,\r\n      rows_in_block: 50,\r\n      rows_in_cluster: 0,\r\n      cluster_height: 0,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      content_tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {},\r\n      scroll_top: 0\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {};\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n    for(var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option];\r\n    }\r\n\r\n    var elems = ['scroll', 'content'];\r\n    for(var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem'];\r\n      if( ! self[elem + '_elem'])\r\n        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if( ! self.content_elem.hasAttribute('tabindex'))\r\n      self.content_elem.setAttribute('tabindex', 0);\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {data: '', bottom: 0},\r\n      scroll_top = self.scroll_elem.scrollTop;\r\n\r\n    // get row height\r\n    self.exploreEnvironment(rows);\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache);\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top;\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n    scroll_debounce = 0,\r\n    pointer_events_set = false,\r\n    scrollEv = function() {\r\n      // fixes scrolling issue on Mac #3\r\n      if (is_mac) {\r\n          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n          pointer_events_set = true;\r\n          clearTimeout(scroll_debounce);\r\n          scroll_debounce = setTimeout(function () {\r\n              self.content_elem.style.pointerEvents = 'auto';\r\n              pointer_events_set = false;\r\n          }, 50);\r\n      }\r\n      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n        self.insertToDOM(rows, cache);\r\n      if (self.options.callbacks.scrollingProgress)\r\n        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n    },\r\n    resize_debounce = 0,\r\n    resizeEv = function() {\r\n      clearTimeout(resize_debounce);\r\n      resize_debounce = setTimeout(self.refresh, 100);\r\n    }\r\n    on('scroll', self.scroll_elem, scrollEv);\r\n    on('resize', window, resizeEv);\r\n\r\n    // public methods\r\n    self.destroy = function(clean) {\r\n      off('scroll', self.scroll_elem, scrollEv);\r\n      off('resize', window, resizeEv);\r\n      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n    }\r\n    self.refresh = function() {\r\n      self.getRowsHeight(rows) && self.update(rows);\r\n    }\r\n    self.update = function(new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : [];\r\n      var scroll_top = self.scroll_elem.scrollTop;\r\n      // fixes #39\r\n      if(rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0;\r\n        last_cluster = 0;\r\n      }\r\n      self.insertToDOM(rows, cache);\r\n      self.scroll_elem.scrollTop = scroll_top;\r\n    }\r\n    self.clear = function() {\r\n      self.update([]);\r\n    }\r\n    self.getRowsAmount = function() {\r\n      return rows.length;\r\n    }\r\n    self.getScrollProgress = function() {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n    }\r\n\r\n    var add = function(where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : [];\r\n      if( ! new_rows.length) return;\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows);\r\n      self.insertToDOM(rows, cache);\r\n    }\r\n    self.append = function(rows) {\r\n      add('append', rows);\r\n    }\r\n    self.prepend = function(rows) {\r\n      add('prepend', rows);\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function() {\r\n      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n      while (rows_nodes.length) {\r\n        rows.push(rows_nodes.shift().outerHTML);\r\n      }\r\n      return rows;\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function(rows) {\r\n      var opts = this.options;\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n      if( ! rows.length) return;\r\n      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n      this.getRowsHeight(rows);\r\n    },\r\n    getRowsHeight: function(rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height;\r\n      opts.cluster_height = 0\r\n      if( ! rows.length) return;\r\n      var nodes = this.content_elem.children;\r\n      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n      // consider table's border-spacing\r\n      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n      opts.block_height = opts.item_height * opts.rows_in_block;\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n      return prev_item_height != opts.item_height;\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function() {\r\n      var opts = this.options;\r\n      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n      empty_row.className = opts.no_data_class;\r\n      if(opts.tag == 'tr') {\r\n        td = document.createElement('td');\r\n        td.appendChild(no_data_content);\r\n      }\r\n      empty_row.appendChild(td || no_data_content);\r\n      return [empty_row.outerHTML];\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length;\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        }\r\n      }\r\n      if( ! opts.cluster_height) {\r\n        this.exploreEnvironment(rows);\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start;\r\n      if(top_offset < 1) {\r\n        rows_above++;\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i]);\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      }\r\n    },\r\n    renderExtraTag: function(class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-';\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n      height && (tag.style.height = height + 'px');\r\n      return tag.outerHTML;\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function(rows, cache) {\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows.join(''),\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = [];\r\n\r\n      if(this_cluster_content_changed) {\r\n        if(data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n        }\r\n        layout.push(this_cluster_rows);\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n        this.html(layout.join(''));\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n        callbacks.clusterChanged && callbacks.clusterChanged();\r\n      } else if(only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n      }\r\n    },\r\n    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n    html: function(data) {\r\n      var content_elem = this.content_elem;\r\n      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n        var div = document.createElement('div'), last;\r\n        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n        while((last = content_elem.lastChild)) {\r\n          content_elem.removeChild(last);\r\n        }\r\n        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n        while (rows_nodes.length) {\r\n          content_elem.appendChild(rows_nodes.shift());\r\n        }\r\n      } else {\r\n        content_elem.innerHTML = data;\r\n      }\r\n    },\r\n    getChildNodes: function(tag) {\r\n        var child_nodes = tag.children, nodes = [];\r\n        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n            nodes.push(child_nodes[i]);\r\n        }\r\n        return nodes;\r\n    },\r\n    checkChanges: function(type, value, cache) {\r\n      var changed = value != cache[type];\r\n      cache[type] = value;\r\n      return changed;\r\n    }\r\n  }\r\n\r\n  // support functions\r\n  function on(evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function off(evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n  }\r\n  function getStyle(prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n  }\r\n\r\n  return Clusterize;\r\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/clusterize.js/clusterize.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\nexports.__esModule = true;\nexports.Node = exports.flatten = undefined;\n\nvar _flatten = require('./flatten');\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// IE8 compatibility output\nexports.flatten = _flatten2['default'];\nexports.Node = _node2['default'];\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/index.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n\nexports.__esModule = true;\n\nvar _extend = require('./extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// @param {object|array} nodes The tree nodes\n// @param {object} [options] The options object\n// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n// @param {array} [options.openNodes] An array that contains the ids of open nodes\n// @return {array}\nvar flatten = function flatten() {\n    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    nodes = [].concat(nodes);\n\n    var flatten = [];\n    var stack = [];\n    var pool = {\n        lastChild: {}\n    };\n\n    options.openAllNodes = !!options.openAllNodes;\n    options.openNodes = options.openNodes || [];\n    options.throwOnError = !!options.throwOnError;\n\n    {\n        // root node\n        var firstNode = nodes.length > 0 ? nodes[0] : null;\n        var parentNode = firstNode ? firstNode.parent : null;\n        if (parentNode && !(parentNode instanceof _node2['default'])) {\n            parentNode = new _node2['default'](parentNode);\n        }\n        var rootNode = parentNode || new _node2['default']({ // defaults\n            label: '',\n            parent: null,\n            children: nodes,\n            state: {\n                depth: -1,\n                open: true, // always open\n                path: '',\n                prefixMask: '',\n                total: 0\n            }\n        });\n\n        if (rootNode === parentNode) {\n            var subtotal = rootNode.state.total || 0;\n\n            // Traversing up through its ancestors\n            var p = rootNode;\n            while (p) {\n                var _p$state = p.state;\n                var path = _p$state.path;\n                var _p$state$total = _p$state.total;\n                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\n                // Rebuild the lastChild pool\n\n                if (p.isLastChild() && path) {\n                    pool.lastChild[path] = true;\n                }\n\n                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n                p.state.total = total - subtotal;\n                if (p.state.total < 0) {\n                    if (options.throwOnError) {\n                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n                    } else {\n                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n                    }\n                }\n\n                p = p.parent;\n            }\n        }\n\n        stack.push([rootNode, rootNode.state.depth, 0]);\n    }\n\n    while (stack.length > 0) {\n        var _stack$pop = stack.pop();\n\n        var current = _stack$pop[0];\n        var depth = _stack$pop[1];\n        var index = _stack$pop[2];\n\n        var _loop = function _loop() {\n            var node = current.children[index];\n            if (!(node instanceof _node2['default'])) {\n                node = new _node2['default'](node);\n            }\n            node.parent = current;\n            node.children = node.children || [];\n\n            // Ensure parent.children[index] is equal to the current node\n            node.parent.children[index] = node;\n\n            var path = current.state.path + '.' + index;\n            var open = node.hasChildren() && function () {\n                var openAllNodes = options.openAllNodes;\n                var openNodes = options.openNodes;\n\n                if (openAllNodes) {\n                    return true;\n                }\n                // determine by node object\n                if (openNodes.indexOf(node) >= 0) {\n                    return true;\n                }\n                // determine by node id\n                if (openNodes.indexOf(node.id) >= 0) {\n                    return true;\n                }\n                return false;\n            }();\n            var prefixMask = function (prefix) {\n                var mask = '';\n                while (prefix.length > 0) {\n                    prefix = prefix.replace(/\\.\\d+$/, '');\n                    if (!prefix || pool.lastChild[prefix]) {\n                        mask = '0' + mask;\n                    } else {\n                        mask = '1' + mask;\n                    }\n                }\n                return mask;\n            }(path);\n\n            if (node.isLastChild()) {\n                pool.lastChild[path] = true;\n            }\n\n            // This allows you to put extra information to node.state\n            node.state = (0, _extend2['default'])({}, node.state, {\n                depth: depth + 1,\n                open: open,\n                path: path,\n                prefixMask: prefixMask,\n                total: 0\n            });\n\n            var parentDidOpen = true;\n\n            {\n                // Check the open state from its ancestors\n                var _p = node;\n                while (_p.parent !== null) {\n                    if (_p.parent.state.open === false) {\n                        parentDidOpen = false;\n                        break;\n                    }\n                    _p = _p.parent;\n                }\n            }\n\n            if (parentDidOpen) {\n                // Push the node to flatten list only if all of its parent nodes have the open state set to true\n                flatten.push(node);\n\n                // Update the total number of visible child nodes\n                var _p2 = node;\n                while (_p2.parent !== null) {\n                    _p2.parent.state.total++;\n                    _p2 = _p2.parent;\n                }\n            }\n\n            ++index;\n\n            if (node.hasChildren()) {\n                // Push back parent node to the stack that will be able to continue\n                // the next iteration once all the child nodes of the current node\n                // have been completely explored.\n                stack.push([current, depth, index]);\n\n                index = 0;\n                depth = depth + 1;\n                current = node;\n            }\n        };\n\n        while (index < current.children.length) {\n            _loop();\n        }\n    }\n\n    return flatten;\n};\n\nexports['default'] = flatten;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/flatten.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nexports.__esModule = true;\nvar extend = function extend(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n    for (var index = 0; index < sources.length; index++) {\n        var source = sources[index];\n        if (source !== undefined && source !== null) {\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    output[key] = source[key];\n                }\n            }\n        }\n    }\n    return output;\n};\n\nexports['default'] = extend;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/extend.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nexports.__esModule = true;\n\nvar _extend = require('./extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Node = function () {\n    function Node(node) {\n        _classCallCheck(this, Node);\n\n        this.id = null;\n        this.label = '';\n        this.parent = null;\n        this.children = [];\n        this.state = {};\n\n        (0, _extend2['default'])(this, node);\n\n        this.children = this.children || [];\n    }\n    // Gets a child node at the specified index.\n    // @param {number} The index of the child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getChildAt = function getChildAt(index) {\n        var node = null;\n        if (this.children.length > 0 && index >= 0 && index < this.children.length) {\n            node = this.children[index];\n        }\n        return node;\n    };\n    // Gets the child nodes.\n    // @return {array} Returns an array of objects that define the nodes.\n\n\n    Node.prototype.getChildren = function getChildren() {\n        return this.children;\n    };\n    // Gets the first child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getFirstChild = function getFirstChild() {\n        var node = null;\n        if (this.children.length > 0) {\n            node = this.children[0];\n        }\n        return node;\n    };\n    // Gets the last child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getLastChild = function getLastChild() {\n        var node = null;\n        if (this.children.length > 0) {\n            node = this.children[this.children.length - 1];\n        }\n        return node;\n    };\n    // Gets the next sibling node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getNextSibling = function getNextSibling() {\n        var node = null;\n        if (this.parent) {\n            var index = this.parent.children.indexOf(this);\n            if (index >= 0 && index < this.parent.children.length - 1) {\n                node = this.parent.children[index + 1];\n            }\n        }\n        return node;\n    };\n    // Gets the parent node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getParent = function getParent() {\n        return this.parent;\n    };\n    // Gets the previous sibling node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getPreviousSibling = function getPreviousSibling() {\n        var node = null;\n        if (this.parent) {\n            var index = this.parent.children.indexOf(this);\n            if (index > 0 && index < this.parent.children.length) {\n                node = this.parent.children[index - 1];\n            }\n        }\n        return node;\n    };\n    // Checks whether this node has children.\n    // @return {boolean} Returns true if the node has children, false otherwise.\n\n\n    Node.prototype.hasChildren = function hasChildren() {\n        return this.children.length > 0;\n    };\n    // Checks whether this node is the last child of its parent.\n    // @return {boolean} Returns true if the node is the last child of its parent, false otherwise.\n\n\n    Node.prototype.isLastChild = function isLastChild() {\n        var hasNextSibling = this.getNextSibling();\n        return !hasNextSibling;\n    };\n\n    return Node;\n}();\n\nexports['default'] = Node;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/node.js\n ** module id = 8\n ** module chunks = 0\n **/","class LookupTable {\n    data = {};\n\n    clear() {\n        this.data = {};\n    }\n    get(key) {\n        return this.data[key];\n    }\n    has(key) {\n        return this.data[key] !== undefined;\n    }\n    set(key, value) {\n        this.data[key] = value;\n        return value;\n    }\n    unset(key) {\n        if (this.data[key] !== undefined) {\n            delete this.data[key];\n        }\n    }\n}\n\nexport default LookupTable;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/lookup-table.js\n **/","import { buildHTML, classNames, quoteattr } from './helper';\n\nconst defaultRowRenderer = (node, treeOptions) => {\n    const { id, label, children, state } = node;\n    const { depth, open, path, total, selected = false } = state;\n    const childrenLength = Object.keys(children).length;\n    const more = node.hasChildren();\n\n    let togglerContent = '';\n    if (more && open) {\n        togglerContent = '▼';\n    }\n    if (more && !open) {\n        togglerContent = '►';\n    }\n    const toggler = buildHTML('a', togglerContent, {\n        'class': (() => {\n            if (more && open) {\n                return classNames('tree-toggler');\n            }\n            if (more && !open) {\n                return classNames('tree-toggler', 'tree-closed');\n            }\n            return '';\n        })()\n    });\n    const title = buildHTML('span', quoteattr(label), {\n        'class': classNames('tree-title')\n    });\n    const treeNode = buildHTML('div', toggler + title, {\n        'class': 'tree-node',\n        'style': 'margin-left: ' + depth * 18 + 'px'\n    });\n\n    return buildHTML('div', treeNode, {\n        'aria-id': id,\n        'aria-expanded': more && open,\n        'aria-depth': depth,\n        'aria-path': path,\n        'aria-selected': selected,\n        'aria-children': childrenLength,\n        'aria-total': total,\n        'class': classNames(\n            'tree-item',\n            { 'tree-selected': selected }\n        ),\n        'droppable': true\n    });\n};\n\nexport {\n    defaultRowRenderer\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/renderer.js\n **/","const preventDefault = (e) => {\n    if (typeof e.preventDefault !== 'undefined') {\n        e.preventDefault();\n    } else {\n        e.returnValue = false;\n    }\n};\n\nconst stopPropagation = (e) => {\n    if (typeof e.stopPropagation !== 'undefined') {\n        e.stopPropagation();\n    } else {\n        e.cancelBubble = true;\n    }\n};\n\n// http://blog.garstasio.com/you-dont-need-jquery/events/#sending-custom-events\nconst dispatchEvent = (el, eventType) => {\n    const evt = document.createEvent('Event');\n    evt.initEvent(eventType, true, true); // can bubble, and is cancellable\n    el.dispatchEvent(evt);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility\nconst addEventListener = (target, type, listener) => {\n    if (target.addEventListener) { // Standard\n        target.addEventListener(type, listener, false);\n    } else if (target.attachEvent) { // IE8\n        // In Internet Explorer versions before IE 9, you have to use attachEvent rather than the standard addEventListener.\n        target.attachEvent('on' + type, listener);\n    }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\nconst removeEventListener = (target, type, listener) => {\n    if (target.removeEventListener) { // Standard\n        target.removeEventListener(type, listener, false);\n    } else if (target.detachEvent) { // IE8\n        // In Internet Explorer versions before IE 9, you have to use detachEvent rather than the standard removeEventListener.\n        target.detachEvent('on' + type, listener);\n    }\n};\n\nconst hasClass = (el, className) => {\n    if (!el) {\n        return false;\n    }\n    const classes = el.className.split(' ');\n    return (classes.indexOf(className) >= 0);\n};\n\nconst addClass = (el, className) => {\n    if (!el) {\n        return '';\n    }\n    if (!hasClass(el, className)) {\n        let classes = el.className.split(' ');\n        el.className = classes.concat(className).join(' ');\n    }\n    return el.className;\n};\n\nconst removeClass = (el, className) => {\n    if (!el) {\n        return '';\n    }\n    if (hasClass(el, className)) {\n        let classes = el.className.split(' ');\n        el.className = classes.filter(c => (c !== className)).join(' ');\n    }\n    return el.className;\n};\n\nconst toggleClass = (el, className) => {\n    if (!el) {\n        return;\n    }\n    if (hasClass(el, className)) {\n        removeClass(el, className);\n    } else {\n        addClass(el, className);\n    }\n};\n\nconst classNames = (...args) => {\n    let classNames = [];\n    args.forEach((arg) => {\n        if (Array.isArray(arg)) {\n            classNames = classNames.concat(arg);\n        } else if (typeof arg === 'object') {\n            Object.keys(arg).forEach((className) => {\n                const ok = arg[className];\n                if (!!ok) {\n                    classNames.push(className);\n                }\n            });\n        } else {\n            classNames.push(arg);\n        }\n    });\n    return classNames.join(' ');\n};\n\nconst quoteattr = (s, preserveCR) => {\n    preserveCR = preserveCR ? '&#13;' : '\\n';\n    return ('' + s) /* Forces the conversion to string. */\n        .replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n        .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n        .replace(/\"/g, '&quot;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        /*\n         * You may add other replacements here for HTML only\n         * (but it's not necessary).\n         * Or for XML, only if the named entities are defined in its DTD.\n         */\n        .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n        .replace(/[\\r\\n]/g, preserveCR);\n};\n\n/**\n * Example #1:\n * =========================================================================\n * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n *\n * buildHTML('a', 'My Mail', {\n *     id: 'mymail',\n *     href: 'http://mymail.example.com'\n * });\n *\n * Example #2:\n * =========================================================================\n * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n *\n * buildHTML('input', {\n *   id: 'myinput',\n *   type: 'text',\n *   value: 'myvalue'\n * });\n *\n */\nconst buildHTML = (tag, html, attrs) => {\n    switch (tag) {\n    case 'select':\n        if (typeof(html) === 'object') {\n            let options = html || {};\n            html = '';\n            for (let value in options) {\n                if (!options.hasOwnProperty(value)) {\n                    continue;\n                }\n                html += buildHTML('option', options[value] || '', { value: value });\n            }\n        }\n        break;\n\n    default:\n        if (typeof(html) === 'object') {\n            attrs = html;\n            html = undefined;\n        }\n        break;\n    }\n\n    let h = '<' + tag;\n    for (let attr in attrs) {\n        if (!attrs.hasOwnProperty(attr)) {\n            continue;\n        }\n        if (typeof attrs[attr] !== 'undefined') {\n            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n        }\n    }\n    h += (typeof(html) !== 'undefined') ? '>' + html + '</' + tag + '>' : '/>';\n\n    return h;\n};\n\nexport {\n    preventDefault,\n    stopPropagation,\n    dispatchEvent,\n    addEventListener,\n    removeEventListener,\n    hasClass,\n    addClass,\n    removeClass,\n    toggleClass,\n    classNames,\n    quoteattr,\n    buildHTML\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/helper.js\n **/","import { buildHTML, classNames, quoteattr } from '../src/helper';\n\nconst rowRenderer = (node, treeOptions) => {\n    const { id, label, children, state, props } = node;\n    const droppable = (treeOptions.droppable) && (props.droppable);\n    const { depth, open, path, total, selected = false } = state;\n    const childrenLength = Object.keys(children).length;\n    const more = node.hasChildren();\n\n    let toggler = '';\n    if (more) {\n        let togglerContent = '';\n        if (open) {\n            togglerContent = buildHTML('i', '', {\n                'class': classNames('glyphicon', 'glyphicon-triangle-bottom')\n            });\n        }\n        if (!open) {\n            togglerContent = buildHTML('i', '', {\n                'class': classNames('glyphicon', 'glyphicon-triangle-right')\n            });\n        }\n        toggler = buildHTML('a', togglerContent, {\n            'class': (() => {\n                if (more && open) {\n                    return classNames('tree-toggler');\n                }\n                if (more && !open) {\n                    return classNames('tree-toggler', 'tree-closed');\n                }\n                return '';\n            })()\n        });\n    }\n\n    const icon = buildHTML('i', '', {\n        'class': classNames(\n            'tree-folder-icon',\n            'glyphicon',\n            { 'glyphicon-folder-open': more && open },\n            { 'glyphicon-folder-close': more && !open },\n            { 'glyphicon-file': !more }\n        )\n    });\n    const title = buildHTML('span', quoteattr(label), {\n        'class': classNames('tree-title')\n    });\n    const count = buildHTML('span', childrenLength, {\n        'class': 'count'\n    });\n    const treeNode = buildHTML('div', toggler + icon + title + count, {\n        'class': 'tree-node',\n        'style': 'margin-left: ' + depth * 18 + 'px'\n    });\n\n    let treeNodeAttributes = {\n        'aria-id': id,\n        'aria-expanded': more && open,\n        'aria-depth': depth,\n        'aria-path': path,\n        'aria-selected': selected,\n        'aria-children': childrenLength,\n        'aria-total': total,\n        'class': classNames(\n            'tree-item',\n            { 'tree-selected': selected }\n        )\n    };\n    if (droppable) {\n        treeNodeAttributes['droppable'] = true;\n    }\n\n    return buildHTML('div', treeNode, treeNodeAttributes);\n};\n\nexport default rowRenderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./renderer.js\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../node_modules/css-loader/index.js!./../node_modules/stylus-loader/index.js!./index.styl\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./../node_modules/stylus-loader/index.js!./index.styl\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./../node_modules/stylus-loader/index.js!./index.styl\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../src/index.styl\n ** module id = 13\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".infinite-tree-scroll{overflow:auto}.infinite-tree-content{outline:0}.infinite-tree-content .tree-selected.tree-item,.infinite-tree-content .tree-selected.tree-item:hover{background:#deecfd;border:1px solid #06c}.infinite-tree-content .tree-item{border:1px solid transparent;cursor:default}.infinite-tree-content .tree-item:hover{background:#f2fdff}.infinite-tree-content .tree-item.highlight{border:1px dotted #ccc;background-color:#f5f6f7}.infinite-tree-content .tree-node{position:relative}.infinite-tree-content .tree-toggler{color:#666;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-content .tree-toggler:hover{color:#333;text-decoration:none}.infinite-tree-content .tree-title{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-no-data{text-align:center}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader!../~/stylus-loader!../src/index.styl\n ** module id = 14\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader/lib/css-base.js\n ** module id = 15\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/style-loader/addStyles.js\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":""}