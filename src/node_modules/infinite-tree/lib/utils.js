'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
 * Example #1:
 * =========================================================================
 * <a id="mymail href="http://mymail.example.com">My Mail</a>
 *
 * buildHTML('a', 'My Mail', {
 *     id: 'mymail',
 *     href: 'http://mymail.example.com'
 * });
 *
 * Example #2:
 * =========================================================================
 * <input id="myinput" type="text" value="myvalue" />
 *
 * buildHTML('input', {
 *   id: 'myinput',
 *   type: 'text',
 *   value: 'myvalue'
 * });
 *
 */
var buildHTML = function buildHTML(tag, html, attrs) {
    switch (tag) {
        case 'select':
            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {
                var options = html || {};
                html = '';
                for (var value in options) {
                    if (!options.hasOwnProperty(value)) {
                        continue;
                    }
                    html += buildHTML('option', options[value] || '', { value: value });
                }
            }
            break;

        default:
            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {
                attrs = html;
                html = undefined;
            }
            break;
    }

    var h = '<' + tag;
    for (var attr in attrs) {
        if (!attrs.hasOwnProperty(attr)) {
            continue;
        }
        if (typeof attrs[attr] !== 'undefined') {
            h += ' ' + attr + '="' + quoteattr(attrs[attr]) + '"';
        }
    }
    h += typeof html !== 'undefined' ? '>' + html + '</' + tag + '>' : '/>';

    return h;
};

var classNames = function classNames() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var classNames = [];
    args.forEach(function (arg) {
        if (Array.isArray(arg)) {
            classNames = classNames.concat(arg);
        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
            Object.keys(arg).forEach(function (className) {
                var ok = arg[className];
                if (!!ok) {
                    classNames.push(className);
                }
            });
        } else {
            classNames.push(arg);
        }
    });
    return classNames.join(' ');
};

/**
 * The quoteattr() function is used in a context, where the result will not be evaluated by javascript but must be interpreted by an XML or HTML parser, and it must absolutely avoid breaking the syntax of an element attribute.
 */
var quoteattr = function quoteattr(s, preserveCR) {
    preserveCR = preserveCR ? '&#13;' : '\n';
    return ('' + s). /* Forces the conversion to string. */
    replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */
    .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */
    .replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
    /*
     * You may add other replacements here for HTML only
     * (but it's not necessary).
     * Or for XML, only if the named entities are defined in its DTD.
     */
    .replace(/\r\n/g, preserveCR) /* Must be before the next replacement. */
    .replace(/[\r\n]/g, preserveCR);
};

exports.buildHTML = buildHTML;
exports.classNames = classNames;
exports.quoteattr = quoteattr;