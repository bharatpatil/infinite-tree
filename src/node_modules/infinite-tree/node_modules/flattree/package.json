{
  "name": "flattree",
  "version": "0.5.3",
  "description": "Convert hierarchical tree structure to flat structure.",
  "main": "lib/index.js",
  "scripts": {
    "prepublish": "npm run lint && npm run build && npm test && npm run lint",
    "build": "babel ./src --out-dir ./lib",
    "test": "./babel-tap --coverage test/*.js",
    "lint": "eslint ./src",
    "lint:fix": "eslint --fix ./src",
    "coveralls": "./babel-tap --coverage --coverage-report=text-lcov test/*.js | node_modules/.bin/coveralls"
  },
  "author": {
    "name": "Cheton Wu",
    "email": "cheton@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cheton/flattree.git"
  },
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.4",
    "babel-eslint": "^6.0.0-beta.6",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "coveralls": "^2.11.8",
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.2.0",
    "eslint-plugin-react": "^4.2.3",
    "lodash": "^4.6.1",
    "tap": "^5.7.0"
  },
  "nyc": {
    "exclude": [
      "test/index.js"
    ]
  },
  "readme": "# flattree [![build status](https://travis-ci.org/cheton/flattree.svg?branch=master)](https://travis-ci.org/cheton/flattree) [![Coverage Status](https://coveralls.io/repos/cheton/flattree/badge.svg)](https://coveralls.io/r/cheton/flattree)\n[![NPM](https://nodei.co/npm/flattree.png?downloads=true&stars=true)](https://nodei.co/npm/flattree/)\n\nConvert hierarchical tree structure to flat structure.\nWith a flat structure, it allows you to scroll a large tree easily using [Clusterize.js](https://github.com/NeXTs/Clusterize.js). \n\nCheck out [infinite-tree](https://github.com/cheton/infinite-tree) to see how it integrated with [FlatTree](https://github.com/cheton/flattree) and [Clusterize.js](https://github.com/NeXTs/Clusterize.js).\n\n## Installation\n\n```bash\nnpm install --save flattree\n```\n\n## Usage\n```js\nvar flatten = require('flattree').flatten;\n\nvar tree = { // tree can either be object or array\n    id: 'fruit',\n    label: 'Fruit',\n    children: [\n        { id: 'apple', label: 'Apple' },\n        { id: 'banana', label: 'Banana', children: [{ id: 'cherry', label: 'Cherry' }] }\n    ]\n};\nvar nodes = flatten(tree, {\n    openNodes: ['fruit', 'banana'],\n    openAllNodes: false, // Defaults to false\n    throwOnEerror: false // Defaults to false\n});\nconsole.log(nodes);\n```\n\nThis demostrates how to close a node and rebuild the list:\n```js\nvar _ = require('lodash');\nvar flatten = require('flattree').flatten;\n\n// Create the list\nvar nodes = flatten(require('./test/fixtures/tree.json'), { openAllNodes: true });\n\n// Find the first node with an id attribute that equals to 'banana'\nvar index = _.findIndex(nodes, { 'id': 'banana' });\nvar node = nodes[index];\n\nif (node.state.depth > 0) { // (node.state.depth > 0)\n    var parentIndex = _.lastIndexOf(nodes, node.parent, index);\n    var parent = nodes[parentIndex];\n    var previousTotal = parent.state.total;\n\n    // Close the node by passing empty options\n    var siblingNodes = flatten(node);\n    // The above will return all of its sibling nodes if the node's parent have two or more child nodes.\n\n    // Rebuild the list\n    nodes.splice.apply(nodes, [parentIndex + 1, previousTotal].concat(siblingNodes));\n} else { // (node.state.depth === 0)\n    nodes.splice(index + 1, node.state.total);\n    node.state.open = false;\n    node.state.total = 0;\n}\n\nconsole.log(nodes);\n```\n\n## Examples\n\nGiven a hierarchical tree structure like below:\n\n```json\n{\n  \"id\": \"<root>\",\n  \"label\": \"<root>\",\n  \"children\": [\n    {\n      \"id\": \"alpha\",\n      \"label\": \"Alpha\"\n    },\n    {\n      \"id\": \"bravo\",\n      \"label\": \"Bravo\",\n      \"children\": [\n        {\n          \"id\": \"charlie\",\n          \"label\": \"Charlie\",\n          \"children\": [\n            {\n              \"id\": \"delta\",\n              \"label\": \"Delta\",\n              \"children\": [\n                {\n                  \"id\": \"echo\",\n                  \"label\": \"Echo\"\n                },\n                {\n                  \"id\": \"foxtrot\",\n                  \"label\": \"Foxtrot\"\n                }\n              ]\n            },\n            {\n              \"id\": \"golf\",\n              \"label\": \"Golf\"\n            }\n          ]\n        },\n        {\n          \"id\": \"hotel\",\n          \"label\": \"Hotel\",\n          \"children\": [\n            {\n              \"id\": \"india\",\n              \"label\": \"India\",\n              \"children\": [\n                {\n                  \"id\": \"juliet\",\n                  \"label\": \"Juliet\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"id\": \"kilo\",\n          \"label\": \"Kilo\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n### Flat List View\nFile: [examples/test1.js](https://github.com/cheton/flattree/blob/master/examples/tree1.js)\n```\n<root>: path=\".0\", parent=\"\", children=2, total=11, depth=0, prefix=\"0\", last=1, more=1, open=1\nAlpha: path=\".0.0\", parent=\".0\", children=0, total=0, depth=1, prefix=\"00\", last=0, more=0, open=0\nBravo: path=\".0.1\", parent=\".0\", children=3, total=9, depth=1, prefix=\"00\", last=1, more=1, open=1\nCharlie: path=\".0.1.0\", parent=\".0.1\", children=2, total=4, depth=2, prefix=\"000\", last=0, more=1, open=1\nDelta: path=\".0.1.0.0\", parent=\".0.1.0\", children=2, total=2, depth=3, prefix=\"0001\", last=0, more=1, open=1\nEcho: path=\".0.1.0.0.0\", parent=\".0.1.0.0\", children=0, total=0, depth=4, prefix=\"00011\", last=0, more=0, open=0\nFoxtrot: path=\".0.1.0.0.1\", parent=\".0.1.0.0\", children=0, total=0, depth=4, prefix=\"00011\", last=1, more=0, open=0\nGolf: path=\".0.1.0.1\", parent=\".0.1.0\", children=0, total=0, depth=3, prefix=\"0001\", last=1, more=0, open=0\nHotel: path=\".0.1.1\", parent=\".0.1\", children=1, total=2, depth=2, prefix=\"000\", last=0, more=1, open=1\nIndia: path=\".0.1.1.0\", parent=\".0.1.1\", children=1, total=1, depth=3, prefix=\"0001\", last=1, more=1, open=1\nJuliet: path=\".0.1.1.0.0\", parent=\".0.1.1.0\", children=0, total=0, depth=4, prefix=\"00010\", last=1, more=0, open=0\nKilo: path=\".0.1.2\", parent=\".0.1\", children=0, total=0, depth=2, prefix=\"000\", last=1, more=0, open=0\n```\n\n### Nested Hierarchy\nFile: [examples/test2.js](https://github.com/cheton/flattree/blob/master/examples/tree2.js)\n```\n<root> (.0)\n  ├── Alpha (.0.0)\n  └─┬ Bravo (.0.1)\n    ├─┬ Charlie (.0.1.0)\n    | ├─┬ Delta (.0.1.0.0)\n    | | ├── Echo (.0.1.0.0.0)\n    | | └── Foxtrot (.0.1.0.0.1)\n    | └── Golf (.0.1.0.1)\n    ├─┬ Hotel (.0.1.1)\n    | └─┬ India (.0.1.1.0)\n    |   └── Juliet (.0.1.1.0.0)\n    └── Kilo (.0.1.2)\n```\n\n### Single Root Node\nFile: [examples/test3.js](https://github.com/cheton/flattree/blob/master/examples/tree3.js)\n```\n- <root> (.0)\n    Alpha (.0.0)\n  - Bravo (.0.1)\n    - Charlie (.0.1.0)\n      + Delta (.0.1.0.0)\n        Golf (.0.1.0.1)\n    - Hotel (.0.1.1)\n      - India (.0.1.1.0)\n          Juliet (.0.1.1.0.0)\n      Kilo (.0.1.2)\n```\n\n### Multiple Root Nodes\nFile: [examples/test4.js](https://github.com/cheton/flattree/blob/master/examples/tree4.js)\n```\n  Alpha (.0)\n- Bravo (.1)\n  - Charlie (.1.0)\n    + Delta (.1.0.0)\n      Golf (.1.0.1)\n  - Hotel (.1.1)\n    - India (.1.1.0)\n        Juliet (.1.1.0.0)\n    Kilo (.1.2)\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "1e340298dfdd09c33da4b0442842b424875dd2c5",
  "bugs": {
    "url": "https://github.com/cheton/flattree/issues"
  },
  "homepage": "https://github.com/cheton/flattree#readme",
  "_id": "flattree@0.5.3",
  "_shasum": "1ed1b08737fc64153e0e53b98b3af0d777a533b7",
  "_from": "flattree@>=0.5.2 <0.6.0"
}
