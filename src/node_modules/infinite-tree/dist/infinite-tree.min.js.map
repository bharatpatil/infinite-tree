{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///infinite-tree.min.js","webpack:///webpack/bootstrap 8714f1542fde7550fe84","webpack:///./lib/index.js","webpack:///(webpack)/~/node-libs-browser/~/events/events.js","webpack:///./~/clusterize.js/clusterize.js","webpack:///./~/flattree/lib/index.js","webpack:///./lib/renderer.js","webpack:///./lib/utils.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_events","_events2","_clusterize","_clusterize2","_flattree","_renderer","_utils","extend","_len","arguments","sources","Array","_key","forEach","source","hasOwnProperty","addEventListener","type","listener","attachEvent","removeEventListener","detachEvent","stopPropagation","evt","cancelBubble","generateRows","nodes","undefined","rowRenderer","defaultRowRenderer","map","node","InfiniteTree","_events$EventEmitter","options","_this","getPrototypeOf","autoOpen","el","state","openNodes","selectedNode","clusterize","nodebucket","rows","contentElement","contentListener","currentTarget","itemTarget","parentElement","getAttribute","getNodeById","className","indexOf","closeNode","openNode","selectNode","data","loadData","console","error","infiniteTree","document","createElement","classNames","infiniteTreeScroll","infiniteTreeContent","appendChild","tag","scrollElem","contentElem","no_data_class","clear","firstChild","removeChild","update","newNode","parentNode","nodeIndex","Error","JSON","stringify","selectedIndex","rangeFrom","rangeTo","total","open","filter","more","deleteCount","parent","splice","emit","tree","_this2","_options","flatten","openAllNodes","concat","children","apply","selected","_selectedNode","_selectedIndex","EventEmitter","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","n","isNaN","er","handler","len","args","listeners","slice","addListener","newListener","push","warned","trace","on","once","g","removeListener","fired","list","position","removeAllListeners","ret","listenerCount","evlistener","emitter","name","definition","element","fnc","off","isArray","arr","toString","getStyle","prop","elem","window","getComputedStyle","currentStyle","ie","v","all","innerHTML","documentMode","is_mac","navigator","platform","toLowerCase","Clusterize","defaults","item_height","block_height","rows_in_block","rows_in_cluster","cluster_height","blocks_in_cluster","content_tag","show_no_data_row","no_data_text","keep_parity","callbacks","scroll_top","option","elems","getElementById","content_elem","hasAttribute","setAttribute","fetchMarkup","cache","bottom","scroll_elem","scrollTop","exploreEnvironment","insertToDOM","last_cluster","scroll_debounce","pointer_events_set","scrollEv","style","pointerEvents","clearTimeout","setTimeout","getClusterNum","scrollingProgress","getScrollProgress","resize_debounce","resizeEv","refresh","destroy","clean","html","generateEmptyRow","join","getRowsHeight","new_rows","getRowsAmount","add","where","_new_rows","append","prepend","rows_nodes","getChildNodes","shift","outerHTML","opts","tagName","match","prev_item_height","Math","floor","offsetHeight","parseInt","td","empty_row","no_data_content","createTextNode","generate","cluster_num","rows_len","top_offset","bottom_offset","rows_above","items_start","max","items_end","this_cluster_rows","renderExtraTag","class_name","height","clusterize_prefix","this_cluster_content_changed","checkChanges","only_bottom_offset_changed","layout","clusterWillChange","clusterChanged","lastChild","last","div","child_nodes","ii","changed","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","stack","pool","throwOnError","firstNode","index","label","depth","path","subtotal","_p$state","_p$state$total","log","_stack$pop","pop","_stack$pop2","current","_index","_loop","keys","prefixMask","prefix","mask","replace","_p","_state$selected","togglerContent","toggler","buildHTML","class","title","quoteattr","treeNode","treeItem","aria-id","aria-expanded","aria-depth","aria-path","aria-selected","aria-children","aria-total","tree-selected","_typeof","attrs","h","attr","ok","s","preserveCR"],"mappings":"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","file":"infinite-tree.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InfiniteTree\"] = factory();\n\telse\n\t\troot[\"InfiniteTree\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InfiniteTree\"] = factory();\n\telse\n\t\troot[\"InfiniteTree\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _events = __webpack_require__(1);\n\t\n\tvar _events2 = _interopRequireDefault(_events);\n\t\n\tvar _clusterize = __webpack_require__(2);\n\t\n\tvar _clusterize2 = _interopRequireDefault(_clusterize);\n\t\n\tvar _flattree = __webpack_require__(3);\n\t\n\tvar _renderer = __webpack_require__(4);\n\t\n\tvar _utils = __webpack_require__(5);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    sources.forEach(function (source) {\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)) {\n\t                target[key] = source[key];\n\t            }\n\t        }\n\t    });\n\t\n\t    return target;\n\t};\n\t\n\tvar addEventListener = function addEventListener(target, type, listener) {\n\t    if (target.attachEvent) {\n\t        return target.attachEvent('on' + type, listener);\n\t    } else {\n\t        return target.addEventListener(type, listener, false);\n\t    }\n\t};\n\t\n\tvar removeEventListener = function removeEventListener(target, type, listener) {\n\t    if (target.detachEvent) {\n\t        return target.detachEvent('on' + type, listener);\n\t    } else {\n\t        return target.removeEventListener(type, listener, false);\n\t    }\n\t};\n\t\n\tvar stopPropagation = function stopPropagation(evt) {\n\t    if (typeof evt.stopPropagation !== 'undefined') {\n\t        evt.stopPropagation();\n\t    } else {\n\t        evt.cancelBubble = true;\n\t    }\n\t};\n\t\n\tvar generateRows = function generateRows() {\n\t    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t    var rowRenderer = arguments.length <= 1 || arguments[1] === undefined ? _renderer.defaultRowRenderer : arguments[1];\n\t\n\t    return nodes.map(function (node) {\n\t        return rowRenderer(node);\n\t    });\n\t};\n\t\n\tvar InfiniteTree = function (_events$EventEmitter) {\n\t    _inherits(InfiniteTree, _events$EventEmitter);\n\t\n\t    function InfiniteTree() {\n\t        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _classCallCheck(this, InfiniteTree);\n\t\n\t        // Assign options\n\t\n\t        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InfiniteTree).call(this));\n\t\n\t        _this.options = {\n\t            autoOpen: false,\n\t            el: null,\n\t            rowRenderer: _renderer.defaultRowRenderer\n\t        };\n\t        _this.state = {\n\t            openNodes: [],\n\t            selectedNode: null\n\t        };\n\t        _this.clusterize = null;\n\t        _this.nodebucket = {};\n\t        _this.nodes = [];\n\t        _this.rows = [];\n\t        _this.contentElement = null;\n\t\n\t        _this.contentListener = function (evt) {\n\t            var target = evt.target;\n\t            var currentTarget = evt.currentTarget;\n\t\n\t\n\t            stopPropagation(evt);\n\t\n\t            if (target !== currentTarget) {\n\t                var itemTarget = target;\n\t\n\t                while (itemTarget && itemTarget.parentElement !== currentTarget) {\n\t                    itemTarget = itemTarget.parentElement;\n\t                }\n\t\n\t                var id = itemTarget.getAttribute('aria-id');\n\t                var node = _this.getNodeById(id);\n\t\n\t                // Click on the toggler to open/close a tree node\n\t                if (target.className.indexOf('tree-toggler') >= 0) {\n\t                    if (_this.state.openNodes.indexOf(node) >= 0) {\n\t                        // Close node\n\t                        _this.closeNode(node);\n\t                    } else {\n\t                        _this.openNode(node);\n\t                    }\n\t                } else {\n\t                    _this.selectNode(node);\n\t                }\n\t            }\n\t        };\n\t\n\t        _this.options = extend({}, _this.options, options);\n\t\n\t        if (!_this.options.el) {\n\t            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n\t            return _possibleConstructorReturn(_this);\n\t        }\n\t\n\t        _this.create();\n\t\n\t        // Load tree data if it's provided\n\t        if (options.data) {\n\t            _this.loadData(options.data);\n\t        }\n\t        return _this;\n\t    }\n\t\n\t    _createClass(InfiniteTree, [{\n\t        key: 'create',\n\t        value: function create() {\n\t            var infiniteTree = document.createElement('div');\n\t            infiniteTree.className = (0, _utils.classNames)('infinite-tree');\n\t            var infiniteTreeScroll = document.createElement('div');\n\t            infiniteTreeScroll.className = (0, _utils.classNames)('infinite-tree-scroll');\n\t            var infiniteTreeContent = document.createElement('div');\n\t            infiniteTreeContent.className = (0, _utils.classNames)('infinite-tree-content');\n\t\n\t            infiniteTreeScroll.appendChild(infiniteTreeContent);\n\t            infiniteTree.appendChild(infiniteTreeScroll);\n\t            this.options.el.appendChild(infiniteTree);\n\t\n\t            this.clusterize = new _clusterize2.default({\n\t                tag: 'div',\n\t                rows: [],\n\t                scrollElem: infiniteTreeScroll,\n\t                contentElem: infiniteTreeContent,\n\t                no_data_class: 'infinite-tree-no-data'\n\t            });\n\t\n\t            this.contentElement = infiniteTreeContent;\n\t            addEventListener(this.contentElement, 'click', this.contentListener);\n\t        }\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy() {\n\t            removeEventListener(this.contentElement, 'click', this.contentListener);\n\t\n\t            if (this.clusterize) {\n\t                this.clusterize.clear();\n\t                this.clusterize = null;\n\t            }\n\t\n\t            this.nodes = [];\n\t            this.rows = [];\n\t            this.state.openNodes = [];\n\t            this.state.selectedNode = null;\n\t\n\t            // Remove all child nodes\n\t            while (this.contentElement.firstChild) {\n\t                this.contentElement.removeChild(this.contentElement.firstChild);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'clear',\n\t        value: function clear() {\n\t            this.clusterize.clear();\n\t            this.nodes = [];\n\t            this.rows = [];\n\t            this.state.openNodes = [];\n\t            this.state.selectedNode = null;\n\t        }\n\t        // Updates list with new data\n\t\n\t    }, {\n\t        key: 'update',\n\t        value: function update() {\n\t            this.clusterize.update(this.rows);\n\t        }\n\t        // Add a new node after this existing node.\n\t        // @param {object} newNode\n\t        // @param {object} node\n\t\n\t    }, {\n\t        key: 'addNodeAfter',\n\t        value: function addNodeAfter(newNode, node) {}\n\t        // TODO\n\t\n\t        // Add a new node before this existing node.\n\t        // @param {object} newNode\n\t        // @param {object} node\n\t\n\t    }, {\n\t        key: 'addNodeBefore',\n\t        value: function addNodeBefore(newNode, node) {}\n\t        // TODO\n\t\n\t        // Add a new node as parent of this existing node.\n\t        // @param {object} newNode\n\t        // @param {object} node\n\t\n\t    }, {\n\t        key: 'addParentNode',\n\t        value: function addParentNode(newNode, node) {}\n\t        // TODO\n\t\n\t        // Add a node to this parent node. If parentNode is empty, then the new node becomes a root node.\n\t        // @param {object} newNode The new node\n\t        // @param {object} parentNode The parent node\n\t\n\t    }, {\n\t        key: 'appendNode',\n\t        value: function appendNode(newNode, parentNode) {}\n\t        // TODO\n\t\n\t        // Close this node. The node must have child nodes.\n\t        // @param {object} node\n\t        // @return {boolean} Returns true on success, false otherwise.\n\t\n\t    }, {\n\t        key: 'closeNode',\n\t        value: function closeNode(node) {\n\t            var rowRenderer = this.options.rowRenderer;\n\t\n\t            // Retrieve node index\n\t\n\t            var nodeIndex = this.nodes.indexOf(node);\n\t            if (nodeIndex < 0) {\n\t                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n\t            }\n\t\n\t            // Check if the closeNode action can be performed\n\t            if (this.state.openNodes.indexOf(node) < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n\t            if (this.state.selectedNode && this.state.selectedNode !== node) {\n\t                // Action:\n\t                //   close \"node.0.0\"\n\t                //\n\t                // Tree:\n\t                // [0] - node.0\n\t                // [1]  - node.0.0      => next selected node (index=1, total=2)\n\t                // [2]      node.0.0.0  => last selected node (index=2, total=0)\n\t                // [3]      node.0.0.1\n\t                // [4]    node.0.1\n\t                var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t                var rangeFrom = nodeIndex + 1;\n\t                var rangeTo = nodeIndex + node.state.total;\n\t\n\t                if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                    this.selectNode(node);\n\t                }\n\t            }\n\t\n\t            node.state.open = false; // Set node.state.open to false\n\t            var openNodes = this.state.openNodes.filter(function (node) {\n\t                return node.state.more && node.state.open;\n\t            });\n\t            this.state.openNodes = openNodes;\n\t\n\t            var deleteCount = node.state.total;\n\t\n\t            {\n\t                // Traversing up through ancestors to subtract node.state.total\n\t                var p = node;\n\t                while (p) {\n\t                    p.state.total = p.state.total - deleteCount;\n\t                    p = p.parent;\n\t                }\n\t            }\n\t\n\t            // Remove elements from an array\n\t            this.nodes.splice(nodeIndex + 1, deleteCount);\n\t            this.rows.splice(nodeIndex + 1, deleteCount);\n\t            this.rows[nodeIndex] = rowRenderer(node);\n\t\n\t            // Emit the 'tree.close' event\n\t            this.emit('tree.close', node);\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t\n\t            return true;\n\t        }\n\t        // Get a tree node by the unique node id. This assumes that you have given the nodes in the data a unique id.\n\t        // @param {string|number} id The unique node id. A null value will be returned if node.id not matched.\n\t\n\t    }, {\n\t        key: 'getNodeById',\n\t        value: function getNodeById(id) {\n\t            var node = (this.nodebucket[id] || [])[0];\n\t            return node !== undefined ? node : null;\n\t        }\n\t        // Get the selected node. Returns the row data or null.\n\t\n\t    }, {\n\t        key: 'getSelectedNode',\n\t        value: function getSelectedNode() {\n\t            return this.state.selectedNode;\n\t        }\n\t        // Get the state of the tree.\n\t        // @return {object} Returns an object that contains the ids of open nodes and selected nodes\n\t\n\t    }, {\n\t        key: 'getState',\n\t        value: function getState() {}\n\t        // TODO\n\t\n\t        // Get the root node of the tree.\n\t\n\t    }, {\n\t        key: 'getTree',\n\t        value: function getTree() {\n\t            var tree = this.nodes.length > 0 ? this.nodes[0] : null;\n\t            while (tree && tree.parent !== null) {\n\t                tree = tree.parent;\n\t            }\n\t            return tree;\n\t        }\n\t        // Load data in the tree.\n\t        // @param {object|array} data The data is a node object or array of nodes\n\t\n\t    }, {\n\t        key: 'loadData',\n\t        value: function loadData() {\n\t            var _this2 = this;\n\t\n\t            var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t            var _options = this.options;\n\t            var autoOpen = _options.autoOpen;\n\t            var rowRenderer = _options.rowRenderer;\n\t\n\t\n\t            this.nodes = (0, _flattree.flatten)(data, { openAllNodes: autoOpen });\n\t\n\t            // Construct node bucket\n\t            this.nodebucket = {};\n\t            this.nodes.forEach(function (node) {\n\t                if (node.id !== undefined) {\n\t                    var nodebucket = _this2.nodebucket[node.id];\n\t                    _this2.nodebucket[node.id] = nodebucket ? nodebucket.concat(node) : [node];\n\t                }\n\t            });\n\t\n\t            var openNodes = this.nodes.filter(function (node) {\n\t                return node.state.more && node.state.open;\n\t            });\n\t            this.state.openNodes = openNodes;\n\t            this.state.selectedNode = null;\n\t\n\t            this.rows = this.nodes.map(function (node) {\n\t                return rowRenderer(node);\n\t            });\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t        }\n\t        // Open this node. The node must have child nodes.\n\t        // @param {object} node\n\t        // @return {boolean} Returns true on success, false otherwise.\n\t\n\t    }, {\n\t        key: 'openNode',\n\t        value: function openNode(node) {\n\t            var rowRenderer = this.options.rowRenderer;\n\t\n\t            // Retrieve node index\n\t\n\t            var nodeIndex = this.nodes.indexOf(node);\n\t            if (nodeIndex < 0) {\n\t                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n\t            }\n\t\n\t            // Check if the openNode action can be performed\n\t            if (this.state.openNodes.indexOf(node) >= 0) {\n\t                return false;\n\t            }\n\t\n\t            node.state.open = true; // Set node.state.open to true\n\t            var openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n\t            this.state.openNodes = openNodes;\n\t\n\t            var nodes = (0, _flattree.flatten)(node.children, { openNodes: this.state.openNodes });\n\t            var rows = generateRows(nodes, rowRenderer);\n\t\n\t            // Insert an array inside another array\n\t            this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n\t            this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n\t            this.rows[nodeIndex] = generateRows([node], rowRenderer)[0];\n\t\n\t            // Emit the 'tree.open' event\n\t            this.emit('tree.open', node);\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t\n\t            return true;\n\t        }\n\t        // Remove node from the tree\n\t        // @param {object} node\n\t\n\t    }, {\n\t        key: 'removeNode',\n\t        value: function removeNode(node) {}\n\t        // TODO\n\t\n\t        // Scroll to this node.\n\t        // @param {object} node\n\t\n\t    }, {\n\t        key: 'scrollToNode',\n\t        value: function scrollToNode(node) {}\n\t        // TODO\n\t\n\t        // Select this node. You can deselect the current node by calling selectNode(null) or selectNode().\n\t        // @param {object} node\n\t        // @return {boolean} Returns true on success, false otherwise.\n\t\n\t    }, {\n\t        key: 'selectNode',\n\t        value: function selectNode() {\n\t            var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t            var rowRenderer = this.options.rowRenderer;\n\t\n\t\n\t            if (node === null) {\n\t                // Deselect the current node\n\t                if (this.state.selectedNode) {\n\t                    var selectedNode = this.state.selectedNode;\n\t                    var selectedIndex = this.nodes.indexOf(selectedNode);\n\t\n\t                    selectedNode.state.selected = false;\n\t                    this.rows[selectedIndex] = rowRenderer(selectedNode);\n\t                    this.state.selectedNode = null;\n\t\n\t                    // Emit the 'tree.select' event\n\t                    this.emit('tree.select', null);\n\t\n\t                    // Updates list with new data\n\t                    this.update();\n\t\n\t                    return true;\n\t                }\n\t\n\t                return false;\n\t            }\n\t\n\t            // Retrieve node index\n\t            var nodeIndex = this.nodes.indexOf(node);\n\t            if (nodeIndex < 0) {\n\t                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n\t            }\n\t\n\t            // Select this node\n\t            if (this.state.selectedNode !== node) {\n\t                node.state.selected = true;\n\t                this.rows[nodeIndex] = rowRenderer(node);\n\t            }\n\t\n\t            // Deselect the current node\n\t            if (this.state.selectedNode) {\n\t                var _selectedNode = this.state.selectedNode;\n\t                var _selectedIndex = this.nodes.indexOf(_selectedNode);\n\t                _selectedNode.state.selected = false;\n\t                this.rows[_selectedIndex] = rowRenderer(_selectedNode);\n\t            }\n\t\n\t            if (this.state.selectedNode !== node) {\n\t                this.state.selectedNode = node;\n\t\n\t                // Emit the 'tree.select' event\n\t                this.emit('tree.select', node);\n\t            } else {\n\t                this.state.selectedNode = null;\n\t\n\t                // Emit the 'tree.select' event\n\t                this.emit('tree.select', null);\n\t            }\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t\n\t            return true;\n\t        }\n\t        // Set the state of the tree. See getState for more information.\n\t        // @param {object} state The state object\n\t        // @param {string} [state.openNodes] The ids of open nodes\n\t        // @param {string} [state.selectedNode] The id of selected node\n\t\n\t    }, {\n\t        key: 'setState',\n\t        value: function setState() {\n\t            var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t        }\n\t        // TODO\n\t\n\t        // Open or close this node.\n\t\n\t    }, {\n\t        key: 'toggle',\n\t        value: function toggle(node) {}\n\t        // TODO\n\t\n\t        // Get the tree data as string.\n\t\n\t    }, {\n\t        key: 'toString',\n\t        value: function toString() {}\n\t        // TODO\n\t\n\t        // Update the title of a node. You can also update the data.\n\t        // @param {object} node\n\t        // @param {object} data The data object\n\t        // @param {object} [data.label] The title of a node\n\t\n\t    }, {\n\t        key: 'updateNode',\n\t        value: function updateNode(node, data) {\n\t            // TODO\n\t        }\n\t    }]);\n\t\n\t    return InfiniteTree;\n\t}(_events2.default.EventEmitter);\n\t\n\tmodule.exports = InfiniteTree;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      }\n\t      throw TypeError('Uncaught, unspecified \"error\" event.');\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n\t* http://NeXTs.github.com/Clusterize.js/\r\n\t* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\t\r\n\t;(function(name, definition) {\r\n\t    if (true) module.exports = definition();\r\n\t    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n\t    else this[name] = definition();\r\n\t}('Clusterize', function() {\r\n\t  \"use strict\"\r\n\t\r\n\t  // detect ie9 and lower\r\n\t  // https://gist.github.com/padolsey/527683#comment-786682\r\n\t  var ie = (function(){\r\n\t    for( var v = 3,\r\n\t             el = document.createElement('b'),\r\n\t             all = el.all || [];\r\n\t         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n\t         all[0];\r\n\t       ){}\r\n\t    return v > 4 ? v : document.documentMode;\r\n\t  }()),\r\n\t  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n\t  var Clusterize = function(data) {\r\n\t    if( ! (this instanceof Clusterize))\r\n\t      return new Clusterize(data);\r\n\t    var self = this;\r\n\t\r\n\t    var defaults = {\r\n\t      item_height: 0,\r\n\t      block_height: 0,\r\n\t      rows_in_block: 50,\r\n\t      rows_in_cluster: 0,\r\n\t      cluster_height: 0,\r\n\t      blocks_in_cluster: 4,\r\n\t      tag: null,\r\n\t      content_tag: null,\r\n\t      show_no_data_row: true,\r\n\t      no_data_class: 'clusterize-no-data',\r\n\t      no_data_text: 'No data',\r\n\t      keep_parity: true,\r\n\t      callbacks: {},\r\n\t      scroll_top: 0\r\n\t    }\r\n\t\r\n\t    // public parameters\r\n\t    self.options = {};\r\n\t    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n\t    for(var i = 0, option; option = options[i]; i++) {\r\n\t      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n\t        ? data[option]\r\n\t        : defaults[option];\r\n\t    }\r\n\t\r\n\t    var elems = ['scroll', 'content'];\r\n\t    for(var i = 0, elem; elem = elems[i]; i++) {\r\n\t      self[elem + '_elem'] = data[elem + 'Id']\r\n\t        ? document.getElementById(data[elem + 'Id'])\r\n\t        : data[elem + 'Elem'];\r\n\t      if( ! self[elem + '_elem'])\r\n\t        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n\t    }\r\n\t\r\n\t    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n\t    if( ! self.content_elem.hasAttribute('tabindex'))\r\n\t      self.content_elem.setAttribute('tabindex', 0);\r\n\t\r\n\t    // private parameters\r\n\t    var rows = isArray(data.rows)\r\n\t        ? data.rows\r\n\t        : self.fetchMarkup(),\r\n\t      cache = {data: '', bottom: 0},\r\n\t      scroll_top = self.scroll_elem.scrollTop;\r\n\t\r\n\t    // get row height\r\n\t    self.exploreEnvironment(rows);\r\n\t\r\n\t    // append initial data\r\n\t    self.insertToDOM(rows, cache);\r\n\t\r\n\t    // restore the scroll position\r\n\t    self.scroll_elem.scrollTop = scroll_top;\r\n\t\r\n\t    // adding scroll handler\r\n\t    var last_cluster = false,\r\n\t    scroll_debounce = 0,\r\n\t    pointer_events_set = false,\r\n\t    scrollEv = function() {\r\n\t      // fixes scrolling issue on Mac #3\r\n\t      if (is_mac) {\r\n\t          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n\t          pointer_events_set = true;\r\n\t          clearTimeout(scroll_debounce);\r\n\t          scroll_debounce = setTimeout(function () {\r\n\t              self.content_elem.style.pointerEvents = 'auto';\r\n\t              pointer_events_set = false;\r\n\t          }, 50);\r\n\t      }\r\n\t      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n\t        self.insertToDOM(rows, cache);\r\n\t      if (self.options.callbacks.scrollingProgress)\r\n\t        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n\t    },\r\n\t    resize_debounce = 0,\r\n\t    resizeEv = function() {\r\n\t      clearTimeout(resize_debounce);\r\n\t      resize_debounce = setTimeout(self.refresh, 100);\r\n\t    }\r\n\t    on('scroll', self.scroll_elem, scrollEv);\r\n\t    on('resize', window, resizeEv);\r\n\t\r\n\t    // public methods\r\n\t    self.destroy = function(clean) {\r\n\t      off('scroll', self.scroll_elem, scrollEv);\r\n\t      off('resize', window, resizeEv);\r\n\t      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n\t    }\r\n\t    self.refresh = function() {\r\n\t      self.getRowsHeight(rows) && self.update(rows);\r\n\t    }\r\n\t    self.update = function(new_rows) {\r\n\t      rows = isArray(new_rows)\r\n\t        ? new_rows\r\n\t        : [];\r\n\t      var scroll_top = self.scroll_elem.scrollTop;\r\n\t      // fixes #39\r\n\t      if(rows.length * self.options.item_height < scroll_top) {\r\n\t        self.scroll_elem.scrollTop = 0;\r\n\t        last_cluster = 0;\r\n\t      }\r\n\t      self.insertToDOM(rows, cache);\r\n\t      self.scroll_elem.scrollTop = scroll_top;\r\n\t    }\r\n\t    self.clear = function() {\r\n\t      self.update([]);\r\n\t    }\r\n\t    self.getRowsAmount = function() {\r\n\t      return rows.length;\r\n\t    }\r\n\t    self.getScrollProgress = function() {\r\n\t      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n\t    }\r\n\t\r\n\t    var add = function(where, _new_rows) {\r\n\t      var new_rows = isArray(_new_rows)\r\n\t        ? _new_rows\r\n\t        : [];\r\n\t      if( ! new_rows.length) return;\r\n\t      rows = where == 'append'\r\n\t        ? rows.concat(new_rows)\r\n\t        : new_rows.concat(rows);\r\n\t      self.insertToDOM(rows, cache);\r\n\t    }\r\n\t    self.append = function(rows) {\r\n\t      add('append', rows);\r\n\t    }\r\n\t    self.prepend = function(rows) {\r\n\t      add('prepend', rows);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  Clusterize.prototype = {\r\n\t    constructor: Clusterize,\r\n\t    // fetch existing markup\r\n\t    fetchMarkup: function() {\r\n\t      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n\t      while (rows_nodes.length) {\r\n\t        rows.push(rows_nodes.shift().outerHTML);\r\n\t      }\r\n\t      return rows;\r\n\t    },\r\n\t    // get tag name, content tag name, tag height, calc cluster height\r\n\t    exploreEnvironment: function(rows) {\r\n\t      var opts = this.options;\r\n\t      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n\t      if( ! rows.length) return;\r\n\t      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n\t      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n\t      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n\t      this.getRowsHeight(rows);\r\n\t    },\r\n\t    getRowsHeight: function(rows) {\r\n\t      var opts = this.options,\r\n\t        prev_item_height = opts.item_height;\r\n\t      opts.cluster_height = 0\r\n\t      if( ! rows.length) return;\r\n\t      var nodes = this.content_elem.children;\r\n\t      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n\t      // consider table's border-spacing\r\n\t      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n\t        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n\t      opts.block_height = opts.item_height * opts.rows_in_block;\r\n\t      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n\t      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n\t      return prev_item_height != opts.item_height;\r\n\t    },\r\n\t    // get current cluster number\r\n\t    getClusterNum: function () {\r\n\t      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n\t      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n\t    },\r\n\t    // generate empty row if no data provided\r\n\t    generateEmptyRow: function() {\r\n\t      var opts = this.options;\r\n\t      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n\t      var empty_row = document.createElement(opts.tag),\r\n\t        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n\t      empty_row.className = opts.no_data_class;\r\n\t      if(opts.tag == 'tr') {\r\n\t        td = document.createElement('td');\r\n\t        td.appendChild(no_data_content);\r\n\t      }\r\n\t      empty_row.appendChild(td || no_data_content);\r\n\t      return [empty_row.outerHTML];\r\n\t    },\r\n\t    // generate cluster for current scroll position\r\n\t    generate: function (rows, cluster_num) {\r\n\t      var opts = this.options,\r\n\t        rows_len = rows.length;\r\n\t      if (rows_len < opts.rows_in_block) {\r\n\t        return {\r\n\t          top_offset: 0,\r\n\t          bottom_offset: 0,\r\n\t          rows_above: 0,\r\n\t          rows: rows_len ? rows : this.generateEmptyRow()\r\n\t        }\r\n\t      }\r\n\t      if( ! opts.cluster_height) {\r\n\t        this.exploreEnvironment(rows);\r\n\t      }\r\n\t      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n\t        items_end = items_start + opts.rows_in_cluster,\r\n\t        top_offset = Math.max(items_start * opts.item_height, 0),\r\n\t        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n\t        this_cluster_rows = [],\r\n\t        rows_above = items_start;\r\n\t      if(top_offset < 1) {\r\n\t        rows_above++;\r\n\t      }\r\n\t      for (var i = items_start; i < items_end; i++) {\r\n\t        rows[i] && this_cluster_rows.push(rows[i]);\r\n\t      }\r\n\t      return {\r\n\t        top_offset: top_offset,\r\n\t        bottom_offset: bottom_offset,\r\n\t        rows_above: rows_above,\r\n\t        rows: this_cluster_rows\r\n\t      }\r\n\t    },\r\n\t    renderExtraTag: function(class_name, height) {\r\n\t      var tag = document.createElement(this.options.tag),\r\n\t        clusterize_prefix = 'clusterize-';\r\n\t      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n\t      height && (tag.style.height = height + 'px');\r\n\t      return tag.outerHTML;\r\n\t    },\r\n\t    // if necessary verify data changed and insert to DOM\r\n\t    insertToDOM: function(rows, cache) {\r\n\t      var data = this.generate(rows, this.getClusterNum()),\r\n\t        this_cluster_rows = data.rows.join(''),\r\n\t        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n\t        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n\t        callbacks = this.options.callbacks,\r\n\t        layout = [];\r\n\t\r\n\t      if(this_cluster_content_changed) {\r\n\t        if(data.top_offset) {\r\n\t          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n\t          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n\t        }\r\n\t        layout.push(this_cluster_rows);\r\n\t        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n\t        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n\t        this.html(layout.join(''));\r\n\t        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n\t        callbacks.clusterChanged && callbacks.clusterChanged();\r\n\t      } else if(only_bottom_offset_changed) {\r\n\t        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n\t      }\r\n\t    },\r\n\t    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n\t    html: function(data) {\r\n\t      var content_elem = this.content_elem;\r\n\t      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n\t        var div = document.createElement('div'), last;\r\n\t        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n\t        while((last = content_elem.lastChild)) {\r\n\t          content_elem.removeChild(last);\r\n\t        }\r\n\t        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n\t        while (rows_nodes.length) {\r\n\t          content_elem.appendChild(rows_nodes.shift());\r\n\t        }\r\n\t      } else {\r\n\t        content_elem.innerHTML = data;\r\n\t      }\r\n\t    },\r\n\t    getChildNodes: function(tag) {\r\n\t        var child_nodes = tag.children, nodes = [];\r\n\t        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n\t            nodes.push(child_nodes[i]);\r\n\t        }\r\n\t        return nodes;\r\n\t    },\r\n\t    checkChanges: function(type, value, cache) {\r\n\t      var changed = value != cache[type];\r\n\t      cache[type] = value;\r\n\t      return changed;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  // support functions\r\n\t  function on(evt, element, fnc) {\r\n\t    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function off(evt, element, fnc) {\r\n\t    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function isArray(arr) {\r\n\t    return Object.prototype.toString.call(arr) === '[object Array]';\r\n\t  }\r\n\t  function getStyle(prop, elem) {\r\n\t    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n\t  }\r\n\t\r\n\t  return Clusterize;\r\n\t}));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    sources.forEach(function (source) {\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)) {\n\t                target[key] = source[key];\n\t            }\n\t        }\n\t    });\n\t\n\t    return target;\n\t};\n\t\n\t// @param {object|array} nodes The tree nodes\n\t// @param {object} [options] The options object\n\t// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n\t// @param {array} [options.openNodes] An array that contains the ids of open nodes\n\t// @return {array}\n\tvar flatten = function flatten() {\n\t    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    nodes = [].concat(nodes);\n\t\n\t    var flatten = [];\n\t    var stack = [];\n\t    var pool = {\n\t        lastChild: {}\n\t    };\n\t\n\t    options.openAllNodes = !!options.openAllNodes;\n\t    options.openNodes = options.openNodes || [];\n\t    options.throwOnError = !!options.throwOnError;\n\t\n\t    {\n\t        // root node\n\t        var firstNode = nodes.length > 0 ? nodes[0] : null;\n\t        var parent = firstNode ? firstNode.parent : null;\n\t        var index = 0;\n\t        var root = parent || { // defaults\n\t            label: '',\n\t            parent: null,\n\t            children: nodes,\n\t            state: {\n\t                depth: -1,\n\t                path: '',\n\t                total: 0\n\t            }\n\t        };\n\t\n\t        if (root === parent) {\n\t            var subtotal = root.state.total || 0;\n\t\n\t            // Traversing up through its ancestors\n\t            var p = root;\n\t            while (p) {\n\t                var _p$state = p.state;\n\t                var path = _p$state.path;\n\t                var lastChild = _p$state.lastChild;\n\t                var _p$state$total = _p$state.total;\n\t                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\t\n\t                // Rebuild the lastChild pool\n\t\n\t                if (path && lastChild) {\n\t                    pool.lastChild[path] = true;\n\t                }\n\t\n\t                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n\t                p.state.total = total - subtotal;\n\t                if (p.state.total < 0) {\n\t                    if (options.throwOnError) {\n\t                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n\t                    } else {\n\t                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n\t                    }\n\t                }\n\t\n\t                p = p.parent;\n\t            }\n\t        }\n\t\n\t        stack.push([root, root.state.depth, index]);\n\t    }\n\t\n\t    while (stack.length > 0) {\n\t        var _stack$pop = stack.pop();\n\t\n\t        var _stack$pop2 = _slicedToArray(_stack$pop, 3);\n\t\n\t        var current = _stack$pop2[0];\n\t        var depth = _stack$pop2[1];\n\t        var _index = _stack$pop2[2];\n\t\n\t        var _loop = function _loop() {\n\t            var node = current.children[_index];\n\t            node.parent = current;\n\t            node.children = node.children || [];\n\t\n\t            var path = current.state.path + '.' + _index;\n\t            var more = Object.keys(node.children).length > 0;\n\t            var open = more && function () {\n\t                var openAllNodes = options.openAllNodes;\n\t                var openNodes = options.openNodes;\n\t\n\t                if (openAllNodes) {\n\t                    return true;\n\t                }\n\t                // determine by node object\n\t                if (openNodes.indexOf(node) >= 0) {\n\t                    return true;\n\t                }\n\t                // determine by node id\n\t                if (openNodes.indexOf(node.id) >= 0) {\n\t                    return true;\n\t                }\n\t                return false;\n\t            }();\n\t            var lastChild = _index === current.children.length - 1;\n\t            var prefixMask = function (prefix) {\n\t                var mask = '';\n\t                while (prefix.length > 0) {\n\t                    prefix = prefix.replace(/\\.\\d+$/, '');\n\t                    if (!prefix || pool.lastChild[prefix]) {\n\t                        mask = '0' + mask;\n\t                    } else {\n\t                        mask = '1' + mask;\n\t                    }\n\t                }\n\t                return mask;\n\t            }(path);\n\t\n\t            if (lastChild) {\n\t                pool.lastChild[path] = true;\n\t            }\n\t\n\t            // This allows you to put extra information to node.state\n\t            node.state = extend({}, node.state, {\n\t                depth: depth + 1,\n\t                lastChild: lastChild,\n\t                more: more,\n\t                open: open,\n\t                path: path,\n\t                prefixMask: prefixMask,\n\t                total: 0\n\t            });\n\t\n\t            {\n\t                // Traversing up through its ancestors and update the total number of child nodes\n\t                var _p = node;\n\t                while (_p.parent !== null) {\n\t                    _p.parent.state.total++;\n\t                    _p = _p.parent;\n\t                }\n\t            }\n\t\n\t            flatten.push(node);\n\t\n\t            ++_index;\n\t\n\t            if (more && !open) {\n\t                return 'continue';\n\t            }\n\t\n\t            if (more) {\n\t                // Push back parent node to the stack that will be able to continue\n\t                // the next iteration once all the child nodes of the current node\n\t                // have been completely explored.\n\t                stack.push([current, depth, _index]);\n\t\n\t                _index = 0;\n\t                depth = depth + 1;\n\t                current = node;\n\t            }\n\t        };\n\t\n\t        while (_index < current.children.length) {\n\t            var _ret = _loop();\n\t\n\t            if (_ret === 'continue') continue;\n\t        }\n\t    }\n\t\n\t    return flatten;\n\t};\n\t\n\texports.flatten = flatten;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.defaultRowRenderer = undefined;\n\t\n\tvar _utils = __webpack_require__(5);\n\t\n\tvar defaultRowRenderer = function defaultRowRenderer(node) {\n\t    var id = node.id;\n\t    var label = node.label;\n\t    var state = node.state;\n\t    var depth = state.depth;\n\t    var more = state.more;\n\t    var open = state.open;\n\t    var path = state.path;\n\t    var children = state.children;\n\t    var total = state.total;\n\t    var _state$selected = state.selected;\n\t    var selected = _state$selected === undefined ? false : _state$selected;\n\t\n\t\n\t    var togglerContent = '';\n\t    if (more && open) {\n\t        togglerContent = '▼';\n\t    }\n\t    if (more && !open) {\n\t        togglerContent = '►';\n\t    }\n\t    var toggler = (0, _utils.buildHTML)('a', togglerContent, {\n\t        'class': function () {\n\t            if (more && open) {\n\t                return (0, _utils.classNames)('tree-toggler');\n\t            }\n\t            if (more && !open) {\n\t                return (0, _utils.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            return '';\n\t        }()\n\t    });\n\t    var title = (0, _utils.buildHTML)('span', (0, _utils.quoteattr)(label), {\n\t        'class': (0, _utils.classNames)('tree-title')\n\t    });\n\t    var treeNode = (0, _utils.buildHTML)('div', toggler + title, {\n\t        'class': 'tree-node',\n\t        'style': 'margin-left: ' + depth * 12 + 'px'\n\t    });\n\t    var treeItem = (0, _utils.buildHTML)('div', treeNode, {\n\t        'aria-id': id,\n\t        'aria-expanded': more && open,\n\t        'aria-depth': depth,\n\t        'aria-path': path,\n\t        'aria-selected': selected,\n\t        'aria-children': children ? Object.keys(children).length : 0,\n\t        'aria-total': total,\n\t        'class': (0, _utils.classNames)('tree-item', { 'tree-selected': selected })\n\t    });\n\t\n\t    return treeItem;\n\t};\n\t\n\texports.defaultRowRenderer = defaultRowRenderer;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\t/**\n\t * Example #1:\n\t * =========================================================================\n\t * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n\t *\n\t * buildHTML('a', 'My Mail', {\n\t *     id: 'mymail',\n\t *     href: 'http://mymail.example.com'\n\t * });\n\t *\n\t * Example #2:\n\t * =========================================================================\n\t * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n\t *\n\t * buildHTML('input', {\n\t *   id: 'myinput',\n\t *   type: 'text',\n\t *   value: 'myvalue'\n\t * });\n\t *\n\t */\n\tvar buildHTML = function buildHTML(tag, html, attrs) {\n\t    switch (tag) {\n\t        case 'select':\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                var options = html || {};\n\t                html = '';\n\t                for (var value in options) {\n\t                    if (!options.hasOwnProperty(value)) {\n\t                        continue;\n\t                    }\n\t                    html += buildHTML('option', options[value] || '', { value: value });\n\t                }\n\t            }\n\t            break;\n\t\n\t        default:\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                attrs = html;\n\t                html = undefined;\n\t            }\n\t            break;\n\t    }\n\t\n\t    var h = '<' + tag;\n\t    for (var attr in attrs) {\n\t        if (!attrs.hasOwnProperty(attr)) {\n\t            continue;\n\t        }\n\t        if (typeof attrs[attr] !== 'undefined') {\n\t            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n\t        }\n\t    }\n\t    h += typeof html !== 'undefined' ? '>' + html + '</' + tag + '>' : '/>';\n\t\n\t    return h;\n\t};\n\t\n\tvar classNames = function classNames() {\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t    }\n\t\n\t    var classNames = [];\n\t    args.forEach(function (arg) {\n\t        if (Array.isArray(arg)) {\n\t            classNames = classNames.concat(arg);\n\t        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n\t            Object.keys(arg).forEach(function (className) {\n\t                var ok = arg[className];\n\t                if (!!ok) {\n\t                    classNames.push(className);\n\t                }\n\t            });\n\t        } else {\n\t            classNames.push(arg);\n\t        }\n\t    });\n\t    return classNames.join(' ');\n\t};\n\t\n\t/**\n\t * The quoteattr() function is used in a context, where the result will not be evaluated by javascript but must be interpreted by an XML or HTML parser, and it must absolutely avoid breaking the syntax of an element attribute.\n\t */\n\tvar quoteattr = function quoteattr(s, preserveCR) {\n\t    preserveCR = preserveCR ? '&#13;' : '\\n';\n\t    return ('' + s). /* Forces the conversion to string. */\n\t    replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n\t    .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n\t    .replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\t    /*\n\t     * You may add other replacements here for HTML only\n\t     * (but it's not necessary).\n\t     * Or for XML, only if the named entities are defined in its DTD.\n\t     */\n\t    .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n\t    .replace(/[\\r\\n]/g, preserveCR);\n\t};\n\t\n\texports.buildHTML = buildHTML;\n\texports.classNames = classNames;\n\texports.quoteattr = quoteattr;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** infinite-tree.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8714f1542fde7550fe84\n **/","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _clusterize = require('clusterize.js');\n\nvar _clusterize2 = _interopRequireDefault(_clusterize);\n\nvar _flattree = require('flattree');\n\nvar _renderer = require('./renderer');\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar extend = function extend(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    sources.forEach(function (source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n    });\n\n    return target;\n};\n\nvar addEventListener = function addEventListener(target, type, listener) {\n    if (target.attachEvent) {\n        return target.attachEvent('on' + type, listener);\n    } else {\n        return target.addEventListener(type, listener, false);\n    }\n};\n\nvar removeEventListener = function removeEventListener(target, type, listener) {\n    if (target.detachEvent) {\n        return target.detachEvent('on' + type, listener);\n    } else {\n        return target.removeEventListener(type, listener, false);\n    }\n};\n\nvar stopPropagation = function stopPropagation(evt) {\n    if (typeof evt.stopPropagation !== 'undefined') {\n        evt.stopPropagation();\n    } else {\n        evt.cancelBubble = true;\n    }\n};\n\nvar generateRows = function generateRows() {\n    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var rowRenderer = arguments.length <= 1 || arguments[1] === undefined ? _renderer.defaultRowRenderer : arguments[1];\n\n    return nodes.map(function (node) {\n        return rowRenderer(node);\n    });\n};\n\nvar InfiniteTree = function (_events$EventEmitter) {\n    _inherits(InfiniteTree, _events$EventEmitter);\n\n    function InfiniteTree() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        _classCallCheck(this, InfiniteTree);\n\n        // Assign options\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InfiniteTree).call(this));\n\n        _this.options = {\n            autoOpen: false,\n            el: null,\n            rowRenderer: _renderer.defaultRowRenderer\n        };\n        _this.state = {\n            openNodes: [],\n            selectedNode: null\n        };\n        _this.clusterize = null;\n        _this.nodebucket = {};\n        _this.nodes = [];\n        _this.rows = [];\n        _this.contentElement = null;\n\n        _this.contentListener = function (evt) {\n            var target = evt.target;\n            var currentTarget = evt.currentTarget;\n\n\n            stopPropagation(evt);\n\n            if (target !== currentTarget) {\n                var itemTarget = target;\n\n                while (itemTarget && itemTarget.parentElement !== currentTarget) {\n                    itemTarget = itemTarget.parentElement;\n                }\n\n                var id = itemTarget.getAttribute('aria-id');\n                var node = _this.getNodeById(id);\n\n                // Click on the toggler to open/close a tree node\n                if (target.className.indexOf('tree-toggler') >= 0) {\n                    if (_this.state.openNodes.indexOf(node) >= 0) {\n                        // Close node\n                        _this.closeNode(node);\n                    } else {\n                        _this.openNode(node);\n                    }\n                } else {\n                    _this.selectNode(node);\n                }\n            }\n        };\n\n        _this.options = extend({}, _this.options, options);\n\n        if (!_this.options.el) {\n            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n            return _possibleConstructorReturn(_this);\n        }\n\n        _this.create();\n\n        // Load tree data if it's provided\n        if (options.data) {\n            _this.loadData(options.data);\n        }\n        return _this;\n    }\n\n    _createClass(InfiniteTree, [{\n        key: 'create',\n        value: function create() {\n            var infiniteTree = document.createElement('div');\n            infiniteTree.className = (0, _utils.classNames)('infinite-tree');\n            var infiniteTreeScroll = document.createElement('div');\n            infiniteTreeScroll.className = (0, _utils.classNames)('infinite-tree-scroll');\n            var infiniteTreeContent = document.createElement('div');\n            infiniteTreeContent.className = (0, _utils.classNames)('infinite-tree-content');\n\n            infiniteTreeScroll.appendChild(infiniteTreeContent);\n            infiniteTree.appendChild(infiniteTreeScroll);\n            this.options.el.appendChild(infiniteTree);\n\n            this.clusterize = new _clusterize2.default({\n                tag: 'div',\n                rows: [],\n                scrollElem: infiniteTreeScroll,\n                contentElem: infiniteTreeContent,\n                no_data_class: 'infinite-tree-no-data'\n            });\n\n            this.contentElement = infiniteTreeContent;\n            addEventListener(this.contentElement, 'click', this.contentListener);\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            removeEventListener(this.contentElement, 'click', this.contentListener);\n\n            if (this.clusterize) {\n                this.clusterize.clear();\n                this.clusterize = null;\n            }\n\n            this.nodes = [];\n            this.rows = [];\n            this.state.openNodes = [];\n            this.state.selectedNode = null;\n\n            // Remove all child nodes\n            while (this.contentElement.firstChild) {\n                this.contentElement.removeChild(this.contentElement.firstChild);\n            }\n        }\n    }, {\n        key: 'clear',\n        value: function clear() {\n            this.clusterize.clear();\n            this.nodes = [];\n            this.rows = [];\n            this.state.openNodes = [];\n            this.state.selectedNode = null;\n        }\n        // Updates list with new data\n\n    }, {\n        key: 'update',\n        value: function update() {\n            this.clusterize.update(this.rows);\n        }\n        // Add a new node after this existing node.\n        // @param {object} newNode\n        // @param {object} node\n\n    }, {\n        key: 'addNodeAfter',\n        value: function addNodeAfter(newNode, node) {}\n        // TODO\n\n        // Add a new node before this existing node.\n        // @param {object} newNode\n        // @param {object} node\n\n    }, {\n        key: 'addNodeBefore',\n        value: function addNodeBefore(newNode, node) {}\n        // TODO\n\n        // Add a new node as parent of this existing node.\n        // @param {object} newNode\n        // @param {object} node\n\n    }, {\n        key: 'addParentNode',\n        value: function addParentNode(newNode, node) {}\n        // TODO\n\n        // Add a node to this parent node. If parentNode is empty, then the new node becomes a root node.\n        // @param {object} newNode The new node\n        // @param {object} parentNode The parent node\n\n    }, {\n        key: 'appendNode',\n        value: function appendNode(newNode, parentNode) {}\n        // TODO\n\n        // Close this node. The node must have child nodes.\n        // @param {object} node\n        // @return {boolean} Returns true on success, false otherwise.\n\n    }, {\n        key: 'closeNode',\n        value: function closeNode(node) {\n            var rowRenderer = this.options.rowRenderer;\n\n            // Retrieve node index\n\n            var nodeIndex = this.nodes.indexOf(node);\n            if (nodeIndex < 0) {\n                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n            }\n\n            // Check if the closeNode action can be performed\n            if (this.state.openNodes.indexOf(node) < 0) {\n                return false;\n            }\n\n            // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n            if (this.state.selectedNode && this.state.selectedNode !== node) {\n                // Action:\n                //   close \"node.0.0\"\n                //\n                // Tree:\n                // [0] - node.0\n                // [1]  - node.0.0      => next selected node (index=1, total=2)\n                // [2]      node.0.0.0  => last selected node (index=2, total=0)\n                // [3]      node.0.0.1\n                // [4]    node.0.1\n                var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n                var rangeFrom = nodeIndex + 1;\n                var rangeTo = nodeIndex + node.state.total;\n\n                if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n                    this.selectNode(node);\n                }\n            }\n\n            node.state.open = false; // Set node.state.open to false\n            var openNodes = this.state.openNodes.filter(function (node) {\n                return node.state.more && node.state.open;\n            });\n            this.state.openNodes = openNodes;\n\n            var deleteCount = node.state.total;\n\n            {\n                // Traversing up through ancestors to subtract node.state.total\n                var p = node;\n                while (p) {\n                    p.state.total = p.state.total - deleteCount;\n                    p = p.parent;\n                }\n            }\n\n            // Remove elements from an array\n            this.nodes.splice(nodeIndex + 1, deleteCount);\n            this.rows.splice(nodeIndex + 1, deleteCount);\n            this.rows[nodeIndex] = rowRenderer(node);\n\n            // Emit the 'tree.close' event\n            this.emit('tree.close', node);\n\n            // Updates list with new data\n            this.update();\n\n            return true;\n        }\n        // Get a tree node by the unique node id. This assumes that you have given the nodes in the data a unique id.\n        // @param {string|number} id The unique node id. A null value will be returned if node.id not matched.\n\n    }, {\n        key: 'getNodeById',\n        value: function getNodeById(id) {\n            var node = (this.nodebucket[id] || [])[0];\n            return node !== undefined ? node : null;\n        }\n        // Get the selected node. Returns the row data or null.\n\n    }, {\n        key: 'getSelectedNode',\n        value: function getSelectedNode() {\n            return this.state.selectedNode;\n        }\n        // Get the state of the tree.\n        // @return {object} Returns an object that contains the ids of open nodes and selected nodes\n\n    }, {\n        key: 'getState',\n        value: function getState() {}\n        // TODO\n\n        // Get the root node of the tree.\n\n    }, {\n        key: 'getTree',\n        value: function getTree() {\n            var tree = this.nodes.length > 0 ? this.nodes[0] : null;\n            while (tree && tree.parent !== null) {\n                tree = tree.parent;\n            }\n            return tree;\n        }\n        // Load data in the tree.\n        // @param {object|array} data The data is a node object or array of nodes\n\n    }, {\n        key: 'loadData',\n        value: function loadData() {\n            var _this2 = this;\n\n            var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n            var _options = this.options;\n            var autoOpen = _options.autoOpen;\n            var rowRenderer = _options.rowRenderer;\n\n\n            this.nodes = (0, _flattree.flatten)(data, { openAllNodes: autoOpen });\n\n            // Construct node bucket\n            this.nodebucket = {};\n            this.nodes.forEach(function (node) {\n                if (node.id !== undefined) {\n                    var nodebucket = _this2.nodebucket[node.id];\n                    _this2.nodebucket[node.id] = nodebucket ? nodebucket.concat(node) : [node];\n                }\n            });\n\n            var openNodes = this.nodes.filter(function (node) {\n                return node.state.more && node.state.open;\n            });\n            this.state.openNodes = openNodes;\n            this.state.selectedNode = null;\n\n            this.rows = this.nodes.map(function (node) {\n                return rowRenderer(node);\n            });\n\n            // Updates list with new data\n            this.update();\n        }\n        // Open this node. The node must have child nodes.\n        // @param {object} node\n        // @return {boolean} Returns true on success, false otherwise.\n\n    }, {\n        key: 'openNode',\n        value: function openNode(node) {\n            var rowRenderer = this.options.rowRenderer;\n\n            // Retrieve node index\n\n            var nodeIndex = this.nodes.indexOf(node);\n            if (nodeIndex < 0) {\n                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n            }\n\n            // Check if the openNode action can be performed\n            if (this.state.openNodes.indexOf(node) >= 0) {\n                return false;\n            }\n\n            node.state.open = true; // Set node.state.open to true\n            var openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n            this.state.openNodes = openNodes;\n\n            var nodes = (0, _flattree.flatten)(node.children, { openNodes: this.state.openNodes });\n            var rows = generateRows(nodes, rowRenderer);\n\n            // Insert an array inside another array\n            this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n            this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n            this.rows[nodeIndex] = generateRows([node], rowRenderer)[0];\n\n            // Emit the 'tree.open' event\n            this.emit('tree.open', node);\n\n            // Updates list with new data\n            this.update();\n\n            return true;\n        }\n        // Remove node from the tree\n        // @param {object} node\n\n    }, {\n        key: 'removeNode',\n        value: function removeNode(node) {}\n        // TODO\n\n        // Scroll to this node.\n        // @param {object} node\n\n    }, {\n        key: 'scrollToNode',\n        value: function scrollToNode(node) {}\n        // TODO\n\n        // Select this node. You can deselect the current node by calling selectNode(null) or selectNode().\n        // @param {object} node\n        // @return {boolean} Returns true on success, false otherwise.\n\n    }, {\n        key: 'selectNode',\n        value: function selectNode() {\n            var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n            var rowRenderer = this.options.rowRenderer;\n\n\n            if (node === null) {\n                // Deselect the current node\n                if (this.state.selectedNode) {\n                    var selectedNode = this.state.selectedNode;\n                    var selectedIndex = this.nodes.indexOf(selectedNode);\n\n                    selectedNode.state.selected = false;\n                    this.rows[selectedIndex] = rowRenderer(selectedNode);\n                    this.state.selectedNode = null;\n\n                    // Emit the 'tree.select' event\n                    this.emit('tree.select', null);\n\n                    // Updates list with new data\n                    this.update();\n\n                    return true;\n                }\n\n                return false;\n            }\n\n            // Retrieve node index\n            var nodeIndex = this.nodes.indexOf(node);\n            if (nodeIndex < 0) {\n                throw new Error('Invalid node specified: node.id=' + JSON.stringify(node.id));\n            }\n\n            // Select this node\n            if (this.state.selectedNode !== node) {\n                node.state.selected = true;\n                this.rows[nodeIndex] = rowRenderer(node);\n            }\n\n            // Deselect the current node\n            if (this.state.selectedNode) {\n                var _selectedNode = this.state.selectedNode;\n                var _selectedIndex = this.nodes.indexOf(_selectedNode);\n                _selectedNode.state.selected = false;\n                this.rows[_selectedIndex] = rowRenderer(_selectedNode);\n            }\n\n            if (this.state.selectedNode !== node) {\n                this.state.selectedNode = node;\n\n                // Emit the 'tree.select' event\n                this.emit('tree.select', node);\n            } else {\n                this.state.selectedNode = null;\n\n                // Emit the 'tree.select' event\n                this.emit('tree.select', null);\n            }\n\n            // Updates list with new data\n            this.update();\n\n            return true;\n        }\n        // Set the state of the tree. See getState for more information.\n        // @param {object} state The state object\n        // @param {string} [state.openNodes] The ids of open nodes\n        // @param {string} [state.selectedNode] The id of selected node\n\n    }, {\n        key: 'setState',\n        value: function setState() {\n            var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        }\n        // TODO\n\n        // Open or close this node.\n\n    }, {\n        key: 'toggle',\n        value: function toggle(node) {}\n        // TODO\n\n        // Get the tree data as string.\n\n    }, {\n        key: 'toString',\n        value: function toString() {}\n        // TODO\n\n        // Update the title of a node. You can also update the data.\n        // @param {object} node\n        // @param {object} data The data object\n        // @param {object} [data.label] The title of a node\n\n    }, {\n        key: 'updateNode',\n        value: function updateNode(node, data) {\n            // TODO\n        }\n    }]);\n\n    return InfiniteTree;\n}(_events2.default.EventEmitter);\n\nmodule.exports = InfiniteTree;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/index.js\n ** module id = 0\n ** module chunks = 0\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/events/events.js\n ** module id = 1\n ** module chunks = 0\n **/","/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function(name, definition) {\r\n    if (typeof module != 'undefined') module.exports = definition();\r\n    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n    else this[name] = definition();\r\n}('Clusterize', function() {\r\n  \"use strict\"\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function(){\r\n    for( var v = 3,\r\n             el = document.createElement('b'),\r\n             all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ){}\r\n    return v > 4 ? v : document.documentMode;\r\n  }()),\r\n  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n  var Clusterize = function(data) {\r\n    if( ! (this instanceof Clusterize))\r\n      return new Clusterize(data);\r\n    var self = this;\r\n\r\n    var defaults = {\r\n      item_height: 0,\r\n      block_height: 0,\r\n      rows_in_block: 50,\r\n      rows_in_cluster: 0,\r\n      cluster_height: 0,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      content_tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {},\r\n      scroll_top: 0\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {};\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n    for(var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option];\r\n    }\r\n\r\n    var elems = ['scroll', 'content'];\r\n    for(var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem'];\r\n      if( ! self[elem + '_elem'])\r\n        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if( ! self.content_elem.hasAttribute('tabindex'))\r\n      self.content_elem.setAttribute('tabindex', 0);\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {data: '', bottom: 0},\r\n      scroll_top = self.scroll_elem.scrollTop;\r\n\r\n    // get row height\r\n    self.exploreEnvironment(rows);\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache);\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top;\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n    scroll_debounce = 0,\r\n    pointer_events_set = false,\r\n    scrollEv = function() {\r\n      // fixes scrolling issue on Mac #3\r\n      if (is_mac) {\r\n          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n          pointer_events_set = true;\r\n          clearTimeout(scroll_debounce);\r\n          scroll_debounce = setTimeout(function () {\r\n              self.content_elem.style.pointerEvents = 'auto';\r\n              pointer_events_set = false;\r\n          }, 50);\r\n      }\r\n      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n        self.insertToDOM(rows, cache);\r\n      if (self.options.callbacks.scrollingProgress)\r\n        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n    },\r\n    resize_debounce = 0,\r\n    resizeEv = function() {\r\n      clearTimeout(resize_debounce);\r\n      resize_debounce = setTimeout(self.refresh, 100);\r\n    }\r\n    on('scroll', self.scroll_elem, scrollEv);\r\n    on('resize', window, resizeEv);\r\n\r\n    // public methods\r\n    self.destroy = function(clean) {\r\n      off('scroll', self.scroll_elem, scrollEv);\r\n      off('resize', window, resizeEv);\r\n      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n    }\r\n    self.refresh = function() {\r\n      self.getRowsHeight(rows) && self.update(rows);\r\n    }\r\n    self.update = function(new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : [];\r\n      var scroll_top = self.scroll_elem.scrollTop;\r\n      // fixes #39\r\n      if(rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0;\r\n        last_cluster = 0;\r\n      }\r\n      self.insertToDOM(rows, cache);\r\n      self.scroll_elem.scrollTop = scroll_top;\r\n    }\r\n    self.clear = function() {\r\n      self.update([]);\r\n    }\r\n    self.getRowsAmount = function() {\r\n      return rows.length;\r\n    }\r\n    self.getScrollProgress = function() {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n    }\r\n\r\n    var add = function(where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : [];\r\n      if( ! new_rows.length) return;\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows);\r\n      self.insertToDOM(rows, cache);\r\n    }\r\n    self.append = function(rows) {\r\n      add('append', rows);\r\n    }\r\n    self.prepend = function(rows) {\r\n      add('prepend', rows);\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function() {\r\n      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n      while (rows_nodes.length) {\r\n        rows.push(rows_nodes.shift().outerHTML);\r\n      }\r\n      return rows;\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function(rows) {\r\n      var opts = this.options;\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n      if( ! rows.length) return;\r\n      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n      this.getRowsHeight(rows);\r\n    },\r\n    getRowsHeight: function(rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height;\r\n      opts.cluster_height = 0\r\n      if( ! rows.length) return;\r\n      var nodes = this.content_elem.children;\r\n      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n      // consider table's border-spacing\r\n      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n      opts.block_height = opts.item_height * opts.rows_in_block;\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n      return prev_item_height != opts.item_height;\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function() {\r\n      var opts = this.options;\r\n      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n      empty_row.className = opts.no_data_class;\r\n      if(opts.tag == 'tr') {\r\n        td = document.createElement('td');\r\n        td.appendChild(no_data_content);\r\n      }\r\n      empty_row.appendChild(td || no_data_content);\r\n      return [empty_row.outerHTML];\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length;\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        }\r\n      }\r\n      if( ! opts.cluster_height) {\r\n        this.exploreEnvironment(rows);\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start;\r\n      if(top_offset < 1) {\r\n        rows_above++;\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i]);\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      }\r\n    },\r\n    renderExtraTag: function(class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-';\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n      height && (tag.style.height = height + 'px');\r\n      return tag.outerHTML;\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function(rows, cache) {\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows.join(''),\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = [];\r\n\r\n      if(this_cluster_content_changed) {\r\n        if(data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n        }\r\n        layout.push(this_cluster_rows);\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n        this.html(layout.join(''));\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n        callbacks.clusterChanged && callbacks.clusterChanged();\r\n      } else if(only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n      }\r\n    },\r\n    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n    html: function(data) {\r\n      var content_elem = this.content_elem;\r\n      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n        var div = document.createElement('div'), last;\r\n        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n        while((last = content_elem.lastChild)) {\r\n          content_elem.removeChild(last);\r\n        }\r\n        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n        while (rows_nodes.length) {\r\n          content_elem.appendChild(rows_nodes.shift());\r\n        }\r\n      } else {\r\n        content_elem.innerHTML = data;\r\n      }\r\n    },\r\n    getChildNodes: function(tag) {\r\n        var child_nodes = tag.children, nodes = [];\r\n        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n            nodes.push(child_nodes[i]);\r\n        }\r\n        return nodes;\r\n    },\r\n    checkChanges: function(type, value, cache) {\r\n      var changed = value != cache[type];\r\n      cache[type] = value;\r\n      return changed;\r\n    }\r\n  }\r\n\r\n  // support functions\r\n  function on(evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function off(evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n  }\r\n  function getStyle(prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n  }\r\n\r\n  return Clusterize;\r\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/clusterize.js/clusterize.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar extend = function extend(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    sources.forEach(function (source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n    });\n\n    return target;\n};\n\n// @param {object|array} nodes The tree nodes\n// @param {object} [options] The options object\n// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n// @param {array} [options.openNodes] An array that contains the ids of open nodes\n// @return {array}\nvar flatten = function flatten() {\n    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    nodes = [].concat(nodes);\n\n    var flatten = [];\n    var stack = [];\n    var pool = {\n        lastChild: {}\n    };\n\n    options.openAllNodes = !!options.openAllNodes;\n    options.openNodes = options.openNodes || [];\n    options.throwOnError = !!options.throwOnError;\n\n    {\n        // root node\n        var firstNode = nodes.length > 0 ? nodes[0] : null;\n        var parent = firstNode ? firstNode.parent : null;\n        var index = 0;\n        var root = parent || { // defaults\n            label: '',\n            parent: null,\n            children: nodes,\n            state: {\n                depth: -1,\n                path: '',\n                total: 0\n            }\n        };\n\n        if (root === parent) {\n            var subtotal = root.state.total || 0;\n\n            // Traversing up through its ancestors\n            var p = root;\n            while (p) {\n                var _p$state = p.state;\n                var path = _p$state.path;\n                var lastChild = _p$state.lastChild;\n                var _p$state$total = _p$state.total;\n                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\n                // Rebuild the lastChild pool\n\n                if (path && lastChild) {\n                    pool.lastChild[path] = true;\n                }\n\n                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n                p.state.total = total - subtotal;\n                if (p.state.total < 0) {\n                    if (options.throwOnError) {\n                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n                    } else {\n                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n                    }\n                }\n\n                p = p.parent;\n            }\n        }\n\n        stack.push([root, root.state.depth, index]);\n    }\n\n    while (stack.length > 0) {\n        var _stack$pop = stack.pop();\n\n        var _stack$pop2 = _slicedToArray(_stack$pop, 3);\n\n        var current = _stack$pop2[0];\n        var depth = _stack$pop2[1];\n        var _index = _stack$pop2[2];\n\n        var _loop = function _loop() {\n            var node = current.children[_index];\n            node.parent = current;\n            node.children = node.children || [];\n\n            var path = current.state.path + '.' + _index;\n            var more = Object.keys(node.children).length > 0;\n            var open = more && function () {\n                var openAllNodes = options.openAllNodes;\n                var openNodes = options.openNodes;\n\n                if (openAllNodes) {\n                    return true;\n                }\n                // determine by node object\n                if (openNodes.indexOf(node) >= 0) {\n                    return true;\n                }\n                // determine by node id\n                if (openNodes.indexOf(node.id) >= 0) {\n                    return true;\n                }\n                return false;\n            }();\n            var lastChild = _index === current.children.length - 1;\n            var prefixMask = function (prefix) {\n                var mask = '';\n                while (prefix.length > 0) {\n                    prefix = prefix.replace(/\\.\\d+$/, '');\n                    if (!prefix || pool.lastChild[prefix]) {\n                        mask = '0' + mask;\n                    } else {\n                        mask = '1' + mask;\n                    }\n                }\n                return mask;\n            }(path);\n\n            if (lastChild) {\n                pool.lastChild[path] = true;\n            }\n\n            // This allows you to put extra information to node.state\n            node.state = extend({}, node.state, {\n                depth: depth + 1,\n                lastChild: lastChild,\n                more: more,\n                open: open,\n                path: path,\n                prefixMask: prefixMask,\n                total: 0\n            });\n\n            {\n                // Traversing up through its ancestors and update the total number of child nodes\n                var _p = node;\n                while (_p.parent !== null) {\n                    _p.parent.state.total++;\n                    _p = _p.parent;\n                }\n            }\n\n            flatten.push(node);\n\n            ++_index;\n\n            if (more && !open) {\n                return 'continue';\n            }\n\n            if (more) {\n                // Push back parent node to the stack that will be able to continue\n                // the next iteration once all the child nodes of the current node\n                // have been completely explored.\n                stack.push([current, depth, _index]);\n\n                _index = 0;\n                depth = depth + 1;\n                current = node;\n            }\n        };\n\n        while (_index < current.children.length) {\n            var _ret = _loop();\n\n            if (_ret === 'continue') continue;\n        }\n    }\n\n    return flatten;\n};\n\nexports.flatten = flatten;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/flattree/lib/index.js\n ** module id = 3\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.defaultRowRenderer = undefined;\n\nvar _utils = require('./utils');\n\nvar defaultRowRenderer = function defaultRowRenderer(node) {\n    var id = node.id;\n    var label = node.label;\n    var state = node.state;\n    var depth = state.depth;\n    var more = state.more;\n    var open = state.open;\n    var path = state.path;\n    var children = state.children;\n    var total = state.total;\n    var _state$selected = state.selected;\n    var selected = _state$selected === undefined ? false : _state$selected;\n\n\n    var togglerContent = '';\n    if (more && open) {\n        togglerContent = '▼';\n    }\n    if (more && !open) {\n        togglerContent = '►';\n    }\n    var toggler = (0, _utils.buildHTML)('a', togglerContent, {\n        'class': function () {\n            if (more && open) {\n                return (0, _utils.classNames)('tree-toggler');\n            }\n            if (more && !open) {\n                return (0, _utils.classNames)('tree-toggler', 'tree-closed');\n            }\n            return '';\n        }()\n    });\n    var title = (0, _utils.buildHTML)('span', (0, _utils.quoteattr)(label), {\n        'class': (0, _utils.classNames)('tree-title')\n    });\n    var treeNode = (0, _utils.buildHTML)('div', toggler + title, {\n        'class': 'tree-node',\n        'style': 'margin-left: ' + depth * 12 + 'px'\n    });\n    var treeItem = (0, _utils.buildHTML)('div', treeNode, {\n        'aria-id': id,\n        'aria-expanded': more && open,\n        'aria-depth': depth,\n        'aria-path': path,\n        'aria-selected': selected,\n        'aria-children': children ? Object.keys(children).length : 0,\n        'aria-total': total,\n        'class': (0, _utils.classNames)('tree-item', { 'tree-selected': selected })\n    });\n\n    return treeItem;\n};\n\nexports.defaultRowRenderer = defaultRowRenderer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/renderer.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * Example #1:\n * =========================================================================\n * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n *\n * buildHTML('a', 'My Mail', {\n *     id: 'mymail',\n *     href: 'http://mymail.example.com'\n * });\n *\n * Example #2:\n * =========================================================================\n * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n *\n * buildHTML('input', {\n *   id: 'myinput',\n *   type: 'text',\n *   value: 'myvalue'\n * });\n *\n */\nvar buildHTML = function buildHTML(tag, html, attrs) {\n    switch (tag) {\n        case 'select':\n            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n                var options = html || {};\n                html = '';\n                for (var value in options) {\n                    if (!options.hasOwnProperty(value)) {\n                        continue;\n                    }\n                    html += buildHTML('option', options[value] || '', { value: value });\n                }\n            }\n            break;\n\n        default:\n            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n                attrs = html;\n                html = undefined;\n            }\n            break;\n    }\n\n    var h = '<' + tag;\n    for (var attr in attrs) {\n        if (!attrs.hasOwnProperty(attr)) {\n            continue;\n        }\n        if (typeof attrs[attr] !== 'undefined') {\n            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n        }\n    }\n    h += typeof html !== 'undefined' ? '>' + html + '</' + tag + '>' : '/>';\n\n    return h;\n};\n\nvar classNames = function classNames() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n\n    var classNames = [];\n    args.forEach(function (arg) {\n        if (Array.isArray(arg)) {\n            classNames = classNames.concat(arg);\n        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n            Object.keys(arg).forEach(function (className) {\n                var ok = arg[className];\n                if (!!ok) {\n                    classNames.push(className);\n                }\n            });\n        } else {\n            classNames.push(arg);\n        }\n    });\n    return classNames.join(' ');\n};\n\n/**\n * The quoteattr() function is used in a context, where the result will not be evaluated by javascript but must be interpreted by an XML or HTML parser, and it must absolutely avoid breaking the syntax of an element attribute.\n */\nvar quoteattr = function quoteattr(s, preserveCR) {\n    preserveCR = preserveCR ? '&#13;' : '\\n';\n    return ('' + s). /* Forces the conversion to string. */\n    replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n    .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n    .replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n    /*\n     * You may add other replacements here for HTML only\n     * (but it's not necessary).\n     * Or for XML, only if the named entities are defined in its DTD.\n     */\n    .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n    .replace(/[\\r\\n]/g, preserveCR);\n};\n\nexports.buildHTML = buildHTML;\nexports.classNames = classNames;\nexports.quoteattr = quoteattr;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/utils.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}