{
  "name": "infinite-tree",
  "version": "0.1.3",
  "description": "A browser-ready tree library that can efficiently display a large tree with smooth scrolling.",
  "main": "lib/index.js",
  "scripts": {
    "prepublish": "npm run lint && npm test && npm run build && npm run dist && npm run stylus",
    "build": "babel ./src --out-dir ./lib",
    "test": "./babel-tap --coverage test/*.js",
    "dist": "webpack; BUILD_ENV=dist webpack",
    "lint": "eslint ./src",
    "lint:fix": "eslint --fix ./src",
    "stylus": "stylus < src/index.styl > dist/infinite-tree.css",
    "coveralls": "./babel-tap --coverage --coverage-report=text-lcov test/*.js | node_modules/.bin/coveralls"
  },
  "author": {
    "name": "Cheton Wu",
    "email": "cheton@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cheton/infinite-tree.git"
  },
  "dependencies": {
    "clusterize.js": "^0.16.0",
    "flattree": "^0.5.2"
  },
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.4",
    "babel-eslint": "^6.0.0-beta.6",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "coveralls": "^2.11.8",
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.2.0",
    "eslint-loader": "^1.3.0",
    "eslint-plugin-react": "^4.2.3",
    "lodash": "^4.6.1",
    "stylint": "^1.3.7",
    "stylus": "^0.54.2",
    "tap": "^5.7.0",
    "webpack": "^1.12.14",
    "webpack-hot-middleware": "^2.10.0"
  },
  "nyc": {
    "exclude": []
  },
  "readme": "# infinite-tree [![build status](https://travis-ci.org/cheton/infinite-tree.svg?branch=master)](https://travis-ci.org/cheton/infinite-tree) [![Coverage Status](https://coveralls.io/repos/cheton/infinite-tree/badge.svg)](https://coveralls.io/r/cheton/infinite-tree)\n[![NPM](https://nodei.co/npm/infinite-tree.png?downloads=true&stars=true)](https://nodei.co/npm/infinite-tree/)\n\nA browser-ready tree library that can efficiently display a large tree with smooth scrolling. Powered by [FlatTree](https://github.com/cheton/flattree) and [Clusterize.js](https://github.com/NeXTs/Clusterize.js).\n\nView [demo](http://cheton.github.io/infinite-tree) at http://cheton.github.io/infinite-tree.\n\n#### The project is under heavy development and a lot of things are changing. Stay tuned for more information later.\n\n\n## Installation\n```bash\nnpm install --save infinite-tree\n```\n\n## Usage\n```js\nimport InfiniteTree from 'infinite-tree';\nimport 'infinite-tree/dist/infinite-tree.css';\n\nconst data = {\n    id: 'fruit',\n    label: 'Fruit',\n    children: [{\n        id: 'apple',\n        label: 'Apple'\n    }, {\n        id: 'banana',\n        label: 'Banana',\n        children: [{\n            id: 'cherry',\n            label: 'Cherry'\n        }]\n    }]\n};\nconst tree = new InfiniteTree({\n    autoOpen: true,\n    el: document.querySelector('#tree'),\n    // tree data\n    data: data\n});\ntree.on('tree.open', (node) => {\n});\ntree.on('tree.close', (node) => {\n});\ntree.on('tree.select', (node) => {\n});\n```\n\n## Options\nBelow are the configuration options with their default values:\n```js\n{\n    autoOpen: false,\n    el: null,\n    rowRenderer: defaultRowRenderer,\n    data: []\n}\n```\n\n#### autoOpen\n\nType: `Boolean` Default: `false`\n\nSet to `true` to open all nodes.\n\n\n#### el\n\nType: `DOMElement` Default: `null`\n\nThe DOM element for rendering a tree.\n\n\n#### rowRenderer\n\nType: `Function` Default: [defaultRowRenderer](https://github.com/cheton/infinite-tree/blob/master/src/renderer.js)\n\nA custom row renderer that returns a HTML string. An example of minimum setup is shown as below:\n```js\nfunction (node) {\n    var state = node.state;\n    // Check node state\n    var html = [\n        '<div aria-id=' + JSON.stringify(node.id) + ' class=\"tree-item tree-selected\">',\n        '   <div class=\"tree-node\">',\n        '       <a class=\"tree-toggler tree-toggler-closed\">â–º</a>',\n        '       <span class=\"tree-title\">' + node.label + '</span>',\n        '   </div>',\n        '</div>',\n        ''\n    ].join('\\r\\n');\n    return html;\n}\n```\n\n\n#### data\n\nType: `Object` or `Array` Default: `[]`\n\nDefine a tree node structure like so:\n```js\n[\n    { // node\n        id: '<unique-node-id>', // Required\n        label: 'Node Label', // Required\n        children: [] // Optional\n    }\n]\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "daf56c1b3be6f070609945e91c6bd9b3ee04e33a",
  "bugs": {
    "url": "https://github.com/cheton/infinite-tree/issues"
  },
  "homepage": "https://github.com/cheton/infinite-tree#readme",
  "_id": "infinite-tree@0.1.3",
  "_shasum": "a990936fa25f1c99a202101f654dc50f8a41b136",
  "_from": "infinite-tree@latest"
}
